<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>思考感悟 on CoderZh Blog</title>
        <link>http://blog.coderzh.com/categories/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/</link>
        <language>zh-CN</language>
        <author>CoderZh</author>
        <rights>Copyright (c) 2015, CoderZh; all rights reserved.</rights>
        <updated>Sun, 29 Nov 2015 21:21:35 CST</updated>
        
        <item>
            <title>程序员的思考：教育的未来</title>
            <link>http://blog.coderzh.com/2015/11/29/hacker-thinking-mooc/</link>
            <pubDate>Sun, 29 Nov 2015 21:21:35 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/11/29/hacker-thinking-mooc/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/mooc.jpg-wt&#34; alt=&#34;mooc&#34; /&gt;&lt;/p&gt;

&lt;p&gt;感谢大家的支持！自从上次发了《程序员的思考：分享即提高》一文，订阅数一下从 500 蹦到 1200，已经远远超出了我的预期。&lt;/p&gt;

&lt;p&gt;但隔了两周没有发文章，老婆说，你不会掉粉了吧。我说不怕，我也没有承诺每周必须写一篇，如果仅仅因为隔了几周没发文章就取消订阅的那就取消吧。我不像其他公众号那样高产，因为每周 5 天上班早出晚归，只有周末的时间拿来写作。&lt;/p&gt;

&lt;p&gt;所以周末的时间显得尤为宝贵。写作的内容可以在平时多听多看多想，然后留到周末一气呵成。写文章是一个不断总结的过程，我不希望一直停留在总结过去，所以我还需要不断的学习新的知识，写更多的代码，参与开源项目，或者做有意思的 Side Project。这些都需要大量的业余时间来支撑，如果这些时间被其他东西占据了，写作的时间就会少了。&lt;/p&gt;

&lt;p&gt;是的，前两周未写文章的一个主要原因是时间被占据了。那就是我可爱的宝宝诞生了！男孩，6 斤 8 两，我当爸爸了。我和老婆给小宝宝取了个小名：可乐。出自苏轼的：凡物皆有可观。苟有可观，皆有可乐。希望他快快乐乐的成长。&lt;/p&gt;

&lt;p&gt;进入父亲角色仿佛进入了人生的第二阶段，考虑问题的时候不再仅仅是自己，太阳出来的时候不再抱怨今天太热，而是想着今天宝宝可以好好的晒晒太阳了。即使《琅琊榜》追到一半也要把电视关上（已经在出生前抓紧看完了，嘿嘿），为了不影响宝宝的视力。把《代码大全》换成《育儿宝典》，感觉育儿的知识一点不比代码简单。相信做了父亲的人都会有同样的深刻体会。&lt;/p&gt;

&lt;p&gt;虽然周末的时间大量的花在孩子的身上，但是时间挤挤还是有的。之前听《狗熊月读》介绍《翻转课堂的可汗学院》一书，感觉很有意思，于是在微信读书里买了这本书，利用喂奶和换尿布的间隙大致翻了翻这本书。这是一本关于现代教育思考的一本书，很多观点在我看来非常新颖，引发思考。&lt;/p&gt;

&lt;p&gt;我们都曾经历或正经历着应试教育，我们都曾在太阳当空照，花儿对我笑的时候背上小书包上学校，但我们从未想过为什么要上学校。在我们小的时候，根本不会也不具备思考这样问题的能力，即使我们长大成年，有了自己的孩子，也不会去思考这样的问题，因为上学、考试、升级是再正常不过的事情。&lt;/p&gt;

&lt;p&gt;在《翻转课堂的可汗学院》一书中提到，把学生按年龄划分，集中到课堂，统一授课，根据考试成绩判断是否升级或毕业的教学体系是在 18 世纪由普鲁士人最先实施的。普鲁士人给人的印象是脸上翘着呆板的胡子，戴着拘谨的帽子，采用死板的行军方式。他们靠税金支持的义务教育不仅是一种教育手段，更是一种政治手段。普鲁士人的初衷不是教育出能够独立思考的学生，而是大量炮制忠诚且易管理的国民。&lt;/p&gt;

&lt;p&gt;时代在进步，科技在飞速发展，而我们的教育方式却前进缓慢。&lt;strong&gt;当今社会，我们需要的是具有创造力、充满好奇心并且能自我引导的终身学习者。&lt;/strong&gt;而现在的学校教育不仅不能起到积极引导的作用，反而对学生产生很多负面的影响。&lt;/p&gt;

&lt;p&gt;几千年前孔子就提出因材施教的教育理念，在现代学校教育中，学生被批量的灌输知识，通过考试，达到 60 分即可升一年级，而不管对知识掌握与否。更有甚者，根据考试成绩区分快班慢班。这导致了学习较差者失去信心，由于前面的知识并未巩固，新的知识又不断的灌输进来，导致根本无法理解新知识，从而造成恶性循环。&lt;/p&gt;

&lt;p&gt;问题的根源是那些当前成绩较差者根本无法掌握学习的知识吗？该书作者推崇的精熟教学法坚信，&lt;strong&gt;只要教学条件能够满足学生的需要，那么所有学生都能掌握知识，任何学生都不会掉队或成绩不佳。&lt;/strong&gt;有的人理解知识快，有的人理解慢一些，但如果给他足够的时间，也许能将知识理解的比其他人更加巩固。而学校教育不会照顾到每一个人，他们有按部就班的课时计划，时间到了就得进行下一个课程表的课程。有的人也许贪玩，也许生病请假，也许还在理解上节课的知识，导致某个知识点掌握不好，从而触发后续的连锁反应，最终完全失去信心接受自己差生的标签。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;静熟教育法的核心是指学生在进入更高难度的学习阶段之前，应充分理解之前所学习的概念。常量是学生对知识和概念的高水平理解，而变量是学生为理解问题所花费的时间。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该书作者创建的可汗学院受到包括比尔盖茨在内的慈善基金的赞助，利用互联网通过在线的方式进行教育，让学生学习的过程变得更加主动，充分运用静熟教学法，自己控制学习的进度。通过软件，精确统计和分析各知识点掌握的情况，从而提供更加准确的辅导。&lt;/p&gt;

&lt;p&gt;更多内容请看原书。看了此书后，我的感想是，在互联网及移动互联网飞速发展的今天，学校传统的教育方式已经逐渐落后，&lt;strong&gt;在线教育也许会是下一个风口&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;设想这么一个创业项目：&lt;strong&gt;滴滴学习&lt;/strong&gt;。在地图上显示附近的讲师和学生列表，讲师有相关背景介绍和过往学生给的评分星级，学生在学习某个知识点有疑问时可以随时呼叫附近的优质讲师进行一对一的辅导讲解，每个讲师都可以在个人页面提供长期课程供学生参加，除了线上互动，定期还会组织线下活动。学习结果的评判标准是学生是否认为已经完全掌握了该知识点并通过一定的测验。所有闲散在家的高学历优质家庭主妇都可以直接在家接单，为附近小区的学生提供优质的教学服务。&lt;/p&gt;

&lt;p&gt;再大胆假设一下，在遥远的未来，集中式的学校彻底关闭，每个人在不同阶段都能在网络上平等的获取优质的教育资源，每个人都能根据自我兴趣自主的选择学习内容。&lt;/p&gt;

&lt;p&gt;未来假设真的如此，那么现在所做的正是通往未来正确之路的努力。有人问特斯拉的创始人埃隆·马斯克，你想过会失败吗？他回答说，我想的是肯定会失败，但我还是要去做，因为即使我不做，别人也会做，电动环保汽车是未来，即使我失败了，也会是人类通往未来的一笔经验。（大概说过类似的话）&lt;/p&gt;

&lt;p&gt;如今，在线教育（MOOC）的概念已经炒起来了，出现了各种 MOOC 网站，比如国外的Coursera、Udacity，国内的各种慕课网，甚至 BAT 也开始布局了，比如腾讯课堂。据腾讯发布的在线教育报告称，K12在线教育已有千亿美元市场。（K12 或 K-12 ，是kindergarten through twelfth grade的简写，是指从幼儿园到十二年级，这两个年级是美国、澳大利亚及English Canada的免费教育头尾的两个年级，此外也可用作对基础教育阶段的通称。）&lt;/p&gt;

&lt;p&gt;滴滴学习，你投吗？&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>程序员的思考：分享即提高</title>
            <link>http://blog.coderzh.com/2015/11/22/hacker-thinking-study/</link>
            <pubDate>Sun, 22 Nov 2015 10:36:35 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/11/22/hacker-thinking-study/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/learning.jpg-wt&#34; alt=&#34;learning&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从今年2月底开通微信公众账号以来，到现在差不多9个月的时间，订阅的用户差不多有 500 人了。这个数字当然不能和那些大 V 的订阅数相比，甚至那些大 V 在文章结尾处给别人的账号做个推荐，一天的订阅数也许都会超过我的。但是，我对 500 个订阅数的结果是很满意的。&lt;/p&gt;

&lt;p&gt;记得最早开通公众号那会，我还在上家游戏公司。我离开公司前给程序组的同学做了一次关于游戏服务端开发的讲座。在演讲稿的最后一页，我贴出了我的公众号二维码。我说，我马上就要离开公司了，这是最后一次做分享了。不过，可以关注我的这个公众号，之后我的学习心得和最新动态都会在这个公众号里发出来。大家都在广州，也有的是交流的机会。&lt;/p&gt;

&lt;p&gt;所以，前公司的同事成了我的公众号最早的订阅者。&lt;strong&gt;即使订阅数很少，我也写的很认真，因为我明白，写公众号收获最大的不是读者，而是自己。&lt;/strong&gt;它锻炼了我写作的能力，让我静下心来思考，通过不断的学习、思考、总结、汇集成文字，最后常常有种豁然开朗的感觉，感觉对一个东西的理解又深入了一个层次。&lt;/p&gt;

&lt;p&gt;在我刚工作第一年的时候，我就养成了写博客的习惯。仔细想了想，也许是在更早的时候就开始写博客的。我记得大四（2006年左右）那会，&lt;a href=&#34;http://www.cnblogs.com&#34;&gt;博客园&lt;/a&gt; 可谓是如日中天，百花齐放。在博客园里我如饥似渴的学习着微软的技术，那时候园子里大神辈出，每每让我仰视。那时候加的 QQ 群：湖南微软开发者俱乐部，直到现在还在里面，虽然不发言，也没有被管理员踢掉，可见这是一份大家共同的记忆，谁都不想去破坏它。&lt;/p&gt;

&lt;p&gt;于是我学习大神在博客园里的开通了博客。在博客园开通博客是需要一番自我介绍的，当时还有些担心像我这种学生菜鸟，会不会不让我开通。于是在自我介绍里使劲把自己胡吹了一通，最后申请成功了总算松了一口气。&lt;strong&gt;不知道现在博客园的注册流程是否还是一样，我觉得那样挺好的，看似提高了注册门槛，最后能让用户有种注册不易，且行且珍惜的感觉。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;工作之后，有一天看到一个同事把自己的 QQ 名改成了 &lt;code&gt;coder&lt;/code&gt; 。这位同事姓刘，和我同一批校招进来，一起参加了金山的首批训练营。那时的他已经在训练营里声名显赫，在课堂上经常有惊人之举，常常有人议论。号称在学校的时候已经写了 10 W 行代码，样子看上去是一个典型的程序员。认识的同学大概已经知道是谁了。&lt;code&gt;coder&lt;/code&gt; &lt;strong&gt;是一个极其普通的词，但在当时的我看来，&lt;code&gt;coder&lt;/code&gt; 代表了专注，专心研究代码，写代码，不浮夸，不浮躁，不因外界的纷杂变化干扰心境。&lt;/strong&gt;于是我把博客园里的 ID 修改成了 &lt;code&gt;CoderZh&lt;/code&gt; ，我姓张，Zh 表示 Zhang 。&lt;/p&gt;

&lt;p&gt;印象中我删除了学校期间稍显稚嫩的文章，也算有个新的开始。从 2007 开始到现在，我在博客园里写了大约 200 多篇文章，收到的评论 2000 多。阅读数最高的文章《&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2009/04/06/1426755.html&#34;&gt;玩转Google开源C++单元测试框架Google Test系列(gtest)&lt;/a&gt;》，总阅读数到现在约有 58 W。&lt;/p&gt;

&lt;p&gt;后来博客园逐渐没落了，即使发到首页阅读数也少的可怜，而博客流量的首要来源依然是搜索引擎。于是今年我完全放弃了博客园，搭建了自己的独立博客：&lt;a href=&#34;http://blog.coderzh.com/&#34;&gt;http://blog.coderzh.com/&lt;/a&gt; ，把之前的文章也导入了过来，同时也开通了微信公众号。&lt;/p&gt;

&lt;p&gt;说回微信公众号。我也希望能有更多人订阅，也算是对我的付出的一种肯定吧。于是，我在我的各个社交账号上贴了微信公众号的二维码，在之前博客园的博客签名里进行导流，给开发者头条投稿等等。订阅数有了一些起色，下面是从开通以来累积用户数的变化曲线：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/wp-tend.jpg-ws&#34; alt=&#34;wp-tend&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从 9 月份开始，曲线开始变抖了一些，开始越来越多人关注我的公众号了，我也在不断的思考我的公众号的定位到底是什么。看过我的独立博客的同学应该会发现，我的独立博客的文章分类只有三个：读书笔记、技术文章、思考感悟。技术类的文章不管前端后端，Python 还是 Go，通通归到了技术文章分类。而之前的我喜欢细分每个技术类别，到后来我发现人的精力是有限的，研究的技术方向也会很有限，通归到技术文章分类可以少一些分类的纠结，也能跳出技术的思维去看待世界。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以，我的公众号的内容主要也会围绕这三个主题：读书笔记、技术文章、思考感悟。我更希望偏重于思考感悟方面，这也是这个公众号名称的由来：一个程序员的思考。&lt;/strong&gt;我的公众号介绍是这么写的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;作为一个程序员，

思考程序的每一行代码，

思考生活的每一个细节，

思考人生的每一种可能。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在订阅数突破 500 之际，我想可以正式的来聊一聊作为一个程序员对一些东西的思考。首先申明，我并没有什么惊世骇俗的想法，也没有想要一语道破天机的妄想，我不会使用诸如“粗大事了！xxx”、“有人@你 xxx”之类的诱导标题，因为那样吸引而来的订阅者并不是我的目标读者。&lt;strong&gt;我想写的，只是一些朴实无华的想法，和一些自己的切身经历。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;回到本文的正题：分享即提高。你有没有注意到，&lt;strong&gt;程序员是一个最乐于分享的群体&lt;/strong&gt;    。很多程序员都喜欢写技术博客，学习了一些什么新技术，发现一个什么新技巧，都毫无保留的在博客里进行分享。&lt;/p&gt;

&lt;p&gt;比方说，你花了 1 个周的时间研究了 Facebook 最新的框架 React ，明白了里面大致是怎么回事，学习到了这个框架的用法，甚至领悟到了 React 设计的精髓，然后你又花了半天的时间把这些东西总结出来，发布到了你的博客里。&lt;/p&gt;

&lt;p&gt;这时另外一个人小 A 在网上浏览到了你的文章，他没有看过 React 的文档，也不太明白 React 到底为何物，但是隐约听过一些。而你的文章写的十分生动，把 React 总结的非常清晰易懂，又有条理，甚至看完后就可以开始和别人高谈阔论。&lt;/p&gt;

&lt;p&gt;然而，小 A 认真看完了你的文章就真正掌握了 React 吗？你把对 React 的所以理解都写出来了，小 A 即使全部记住了，他对 React 的理解会和你一样吗？答案是肯定的，不一样。&lt;strong&gt;没有经历苦难，怎知幸福的可贵。没有经过漫长的学习，怎能体会最后豁然开朗的瞬间。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而有的人会有这样的想法，我那么辛苦学习得来的东西，怎能给你分享，让你这么容易就学了去。他们抱着“好东西不会给别人分享”的想法，因为他们要靠那些所谓的别人不知道的秘密来获取更多的资源（比如：赚钱、一份工作、或者赚取声望）。这样的做法无可厚非，事实上很多人都是这么做的，也许这源于人的本性：自私。&lt;/p&gt;

&lt;p&gt;而为什么那么多成功的企业家乐于去分享呢？通过演讲、出书，把自己管理公司的理念、遇到困难时处理问题的想法和思路，公司的战略，毫无保留的分享给别人。（当然，有些企业家只是为了作秀和市场营销的目的，就另当别论了。）他们不怕竞争对手学了去吗？他们真的不怕。他们经常说的“小步快跑，快速试错”的互联网开发模式，你都要听烂了，但你真正理解了吗？知道具体该如何实施吗？遇到问题知道该如何处理吗？&lt;/p&gt;

&lt;p&gt;我相信有些企业家到最后成功的时候，也没有真正理解自己到底是如何成功的。通过总结，才让他们意识到原来成功是这么来的，通过分享，才让他们对成功的理解更加透彻，他们明白他们的成功是不可复制的，而这过程中他们的一些难能可贵的精神或坚持，才是其中最重要的因素。&lt;/p&gt;

&lt;p&gt;你在写 React 的文章时，每遇到一个含糊不清的问题时，你都必须把它彻底搞懂。为了让别人更容易理解，你还要假装自己对 React 一无所知，从一个更高的角度就看待 React ，理解别人的疑惑，调整自己的文字，让文章更加循序渐进，接近你当初学 React 时过程变化。这无疑是对自己学习内容的再一次洗礼，你说，写这篇文章，收获最大的不是你自己吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;学习从来没有什么捷径。古人云：学海无涯苦作舟。是很有道理的。&lt;/strong&gt;若不是你平时就花了很多时间学习了很多关于 React 的资料，当你看到别人写的关于 React 的学习总结的文章时并不会有多少感觉。前段时间公司有同事很深入的了研究了 TLS 协议（安全传输层协议），看了大量文献 Paper，深入理解了里面的大量技术细节，然后他在公司内部的平台上分享了一篇自己总结的 TLS 的文章。当我打开一看时，堪称史诗巨作，不仅仅在于篇幅的长度，更在于研究的深度。据了解，这位同事利用业余的时间，源于兴趣爱好，花了大量的时间去专研 TLS ，非常令人敬佩。&lt;/p&gt;

&lt;p&gt;然而，即使我认认真真的花了 1 个小时的时间把这位同事的文章看完，我就能达到他花了几个月研究的水准吗？答案肯定是不能的。我没有经历学习 TLS 的苦，所以无法领悟 TLS 的甘。即使最后这位同事被邀请做了一次现场的分享，把他的文章再次提炼总结，我去听了也只能留下他很牛逼的印象。而最后收获最大的肯定是他自己，通过写作和分享，不仅加深了自己对 TLS 的理解，还顺带赚取了声望。&lt;/p&gt;

&lt;p&gt;所以，沉下心，多花一些时间去看书，学习。&lt;strong&gt;学习一手的知识，看专业经典的名著，而不是看经过别人总结汇总的二手知识。&lt;/strong&gt;这点很重要，学习没有捷径，不要想着一步登天。当你学习领悟之后，分享出来，会有更深的理解。那些和你一样花了时间专研的人看了你的文章，会和你产生共鸣，或者有所启发。那些没有花时间学习的人看了你的文章，也许会是他的一个入门指引，为他打开了一扇窗。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分享即提高，通过分享，收获最大的是你自己。&lt;/strong&gt;很庆幸，在我刚工作的时候，就有人告诉了我这一点。他就是我的良师益友：TinyFish（外号鱼头，中文名就不写啦），出来创业做游戏也是和他一起的。在他身上，我学习了很多。他常常和我说，有时候自己问题想不明白时，拉上别人，在和别人叙述分享问题的过程中，突然就能发现问题所在，找到解决的方法，别人甚至没有说一个字。因为你在叙述的过程，你的大脑在经历不断的思考、总结、梳理的过程。&lt;strong&gt;一个你想不明白的问题，通过和别人分享，你能自己找到答案。一个你以为想明白了的问题，通过和别人分享，你会突然发现，之前所说的，都是错的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上就是我这篇文章想要分享的内容，通过写这篇文章，我又对分享本身理解更深了。你呢？&lt;/p&gt;

&lt;p&gt;如果你喜欢我的文章，就订阅我的微信公众号：hacker-thinking 吧。&lt;/p&gt;

&lt;p&gt;微信扫一扫：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;public/qrcode.jpg&#34; alt=&#34;qrcode&#34; /&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>程序员直播写代码网站livecoding.tv即将登陆中国，你有兴趣吗？</title>
            <link>http://blog.coderzh.com/2015/10/23/livecoding</link>
            <pubDate>Fri, 23 Oct 2015 07:08:11 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/10/23/livecoding</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/livecoding.jpg-wt&#34; alt=&#34;livecoding&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;lol直播:37e28bab6010c5ed2db9ee61a3969639&#34;&gt;LOL直播&lt;/h3&gt;

&lt;p&gt;之前玩LOL那段时间，在不玩游戏的时候最爱的就是看别人直播打游戏。最早的时候，是在own3d.tv上看，后来twitch.tv异军突起，直接统领了国外竞技游戏直播平台。比如那时候看HotshotGG玩豹女，Dyrus玩奥拉夫，甚至看他在Ban/Pick阶段切出去玩俄罗斯方块，也极为有趣。后来twitch.tv越来越卡了，随之YY直播主播兴起，以及现在的斗鱼直播，我也十分爱看。有的主播不但技术强，也十分风趣幽默，看他们和高手对决，或者代练虐菜，也十分享受。比如我比较喜欢的主播有阿倪蛋糕店、董小飒，还有玩德莱文玩到逆天的文森特。这些人都不是职业选手，但是他们的操作意识都十分让人惊叹。（也许之前关于LOL的那些好玩事可以单独开一篇来讲。）&lt;/p&gt;

&lt;p&gt;没玩LOL已经一年多了，不知道现在的情况如何了。有一点可以确定，LOL还是那么的火，直播LOL让主播赚的盆满钵满。观众也十分爱看。就像我们小时候总喜欢站在高手后边看他们怎么玩游戏，怎么一币通关是一个道理。&lt;/p&gt;

&lt;h3 id=&#34;直播写代码:37e28bab6010c5ed2db9ee61a3969639&#34;&gt;直播写代码&lt;/h3&gt;

&lt;p&gt;直播越来越火，有人直播唱歌，有人直播玩游戏，甚至有人直播睡觉打呼。&lt;/p&gt;

&lt;p&gt;然而，程序员直播写代码，你会喜欢看吗？&lt;/p&gt;

&lt;p&gt;第一次听说直播写代码，是在《内核恐慌》的第5期关于编程字体的，里面提到美国有个经验丰富的游戏引擎开发者在网上直播写游戏。&lt;/p&gt;

&lt;p&gt;后来查了下资料，具体是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/HandmadeHero.jpg-w&#34; alt=&#34;HandmadeHero&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mollyrocket.com/casey/about.html&#34;&gt;Casey Muratori&lt;/a&gt;是西雅图的一名经验丰富的游戏引擎开发者，据他的介绍，他已经拥有30年的游戏开发经验，参与开发的游戏引擎被数以千计的游戏采用。但是他经常抱怨现在的开发者有那么好的硬件条件，却做不出高效率的游戏出来。&lt;/p&gt;

&lt;p&gt;于是他决定在网上直播写一个游戏：&lt;a href=&#34;http://handmadehero.org/&#34;&gt;Handmade Hero&lt;/a&gt;，这个游戏不会使用任何游戏引擎，而是一行一行代码直播码出来。在直播的过程中，他除了敲代码，还会有大量的讲解，让观看直播的人获得更多系统的知识。你还可以给他支持15美元，这样你就可以随时获取到他的最新源代码，当游戏最终发布的时候，你还可以直接获得最终的发行版本。&lt;/p&gt;

&lt;p&gt;他是在twitch.tv上直播的，地址是：&lt;a href=&#34;http://www.twitch.tv/handmade_hero&#34;&gt;http://www.twitch.tv/handmade_hero&lt;/a&gt;，在&lt;a href=&#34;https://www.youtube.com/user/handmadeheroarchive&#34;&gt;You Tube&lt;/a&gt;（当然，这个网站并不存在）上可以观看之前的直播内容。&lt;/p&gt;

&lt;p&gt;优酷里有关于这个项目的宣传视频，非常炫酷：&lt;a href=&#34;http://v.youku.com/v_show/id_XODU2NDQxODky.html&#34;&gt;http://v.youku.com/v_show/id_XODU2NDQxODky.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这样牛逼的程序员在网上直播写代码，你有兴趣看吗？&lt;/p&gt;

&lt;p&gt;我觉得我会喜欢看。&lt;/p&gt;

&lt;h3 id=&#34;livecoding-tv:37e28bab6010c5ed2db9ee61a3969639&#34;&gt;Livecoding.tv&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/livecoding-example.jpg-w&#34; alt=&#34;livecoding-example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后来甚至出来一个专门的直播写代码网站：&lt;a href=&#34;http://www.livecoding.tv&#34;&gt;Livecoding&lt;/a&gt;，是Y-Combinator孵化器下的项目，确实是正儿八经的要进军这个看起来非常小众的市场。&lt;/p&gt;

&lt;p&gt;于是我上Livecoding，注册账号，观看直播。在上面你可以针对自己的喜好选择不同的编程语言，可以看当天直播也可以看过往录像，看的时候还可以聊天互动，功能基本和twitch.tv差不多。然而，在国内访问，体验只能用一个字来形容：卡。卡到根本看不了，在我做了各种尝试之后，最后还是放弃了。&lt;/p&gt;

&lt;p&gt;今早收到一封邮件，是Livecoding发来的，标题和正文都是中文。内容是：Livecoding即将全面登录中国。 Livecoding正在国内组建团队，在国内架设服务器，预计2016年能登录中国。有任何意见、想法或者经验的同学，可以联系他们michael@livecoding.tv。&lt;/p&gt;

&lt;h3 id=&#34;小众市场才会比较有趣:37e28bab6010c5ed2db9ee61a3969639&#34;&gt;小众市场才会比较有趣&lt;/h3&gt;

&lt;p&gt;这无疑是个好消息，到时候除了可以顺畅的观看各路大神写代码，甚至自己也可以尝试一下当一回主播，比如直播帮学美术的堂弟写个毕业设计要求的小游戏之类的。&lt;/p&gt;

&lt;p&gt;不过，已经有人尝试过了在虎牙和斗鱼上直播写代码，但观看的人数非常少。相对于美女直播和大神游戏玩家，直播撸代码对大众没有多少吸引力，这确实是一个小众市场。&lt;/p&gt;

&lt;p&gt;然而，小众市场才会更加有趣。大众的东西虽然能吸引到更多的人，但往往趋于平庸，能被小众市场吸引的人，往往本身就对这个东西非常感兴趣，如果在小众市场上挖掘的很深，能更加深入小众用户的心，获得更高的忠诚度。&lt;/p&gt;

&lt;p&gt;假如在程序圈内兴起了一股直播撸代码的热潮，你会想从观看直播过程中获得一些什么呢？比如，我就非常好奇，各路BAT或者业界专家大牛，你们写代码时是怎样一种状态，你们使用什么样的编辑器或IDE，选用什么样的字体，使用哪些快捷键，实现功能的思路是怎样的，怎样查文档，怎么Google，用哪些新奇好玩的工具软件，有哪些实用有趣的编程技巧……&lt;/p&gt;

&lt;p&gt;我可以想象到这是一种什么样的场景，就如同我在大学时看一位牛X同学现场教学如何从零开始做一个网站一样，包括写代码、美工P图切图、排版，噼里啪啦一顿快捷键一气呵成，让你看的眼花缭乱，顿时感觉不明觉厉。可惜这位牛X的同学最后还是选择了留校继续研读土木工程。&lt;/p&gt;

&lt;p&gt;对于Livcoding登录中国，我还是有些小期待的。你有兴趣吗？&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>关于开源的思考</title>
            <link>http://blog.coderzh.com/2015/10/11/open-source-thinking/</link>
            <pubDate>Sun, 11 Oct 2015 17:17:19 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/10/11/open-source-thinking/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/OpenSource.png-wt&#34; alt=&#34;OpenSource&#34; /&gt;&lt;/p&gt;

&lt;p&gt;程序员是一个热衷于开放、分享、协作的群体。他们将有创造力的代码公开分享，供大家审阅、评判、学习和使用，他们接受用户的意见，欢迎一切用户提交的PR改进。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开源是需要勇气的。&lt;/strong&gt;用户会用脚投票，依赖混乱、晦涩难懂、风格糟糕的代码会被用户所遗弃。代码也是要看脸的，选择开源意味着需要把自己最美的部分展示。如果一个项目一开始就是开源的，在代码编写过程中肯定会格外注意。根据以往的经验，那些表面光鲜的商业软件，内部的代码往往都是混乱不堪，难以示众的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开源不仅仅是把代码公开。&lt;/strong&gt;如果仅仅将代码公开就算开源的话，那和真正的开源离的十万八千里呢。开放源代码只是第一步，后续的社区建设，吸引开发者或用户一起来共同参与，形成社区化的协作模式，将开源社区这个轮子滚动起来才是关键。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开源的协作模式是高效的。&lt;/strong&gt;一个出色的开源项目，可以吸引到全世界出色的程序员，他们大都基于爱好或使用需要，无偿贡献自己的代码。当然，最宝贵的是他们付出的时间。他们往往是在业余时间参与开源项目。在GitHub上，不同时区的人们通过Pull Request的方式跟进和推动项目前进。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开源需要对代码质量提出更高的要求。&lt;/strong&gt;通过Pull Rquest机制提交的代码，天然需要经过项目维护者的CodeReview才能合入的。在提PR时，需要让代码尽量的整洁，注释规范，有的项目还要求你通过squash合并成1次commit再提交。最后，最重要的环节是给修改的代码补充单元测试案例，保证测试案例是通过的。GitHub提供了这一整套流程的跟踪协作方式，所以程序员们对GitHub如此的爱不释手。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参与开源是一种极好的学习方式。&lt;/strong&gt;如果还没机会自己创建和维护一个好的开源项目，参与到别人的开源项目中会是一个很好的学习提高的方式。你可以看到牛人的代码是怎么写的，然后偷偷记下来。最好的方式是参与其中，不一定需要你贡献多少有价值的代码，也许一个简单的文档内容修改，也能拉近你和牛人之间的距离。当你对代码有一定的熟悉，你就可以打开Issue列表，看看有哪些问题你可以大展拳脚了。一旦你这么做了，相信对你的帮助是巨大的。这也是我近期的深刻体会。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代码不需要藏着掖着，用户资源和核心数据才是。&lt;/strong&gt;Facebook大多代码都是直接开源的，给社区贡献了大量高质量的开源代码。对他们来说，选择完全开放，吸引更多的开发者参与其中，只要将用户核心数据和平台资源掌握在手里，这个雪球是可以越滚越大的。这就如同RSA算法，加解密的算法是完全公开的，只要你保证了私钥不被泄露，其他的东西全部公开都是安全的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开源并不意味着免费，也许还能赚到钱。&lt;/strong&gt;很多程序员参与开源并不是为了赚钱，有的纯粹是爱好，有的是自我价值的实现。随着开源项目越来越大，越来越多人参与，需要参与维护和打理的时间就会变多，甚至有的人会全职来做这个。他们可以通过商业授权、培训咨询、捐赠等方式获得收入。只要认真经营，机会就会自己找上门来。&lt;/p&gt;

&lt;h3 id=&#34;我的切身体会:3583956c9bd42a05e9ead1f80dfc8eab&#34;&gt;我的切身体会&lt;/h3&gt;

&lt;p&gt;很早前我也经常丢一些代码到google code，正如前面所说的，这离真正的开源差的很远。因为我只是把代码一丢，然后就不管不顾了，渐渐下来，代码愈加的鲜人问津。对于别人的开源代码，我也基本是拿来主义。&lt;/p&gt;

&lt;p&gt;今年开始真正的参与到GitHub中去，其中之一就是Hugo静态网站生成器项目。由于对Go语言感兴趣，本着边学边用的态度，尝试给Hugo提了第一个PR，Hugo的维护者@bep和@anthonyfok都非常Nice，整个过程非常舒服和顺畅，随之我又陆续提了几个PR。&lt;/p&gt;

&lt;p&gt;下面是我给Hugo贡献的几个功能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add config option &amp;ldquo;disablePathToLower&amp;rdquo; &lt;a href=&#34;https://github.com/spf13/hugo/pull/1392&#34;&gt;#1392&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WordCount and Summary support CJK Language &lt;a href=&#34;https://github.com/spf13/hugo/pull/1399&#34;&gt;#1399&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hugo import from Jekyll &lt;a href=&#34;https://github.com/spf13/hugo/pull/1469&#34;&gt;#1469&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的链接可以追溯每次代码提交的详细过程。有的经过了反复讨论和反复修改，大家身处世界各地，时差不同。每天一早起来就可以看到他们给出的反馈。在讨论的过程中，可以看到别人对同一个问题的思考，互相交流，也学习到很多东西。&lt;/p&gt;

&lt;p&gt;Hugo的作者spf13(Steve Francia)可是一个牛人。spf13是大名鼎鼎的开源项目Docker和MongoDB的Chief Operator，另外他还是spf13-vim, Hugo, Cobra &amp;amp; Viper等开源项目的作者。能和这样的牛人交流学习，是一种不错的体验。他的博客地址：&lt;a href=&#34;http://spf13.com&#34;&gt;http://spf13.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;国庆在家给Hugo提了一个不大也不小的功能。就是上面的第三点：Hugo import from Jekyll。给Hugo提供了内置的import命令，将原来的Jekyll博客一键导入到Hugo来。这次提交的代码加上测试案例，有近600行，也算一个不小而且非常有用的改动了。详细介绍见上一篇博客：&lt;a href=&#34;http://blog.coderzh.com/2015/10/11/hugo-import-from-jekyll/&#34;&gt;使用Hugo Import一键迁移Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过hugo import功能刷了近600行代码之后，我在Hugo的贡献者列表里可以看到，已经一共刷了近千行代码了，算上删除的话。：）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/hugo-coderzh.png-ws&#34; alt=&#34;hugo-coderzh&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于时区和远程协作的关系，GitHub上协作时有时候需要等待，但我依然认为这是一种非常高效的协作方式。因为社区的力量是强大的，在大量社区用户的推动之下，项目每天都在改进，每天都在向更好的方向推动和前进，这才是项目保持长久活力的重要根本。&lt;/p&gt;

&lt;p&gt;关于开源，我还会继续下去，参与和发掘更多更好玩的东西。也欢迎访问我的GitHub和博客，和我交流，谢谢！&lt;/p&gt;

&lt;p&gt;GitHub：&lt;a href=&#34;https://github.com/coderzh&#34;&gt;https://github.com/coderzh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;博客：&lt;a href=&#34;http://blog.coderzh.com/&#34;&gt;http://blog.coderzh.com/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>说说刚入手的程序员键盘神器：HHKB Pro2</title>
            <link>http://blog.coderzh.com/2015/09/26/my-hhkb-pro2/</link>
            <pubDate>Sat, 26 Sep 2015 13:54:33 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/09/26/my-hhkb-pro2/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/hhkb-types.jpg&#34; alt=&#34;hhkb-types&#34; /&gt;&lt;/p&gt;

&lt;p&gt;几周前，托朋友从日本捎带了一块静电容键盘HHKB（Happy Hacking Keyboard） Pro2，大约RMB1200。整个键盘只有60个键，没有数字小键盘，甚至没有方向键和最上排的F1~F12功能键。大小写切换键替换成了Control键。整个键盘非常小巧紧凑，敲起来非常舒服。&lt;/p&gt;

&lt;p&gt;然而，这个键盘并不适合非程序员使用，因为少了很多按键。即使是程序员，也并不一定适合。因为HHKB主要是为Linux用户设计的，特别是Vim和Emacs党。用这块键盘，可以很方便的敲出常用的快捷键而不用手离键盘。（现在才发现原来学Emacs时为什么感觉小指要按到抽筋了，原来是键盘不对。。）&lt;/p&gt;

&lt;p&gt;我日常使用的是Windows，但我特别喜欢Vim，即使是在IDE里，我也要切换到Vim模式，不然我感觉敲不出代码。在我体验了几周HHKB之后，感觉即使是在Windows环境里，HHKB也是可以很好的使用的。HHKB有一组DIP开关，可以在几种模式下切换。比如HHKB模式和Mac模式，在Mac下使用这块键盘也是不错的选择。&lt;/p&gt;

&lt;p&gt;这块键盘非常的漂亮，由于是静电容键盘，利用电容容量的变化来判断按键的开关，由于无物理接触点就可以实现敲击，因而磨损更小，非常的耐用，据说可以用到传给你孙子，告诉他你爷爷当年就是用这块键盘敲的代码。。。&lt;/p&gt;

&lt;p&gt;这是一块明星级键盘，备受黑客级程序员追捧，比如：GNU之父Richard StallMan&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/StallmanHHKB.jpg&#34; alt=&#34;StallmanHHK&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再比如，C++ 之父 Bjarne Stroustrup&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/bjarne_hhkb.jpg&#34; alt=&#34;bjarne_hhkb&#34; /&gt;&lt;/p&gt;

&lt;p&gt;HHKB比想象中还小一些，比如和我的Cherry G80-3800放在一起：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/MyHHKB2.JPG-w&#34; alt=&#34;MyHHKB&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我的电脑桌面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/MyDesktop2.JPG-w&#34; alt=&#34;MyDesktop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OK，图晒完了，记录一点实用的。前面讲了HHKB有一组DIP开关，用来切换不同的输入模式。在键盘的背面，有6个DIP开关的说明：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/HHKB-DIP1.png&#34; alt=&#34;HHKB-DIP1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;HHK模式和Lite Ext.模式的区别是，Lite模式可以用Fn+Tab切换大小写（相当于Caps键），以及右边的◇键可以当Windows键或Mac的Command键。所以，一般情况下，Lite模式是更适合的。如果你是Mac，选Macintosh模式是更适合的，因为这种模式下，你可以使用Fn-A,Fn-S,Fn-D,Fn-F等多媒体组合键。&lt;/p&gt;

&lt;p&gt;我目前使用的是SW1 OFF，SW2 OFF，即HHK模式，因为我在想按Alt+Tab切换窗口时，经常误按到左◇+Tab，在Lite模式下直接切换了大小写。。之后适应了不会按错之后再改回来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/HHKB-DIP2.png-ws&#34; alt=&#34;HHKB-DIP2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在尝试了不同组合之后，目前我打开的是：SW3，SW4。我觉得这两个对于大多数人来说都是必须的吧，没有退格键是多么不方便。当然，Delete键改成了退格键之后，要删除文件时，就得按Fn+` 键来Delete了。由于F1~F12键我还是需要使用的，所以，Fn键的使用频率会远远大约Alt键，所以，SW5设成OFF，不要交换◇键和Alt键。如果你是Emacs用户，经常需要使用Alt键，可以把SW5设成ON。&lt;/p&gt;

&lt;h4 id=&#34;一些心得:15e5c3c642bde6d107bfd34058e7c128&#34;&gt;一些心得&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;最下排最左右的Alt键正常是不容易按到的。技巧是用直接用小指下面一点的手掌压，突然变得很容易按了：）&lt;/li&gt;
&lt;li&gt;开始会觉得通过Fn移动方向键会非常痛苦，当然现在也是。毕竟小指并没有那么灵活。目前左右移动还稍微习惯一些了。&lt;/li&gt;
&lt;li&gt;Control调到CapsLock键位置之后，Control+s键按的有些别扭，其他的还好。&lt;/li&gt;
&lt;li&gt;感觉最右边的Fn键太远了，按到的频率略少，感觉设计有点不合理。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，再说一点，键盘是每天上班或者娱乐时间里对着电脑时用的最多的东西之一了，花点代价买一块称心如意的键盘是非常值得的。再加上静电容键盘或者机械键盘是超长时间耐用的，花些投入绝对是值得的。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>关于最近的XcodeGhost事件，我也来说两句</title>
            <link>http://blog.coderzh.com/2015/09/21/xcode-ghost/</link>
            <pubDate>Mon, 21 Sep 2015 00:56:13 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/09/21/xcode-ghost/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/xcodeghost.jpg-w&#34; alt=&#34;xcodeghost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最近几天讨论的最多的就是XcodeGhost事件了，首先来简要的回顾一下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;某个后来自称XcodeGhost作者的程序员，自称本着玩一玩的心态，在苹果的APP开发工具Xcode里嵌入了一段恶意代码。&lt;/li&gt;
&lt;li&gt;该段代码会自动收集用户的信息，发送到一个地址近似苹果的服务器。也有专家分析存在更多的隐患和危害。&lt;/li&gt;
&lt;li&gt;一群苦逼的码农以开发iOS应用为生，发现苹果官方的APP开发工具Xcode下载龟速，于是在网上一顿乱搜，下载到了嵌入恶意代码的Xcode。&lt;/li&gt;
&lt;li&gt;大量这样的APP发布到了AppStore，包括一些大厂的。&lt;/li&gt;
&lt;li&gt;收集信息的恶意代码被发现，然后进一步扩散，称为了社会热点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个事件有几个值得讨论的点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;恶意代码到底危害有多大？&lt;/p&gt;

&lt;p&gt;腾讯的安全团队称，XcodeGhost除了收集APP版本、APP名称、本地语言、iOS版本、设备类型、国家码等设备信息，还可以通过openURL下发伪协议命令，让你的iPhone打开网页，发送短信，打电话，甚至操作具备伪协议能力的第三方APP。XcodeGhost可以让你的iPhone自动弹框，弹框的内容可以在服务端进行控制，而XcodeGhost恶意代码本身又存在安全漏洞，可以被中间人攻击，从而使得你的iPhone可能被更多人控制，成为一个肉鸡。&lt;/p&gt;

&lt;p&gt;看上去挺可怕的。不过也有另外一种观点：基于苹果系统级别的安全限制，恶意代码最多也只能收集一些基本的信息，像iCloud、AppStore的密码是不可能拿到的。而且恶意代码还未造成实质危害就被发现并关闭了，被植入恶意代码的APP也很快被苹果下架，大量APP已经更新了新版并修复了此问题，所以不用太担心。&lt;/p&gt;

&lt;p&gt;上面的说法都是有道理的，如果你还是觉得没有安全感，也可以把常用的密码修改一遍。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为什么一些大厂也中招？&lt;/p&gt;

&lt;p&gt;在人们的理解中，大厂应该流程比较规范，至少公司内部使用的软件应该都是正版的，为什么这次还是会中招？这里有一个误区，因为Xcode软件本身是免费的，所以根本不存在盗版一说。程序员下载Xcode时，发现苹果官方的下载太慢，于是在其他地方下载到了植入恶意代码的Xcode。&lt;/p&gt;

&lt;p&gt;然而，大厂可以因此推脱责任吗？我觉得不能。稍微懂点iOS开发的同学都知道，一个iOS应用开发完成后，需要编译打包，数字签名等操作，因为权限相关的原因，通常这些操作都会集中到指定的机器上来做，而这样的机器的软件安全性会更加重要的多。即使不是Xcode被植入了恶意代码，就算是系统上有其他恶意程序，也有可能在打包APP时被嵌入一段恶意代码。所以，在这样的机器上，安全性应该提高到另外一个更高的等级。对下载的官方软件，也要再做一次hash比较，检查是否下载到被篡改的软件。&lt;/p&gt;

&lt;p&gt;很多时候，用户是基于信任才使用你的APP，所以，不要因为你的安全意识上的疏忽，失去用户对你的信任。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;苹果为什么也不安全？&lt;/p&gt;

&lt;p&gt;如果你说安卓机不安全，我大概不会反驳。而一直被大家加以信任的苹果，为什么也会有安全隐患，为什么审核的时候没有发现，让这么多有问题的APP顺利的上架？为什么像openURL这样的超级API不能做到更安全？ 这些问题我回答不了，我没有开发过iOS的应用，对iOS的安全性研究不深，但我希望这次事件能更加引起苹果对安全的重视。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这件事件后，我能做什么？&lt;/p&gt;

&lt;p&gt;这件事情被爆出来后，特别是一个大厂的应用也曝光后，我也是第一时间先卸载了手机上的相关的应用。当有人爆出微信也中招时，肯定有很多人和我一样开始非常诧异，难以接受，删了微信我的手机还能干什么？呵呵。然后，你仔细一看，或者别人告诉你，微信6.2.5才有这个问题，最新版已经没有问题了。细心的人马上会发现，微信早在XcodeGhost被爆出来之前就早已发现了这个问题（最早被腾讯安全的团队发现的），然后第一时间加班加点发布了微信6.2.6版本修复了这个问题。&lt;/p&gt;

&lt;p&gt;现在有问题的APP基本已下架，上架的新版本也都修复了这个问题。如果你不放心可以修改一些密码。然而，这次事件之后，我能做什么？或者，给我的启示是什么？这次事件和程序员有关，从写恶意代码的程序员，到下载到含恶意代码的Xcode的程序员，而我刚好也是一名程序员。我能做什么？&lt;/p&gt;

&lt;p&gt;首先，我肯定不会去写恶意代码做坏事，顶多写个脚本抢个票刷个号，也是自己用。然后，在下载软件时，尽量到官方网站下载，对于比较重要的软件，最好下载后校验一下官方的hash。如果是商业付费软件，假如在你的承受范围之内，尽量还是购买正版。在你不断寻找破解补丁的过程中，有无数个包含恶意代码的软件正在向你招手。对于个人开发者，有很多软件都有了Community版本，像Visual Studio，Unity，JetBrains PyCharm等等开发工具，社区版本已经完全够用了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;最后:3500cef42208a15fa70ada140640cf08&#34;&gt;最后&lt;/h3&gt;

&lt;p&gt;希望这次事件正如自称XcodeGhost作者声称的那样不会有什么实际危害，同时，我更希望通过这次事件，能引起更多的人或公司关注我们的APP安全。用户信任你的APP，请做好你的APP的安全保护，不要辜负了用户对你的信任。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>微信公众号开通了原创保护功能</title>
            <link>http://blog.coderzh.com/2015/09/19/mp-new-start/</link>
            <pubDate>Sat, 19 Sep 2015 00:35:48 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/09/19/mp-new-start/</guid>
            <description>&lt;p&gt;周三非常意外的收到了微信的原创保护功能邀请，之所以说意外，是因为我没想到这么快就给我发了邀请，毕竟我的公众号关注的数量还不多。但我保证了每篇文章都是原汁原味的原创内容，而且目前保持了一周一更的速度。&lt;/p&gt;

&lt;p&gt;这个公众号是从今年2月底开始运营的，非常感谢所有关注了这个公众号的读者！每次我准备写公众号文章时，我都会提醒自己，我的消息会被强制推送出去到你们的手机里，我必须认真写一些有用的内容，不要浪费大家的时间。虽然这么说，文章的实际打开率还是很低的，这也是可以理解的。我也关注了很多订阅号，很多内容也是被我忽略过去，或者根本来不及看就被堆叠了。&lt;/p&gt;

&lt;p&gt;所以，再次感谢经常或者偶尔打开我文章看的同学！这个公众号运营6个多月了，目前有223个关注，其中大部分是看了我的博客关注的，因为那里放了关注的二维码。关注的数量不多，至少保持了稳定的增长。《从0到1》里有说到，初始用户不需要太多，有数百人就可以，如果他们都觉得非常好用就行了。所以，我只需要认真的写，用心的分享，服务好现有的关注者，让你们感觉到我的文章对你有用就行。至于哪天会不会有个爆发式的增长，我希望能有，但也不去奢求，也许现在这样稳定缓慢的增长也挺好。&lt;/p&gt;

&lt;p&gt;开了原创保护功能的同时，也开了评论功能，这是我一直都想要的功能啊。因为我要服务好你们，所以需要和你们更多的沟通和互动啊。&lt;/p&gt;

&lt;p&gt;看到这篇文章后，希望你们能给我一些反馈，说一说当初为什么关注hacker-thinking：一个程序员的思考，或者你更希望从这个公众号了解哪些方面内容的文章，或者，是其他任何的东西。：）&lt;/p&gt;

&lt;p&gt;还没有关注的同学，也关注一下吧：）微信公众号：hacker-thinking&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.coderzh.com/public/qrcode.jpg&#34; alt=&#34;qrcode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;谢谢支持！&lt;/p&gt;

&lt;p&gt;最后上个图，上周刚收到的HHKB :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/HHKB.jpg-w&#34; alt=&#34;HHKB&#34; /&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>坑爹的多说评论</title>
            <link>http://blog.coderzh.com/2015/09/18/holy-shit-duoshuo/</link>
            <pubDate>Fri, 18 Sep 2015 19:38:18 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/09/18/holy-shit-duoshuo/</guid>
            <description>&lt;p&gt;运用了各种奇技淫巧的黑科技手段，终于把之前旧页面的多说评论全部转过来了。如果再来选择一次的话，我绝不选多说。之后有时间，全部转移到disqus吧。&lt;/p&gt;

&lt;p&gt;多说简直就没人维护啊有木有，居然还那么多人用着。罗列一下多说评论的各种不人性。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;残废的评论通知功能&lt;/p&gt;

&lt;p&gt;简直就收不到任何通知啊，有木有，别人回复了根本没有邮件通知，页面右上角的弹框通知也木有啊。直到上周实在不能忍了，在我的VPS上跑了一个多说实时邮件提醒脚本：&lt;a href=&#34;https://gist.github.com/coderzh/bec0eb7e8f0cddba657b&#34;&gt;https://gist.github.com/coderzh/bec0eb7e8f0cddba657b&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;后台管理文章不能翻页&lt;/p&gt;

&lt;p&gt;文章列表只显示第一页，不能翻页，还怎么管理！逼到我使出了绝招，让它能翻页。。。本着大家以后都别用多说的心态，我就不透露具体方法了。如果你真想知道就留个言。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;评论迁移不人性&lt;/p&gt;

&lt;p&gt;网址变了，或者说data-thread-key变了之后，想把评论也迁移到新的地址。只能去后台编辑旧的data-thread-key，改成新的地址的data-thread-key。假如新的data-thread-key文章项已经存在，是修改不了的，这说的过去。假如新的data-thread-key的文章被删除后，旧的文章怎么也改不了data-thread-key成新的。最后只能曲线救国了，想知道的留言。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;垃圾的垃圾评论过滤&lt;/p&gt;

&lt;p&gt;评论后台里，偶然发现“垃圾评论”一项，而且发现里面有东西，明明不像是垃圾评论却被归到那里，而且没有任何通知。更坑爹的是：“(系统将自动清理发表于 30 天前的垃圾评论)”holy shit!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
        <item>
            <title>周末折腾的各种东西</title>
            <link>http://blog.coderzh.com/2015/09/05/busy-weekend/</link>
            <pubDate>Sat, 05 Sep 2015 23:44:48 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/09/05/busy-weekend/</guid>
            <description>

&lt;p&gt;这个周末放了3天假，第一天当然是要看盛大的阅兵仪式了，剩下的时间一半多是在折腾博客系统Hugo，剩下的时间在折腾各种工具、IDE，还有学习了一下Unity。&lt;/p&gt;

&lt;h3 id=&#34;折腾hugo:0c17b4d209ef6269100e3287d9d742ad&#34;&gt;折腾Hugo&lt;/h3&gt;

&lt;p&gt;上次给Hugo提了个Pull Request，提供了路径是否转换为小写的配置功能，最后被接受了，走过了一次完整的Pull Request流程，学到不少东西。周末继续折腾Hugo，又发现一个问题，文章的字数统计和70个字的摘要在我的博客里明显是不准确的，而且错的离谱。&lt;/p&gt;

&lt;p&gt;于是看了下Hugo的代码实现，发现字数统计只是简单的根据空格统计单词的总数。而我们中文的语言，哪来那么多空格，文字都是一个挨着一个，按照英文的字数统计方法，一个几千字的文章最后被统计出来只有一百字也是经常的事情。&lt;/p&gt;

&lt;p&gt;还有摘要的功能，如果没有主动使用``作为摘要的分隔符，Hugo会自动截取文章的前70个单词，并且保证截取的文字最后是一个完整的句子。数多少个单词的方法和字数统计是一样的，截取完整句子是往后找，直到找到下一个句号问号之类的。在中文博客里，这样的摘要截取方法常常导致把整篇文章当做了摘要。这也是不可接受的。&lt;/p&gt;

&lt;p&gt;于是，我尝试去修改字数统计和摘要截取算法，让它能适应中文、日文或者其他类似语言。首先是字数统计，比如“Hello 中国”应该被识别为3个词：Hello、中、国。怎么做呢？Golang里unicode/utf8的Package，提供了方法计算有多少个Rune，而Rune并不是Word，只是字符，比如“Hello 中国”调用RuneCountInString的结果会是8。&lt;/p&gt;

&lt;p&gt;于是，我借助utf8库里的一些方法，近似的实现了中英文文字的字数统计和摘要截取算法。说近似，因为实现方法不是很严谨，我不懂其他国家的语言，不知道其他国家语言在这样的算法下是否能保证正确。但我还是抱着试一试的态度，将我的修改给Hugo又提了一个Pull Request。&lt;/p&gt;

&lt;p&gt;在和Hugo主要维护者之一bep多次沟通之后，他提出，我的实现的确不是很严谨，不能保证所有语言都适用。而且，关于字数统计，他之前已经实现过一个类似的方法：RuneCount。于是我又回去把漏看的代码又看了一遍，果然已经有一个RuneCount的方法，用来统计有多个Rune。对，是Rune，不是Word，所以“Hello 中国”RuneCount的结果是7（空格会被忽略）。而我要的结果是3啊。&lt;/p&gt;

&lt;p&gt;后来我仔细一想，我真的这么在意有多少个英文单词和汉字吗？我在意的只是不要简单的根据空格分隔来统计字数，在意的只是说好的70个字的摘要，结果把整篇给做成了摘要。所以，使用RuneCount也OK啊，于是我就把之前的字数统计代码的改动还原了。bep提供了按Rune统计字数，但是没有提供按Rune截取摘要，于是我把之前稍微有些复杂的改动还原，提供了一个简短的按字符截取摘要的方法，并且补充了相应的测试案例。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TruncateStringByRune(str string, max int) (string, bool) {
    str = strings.Join(strings.Fields(str), &amp;quot; &amp;quot;)
    count := 0
    for index, rune := range str {
        if count &amp;gt;= max {
            return str[:index], true
        }
        if !IsWhitespace(rune) {
            count++
        }
    }
 
    return str, false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做完这次修改后，继续Pull Request啊，可是现在的Pull Request状态显示我有两次commit，而且前一次已经Push了。于是又学了一招如何将新的commit和之前已经Push的commit合并成一个commit。首先我的修改是在单独分支commit和push的，当前的master是并没有这两次commit，这时就可以通过&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git rebase -i master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后编辑里面的commits，将需要被合并的pick改成squash，保存退出后再重新编辑commit message，然后就变成了一个commit，这时再来个强制push：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git push origin coderzh-hugo -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是一开始了和挪威程序员bep的多次交涉，他又提出他开始后悔当初提供了RuneCount方法，他认为Hugo提供的方法应该越少越好，干同样一件事情不应该有多个不同的实现版本。而且他不但不认为我又加了一个RuneSummary方法是对的，他还打算把原来的RuneCount方法也删除，并且他十分确信能提供一个统一的版本，既能处理西方文字也能正确的处理中文、日文等其他语言文字。&lt;/p&gt;

&lt;p&gt;我虽然有些沮丧，但还是同意他的，于是我给他回复了我的想法（当然，原回复是英文的）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“我完全同意你的观点。但是我加了个RuneSummary方法也是有我的考虑的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;统计中文类语言的字数和摘要截取需要消耗更多一点的性能。我提供两个版本的实现，可以让英语系的用户还是原来的方法而不会损耗性能。&lt;/li&gt;
&lt;li&gt;摘要截取时，我不认为必须严格按照70个单词以及文字需要保证是一个完整的句子的方式来截取。因为一旦单词或句子很长时，整个摘要内容将会变的很长。而我需要的，仅仅是让所有的摘要都变得一样长，我才不在乎句子被截断。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是，我还是完全同意你的观点并且期待你的更好的统一的实现方式。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后bep有点被我说动了，回了一句：Let me think a little about this.&lt;/p&gt;

&lt;p&gt;至少，我的修改版本是适用于我的，所以我自己用着就好啦，至于Hugo官方如何来提供，还是等等吧。&lt;/p&gt;

&lt;h3 id=&#34;visual-studio-2015:0c17b4d209ef6269100e3287d9d742ad&#34;&gt;Visual Studio 2015&lt;/h3&gt;

&lt;p&gt;我之前用Unity开发游戏时的版本记得还是4.6，现在已经出了5.1.3版本了。社区免费版本已经几乎提供了所有功能，学习把玩已经足够了。Unity自带的MonoDevelop是很难用的，还是Visual Studio好用，毕竟是世界上最好的IDE（笑~）。在VS里装个UnityVS简直可以走遍天下了。我之前一直用的是Visual Studio 2013，打开UnityVS的下载地址一看，默认只提供了Visual Studio 2015的UnityVS插件。哦？嘿嘿，趁这个机会，我也升个Visual Studio 2015试试。VS2015同样是Community版本提供了所有我需要的功能，所以完全不需要其他版本和破解序列号了。&lt;/p&gt;

&lt;p&gt;装完VS2015，装好UnityVS插件，还需要安装另外两个神器啊，没有这两个神器，代码还怎么写？！一个是Visual Assist，一个是Viemu。作为一个Vimer，即使在IDE里也是要开启Vim模式的，毕竟，Vim才是世界上最好的编辑器啊（逃~）。&lt;/p&gt;

&lt;p&gt;该装的都装好了，是不是可以愉快的写代码了？字体！对了，听说有一种专门为程序员设置的字体，我一定要试试。于是去下载了&lt;a href=&#34;http://sourcefoundry.org/hack/&#34;&gt;Hack&lt;/a&gt;  字体。果然一使用就爱上了这种字体。如果想看效果，在网页里打开这篇博客，上面的代码高亮部分就是Hack字体。&lt;/p&gt;

&lt;p&gt;最后，终于可以愉快的玩耍了。&lt;/p&gt;

&lt;h3 id=&#34;markdown-here:0c17b4d209ef6269100e3287d9d742ad&#34;&gt;Markdown Here&lt;/h3&gt;

&lt;p&gt;这是另外一个神器，简直要节省我N多N多的编辑排版时间啊。之前我写好的Markdown格式的文章贴到微信公众平台的编辑器里，还要再编辑很久才能达到最终效果。而使用&lt;a href=&#34;https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa/reviews&#34;&gt;Markdown Here&lt;/a&gt;  这个Chrome插件，只需要在我将Markdown格式的文字拷贝到微信公众平台的编辑器里之后，按CTRL+ALT+M，立即会变成排版精良的有格式文字，而且几乎不需要再加工。其他地方的编辑器里也适用哦，谁用谁知道。&lt;/p&gt;

&lt;p&gt;希望我折腾的东西对你有些许帮助，我也心满意足了。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>你说我是错的，那你最好证明你是对的</title>
            <link>http://blog.coderzh.com/2015/08/08/IDonnotCare/</link>
            <pubDate>Sat, 08 Aug 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/08/08/IDonnotCare/</guid>
            <description>&lt;p&gt;&amp;ldquo;你说我是错的，那你最好证明你是对的&amp;rdquo; &amp;ndash; Michael Jackson&lt;/p&gt;

&lt;p&gt;这句话曾经出现在微信的启动封面上，后来被换下了。但在QQ邮箱的登录界面，还一直使用了这句MJ的名言：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/mj.png&#34; alt=&#34;mj&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这句话的逻辑成立吗？“你说我是错的，那你最好证明你是对的”，显然不成立！&lt;/p&gt;

&lt;p&gt;因为即便你证明了你是对的，但也说明不了问题，可能我也是对的。咱俩都对。&lt;/p&gt;

&lt;p&gt;当然，也有另外一个理解。你说我是错的，那你最好证明“我是错的”是对的。显然你证明不了我是错的。&lt;/p&gt;

&lt;p&gt;总之，你证明不了我是错的，也证明不了你是对的，即使证明了你是对的，也证明不了我是错的。（是不是很绕啊）&lt;/p&gt;

&lt;p&gt;为什么要说的这么绕呢？本质原因是，我也证明不了我是对的。&lt;/p&gt;

&lt;p&gt;这只是一种态度：&lt;strong&gt;你证明不了我是错的，我也证明不了我是对的，也许时间能证明。但我现在就要这样做，你就不要瞎BB了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这一定是内心挣扎过才会想发出的声音，作为QQ邮箱的封面，有什么特殊的含义吗？是一种思想，境界，或是情怀？还是表达了个人的内心情感诉求。&lt;/p&gt;

&lt;p&gt;其实，用户根本不会在意。They don&amp;rsquo;t care.&lt;/p&gt;

&lt;p&gt;最近我在一个程序群里参加了一个讨论，内容很俗套，老生常谈并无新意，但最后给了我一些反思。&lt;/p&gt;

&lt;p&gt;讨论的内容是敲代码还是IDE好用，VIM什么的没什么卵用。&lt;/p&gt;

&lt;p&gt;我看讨论比较激烈，也掺和了一脚：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CoderZh: 我在VS里也用vim模式啊。
Z：vs本身的快捷键就很高效啊。
CoderZh：dd o dw gg G等等，还是vim敲的快
Z：又不是打字员，脑子跟不上手。
CoderZh：不想一直换鼠标和按左右键而已。
X：F以前说，敲代码的时间只占整个开发的时间的比例很少吧，所以敲快敲慢意义不大。
Z：是啊，这种氛围本身就有埋头拉车的倾向。
L：敲得快不碍事啊
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;讨论到这里，除了被扣一个埋头拉车的帽子，好像还算正常。接下来继续：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CoderZh：你想到什么能很快敲出来，而不用浪费时间而已。
Z：你把QQ关了，不知道可以节省多少时间。
L：敲得快跟节省时间没关系，性子比较急的话，就喜欢快点敲罗
Z：性急的人不太适合当程序员。
L：呵呵
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，又被扣了一个不适合当程序员的帽子。L君用呵呵回应，我却有点忍不了，觉得这还有什么好讨论的，Z一直给别人扣帽子，显得自己很有主见。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CoderZh：好了，各有所好，没什么讨论的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;讨论很不愉快的结束了，导致以后我也不想参与类似的讨论了。其实，上面逻辑很容易理顺：&lt;strong&gt;把QQ关了敲代码，可以节省很多时间。在认真敲代码的时间里，使用VIM可以做到更高效。&lt;/strong&gt; 仅此而已，而正因为对方对VIM有偏见，自己又不用，就要大肆抨击别人。我本也可以回复一个呵呵一走了之的，但还是没忍住有了一点情绪。&lt;/p&gt;

&lt;p&gt;后来想想，其实每个人站在自己的角度，说的话都是有道理的。如果你站在他一样的角度，其实也说的通的。&lt;/p&gt;

&lt;p&gt;我想到《创业维艰》里的几个小故事：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在公司陷入窘境的时候，Ben（作者名）决定孤注一掷开展“氧化物”计划。很快，两个毕业于斯坦福商学院的高材生员工专程来见Ben，用一大堆幻灯片详细说明为什么“氧化物”计划只是一个空想，注定要失败。在45张幻灯片全部展示完后，Ben立即转入了战斗状态：是我让你们放这些幻灯片的吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从员工的角度，仔细的去思考“氧化物”计划的利弊，技术层面、公司资源层面、市场层面等等，其实都是对的，无可挑剔。但是，最后Ben还是要坚持那么做。为什么？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;除我以外，没有人清楚公司的发展全局，没有人能令公司摆脱困境。如果我任凭那些根本不了解具体情况的人对公司的发展大计指手画脚，那我就无药可救了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的，你说的有道理，但是我统统不在乎。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You are right, but I don&amp;rsquo;t care!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ben在公司又一次陷入绝境的时候，为了搞定一个大客户，决定要收购一家叫Tangram的公司。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大家一致认为，收购Tangram公司是个糟糕的点子：技术上很难兼容，而且价值不大，地理位置也不理想，成立时间较久，技术也很老旧。财务团队认为，这项收购肯定会赔钱。听完这些意见，我告诉大家，他们所说的这些反对理由我并不在乎，我们一定要收购Tangram公司。团队成员似乎非常震惊，但并没有和我争辩。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;You are right, but I don&amp;rsquo;t care!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最后Ben成功的通过收购取悦了大客户，公司得以生存。&lt;/p&gt;

&lt;p&gt;在Ben引进天才销售主管克兰尼时，也遇到了麻烦。董事会对克兰尼的印象依然不好：长相和声音都不适合当一名销售主管，毕业学校名不见经传，令董事会不舒服。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;认真听完董事会马克的抱怨之后，Ben回答说：”你说的每一条，我都同意。但是，克兰尼是一个销售专家，他的销售管理水平远远超过我所认识的每一个人。如果他身上没有你说的这些毛病，他也不会愿意加入我们这样的公司，说不定他会成为IBM的CEO呢！“  马克很快说：”明白了，就他了！“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;You are totally right, but I don&amp;rsquo;t care!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也许，下次再有类似争执的时候，我不会说：你说我是错的，那你最好证明你是对的。&lt;/p&gt;

&lt;p&gt;我会告诉他：You are right, but I don&amp;rsquo;t care.&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>小记：网易游戏学院第二届公开日</title>
            <link>http://blog.coderzh.com/2015/06/28/163GameOpenDay/</link>
            <pubDate>Sun, 28 Jun 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/06/28/163GameOpenDay/</guid>
            <description>

&lt;p&gt;昨天参加了网易游戏学院的公开日《技术进步引发的灵感革命》，干货十足，期间做了一些笔记，分享一下。&lt;/p&gt;

&lt;p&gt;在广州好几年了，也是第一次到科韵路信息港，下午去的早了些就在周围逛了逛，熟悉了一下地形和周边的小吃（主要是没吃午饭，到处找吃，只找到一家全家）。太热了又逛的差不多了，就来到了网易大厦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/163company.jpg-w&#34; alt=&#34;163company&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我去的太早，还担心里面没人。进去之后，发现好多漂亮的礼仪小姐早已经在迎接嘉宾了（可惜没拍照）。进入会场，大屏幕，电影院的感觉，找了个好位置开始看网易的宣传片。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/163show.jpg-w&#34; alt=&#34;163show&#34; /&gt;&lt;/p&gt;

&lt;p&gt;演讲开始~&lt;/p&gt;

&lt;h3 id=&#34;1-自研引擎力作-乱斗西游-开发经验:3588ff76d10bf10d678f4491e7de2978&#34;&gt;1.自研引擎力作《乱斗西游》开发经验&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;《乱斗西游》是一款完美融合MOBA和ARPG玩法的革命性3D动作手游，上市以来表现优异，多次获得苹果官方推荐并入选“App Store 2014年度精选”。作为网易第一款3D手游，在自研引擎NeoX上如何做多线程渲染方案？采用了哪些跨平台/渲染/网络同步/存储方案？如何为跨服设计服务器架构？诸多难题，本次由该项目主程陈伊力为您一一详解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PPT： &lt;a href=&#34;http://www.youxituoluo.com/78062.html&#34;&gt;http://www.youxituoluo.com/78062.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意NeoX的发音，没错，就是牛X引擎，名字够牛。乱斗西游在立项初期，在游戏引擎选择上面也考虑了诸多，比如商业的Unity, Unreal等，也包括网易自研的引擎，最后，他们选择了自研的牛X引擎。服务端架构方面使用了MobileServer多服架构（主要语言Python，没有过多介绍）。数据库使用mongodb，目前乱斗西游4台服务器可支持10万玩家。&lt;/p&gt;

&lt;p&gt;在提供客户端效率方面，采用了多线程渲染。将逻辑线程和渲染线程分离。线程消息队列使用了无锁的RingBuffer和Double Buffer（双缓存交换队列）。通过Profile分析瓶颈，性能得到不断优化。&lt;/p&gt;

&lt;p&gt;同步技术的迭代，这也是我比较关心的内容。在项目初期，考虑到当时的手机网络环境，乱斗西游只考虑了异步对战（即不是很真实的玩家实时对战，对战的只是带有一份玩家数据的机器人）。但是，他们非常的清楚，异步对战不是未来，同期也越来越多游戏加入了同步对战。所以，在同步对战方面，乱斗西游采取了分步骤迭代的方式，不久后推出了WIFI对战功能，即在同一WIFI网络下实现的同步对战功能。实现的方式是主客机的方式，即其中一台机器做主机，另外一台机器做客机，只在WIFI网络内传输数据。再后来，为了跨服跨网络的同步对战，使用了Router服的方式来实现。即玩家连接到Router服，Router服只负责转发。这几种同步对战方式我之前都考虑过，在上家公司做服务端主程时都给出过具体的方案。我也清楚的知道，这也都不是未来，这些方案主要特点是简单，能够快速开发并上线，未来一定是基于服务端计算的真实同步PVP。目前， 乱斗西游正在实现真实同步PVP。&lt;/p&gt;

&lt;p&gt;在同步的实现和优化方面，乱斗西游采取了客户端先行，服务端矫正的方式。比如客户端的移动先行，在位置出现偏差时，采取一种比较温和的方式进行矫正。比如，在角色被强制位移时进行矫正，位移速度根据误差进行缩放等等。&lt;/p&gt;

&lt;p&gt;同步的实现方式，一种是像War3星际的帧同步（帧锁定）方式。这种方式要求严格控帧，服务端和客户端必须步调一致，断线重连比较复杂，落后需要补帧。由于MoibleServer中Python大量使用了dictionary，遍历的时候是无序，使用帧同步方式很难保证每次遍历的顺序都是一致的，再加上其他很多原因，乱斗西游未采取帧同步的方式。&lt;/p&gt;

&lt;p&gt;另外一种同步实现的方式，就是LOL、Dota2等的实现方式，状态同步，服务端承载了所有运算，客户端只负责发出指令和显示。目前乱斗西游采取的是这种方式。&lt;/p&gt;

&lt;p&gt;在同步战斗的网络协议方面，乱斗西游采取了UDP的方式。原因是TCP的滑动窗口流量控制机制太不可控，采用UDP的方式可以做到更加高效，对丢包的处理更加可控。&lt;/p&gt;

&lt;p&gt;优化方面，使用Neon指令集（ARM Cortex™-A 系列处理器的 128 位 SIMD单指令多数据架构扩展）。&lt;/p&gt;

&lt;p&gt;Python常量使用优化（Python并没有提供常量支持，实际使用时会被当做字典的项来进行查找，影响效率，所以上线前将常量自动替换为实际的数值提供效率）。&lt;/p&gt;

&lt;p&gt;为了防止脚本被破解，通过修改脚本虚拟机，将OpCode（字节码）打乱。&lt;/p&gt;

&lt;h3 id=&#34;2-无尽战区-渲染方案迭代分享:3588ff76d10bf10d678f4491e7de2978&#34;&gt;2.《无尽战区》渲染方案迭代分享&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;作为网易首款TPS视角MOBA游戏，《无尽战区》不仅在玩法上做出了突破，同时在画面效果和品质上也在不断探索和迭代：日式动漫还是美式卡通？虚幻还是真实？在从无到有的紧张开发期中如何打破层层迷障，创造出有自己特色的渲染方案？本次Inception工作室的李冰将为大家分享，在《无尽战区》画面效果迭代中积累的点点滴滴。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;天下引擎，需求：重视手感，响应迅速。风格参考了Team Fortness2。分享了卡通角色渲染方案的迭代过程，最后的渲染效果的确很赞。&lt;/p&gt;

&lt;h3 id=&#34;3-全局光照利器cloudgi技术全解析:3588ff76d10bf10d678f4491e7de2978&#34;&gt;3.全局光照利器CloudGI技术全解析&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;CloudGI是一款网易自研的烘培器，它可以在数秒钟内计算完软影、AO、间接光照、体光源等全局光照效果（一台机器），已经为网易内部数十款游戏提供烘培服务。本次由CloudGI的开发者李文耀，为大家介绍如何利用GPU把烘培时间减少到几秒的级别，包括烘培基本算法、烘培直接光照、烘培间接光照三个部分。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很牛逼，能把耗时的烘焙时间减小到10秒，不过只能针对网易自研的引擎烘焙优化。&lt;/p&gt;

&lt;h3 id=&#34;4-次世代无缝大世界-天谕-自研引擎分享:3588ff76d10bf10d678f4491e7de2978&#34;&gt;4.次世代无缝大世界 ——《天谕》自研引擎分享&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;次世代的画面表现对资源的需求量是巨大的，如何在符合国内玩家软硬件水准的情况下，驱动一个巨大的无缝游戏世界？《天谕》的自研引擎通过严格的Budget系统和细致的Streaming/LOD/Proxy等技术，将大世界渲染中所需的资源降低了1-2个数量级。其中的技术细节和心得体会，会在此逐一道来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PPT: &lt;a href=&#34;http://www.youxituoluo.com/78063.html&#34;&gt;http://www.youxituoluo.com/78063.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;天谕的大世界有150平方公里，比魔兽世界的卡利姆多大陆还大（100平方公里）。一同随去的天鸿同学直呼《天谕》引擎的伟大。要求美术所有贴图都有一张替代贴图，场景任意时刻和位置面数不能超过50万面。运用科学的方法，通过机器人跑遍整个场景进行离线分析和LOD优化。通过Proxy技术将场景切分为一个个立方体，对立方体内的模型物件进行整体的LOD优化。在保证了帧数流畅的前提下， 也保证了画面的精致。&lt;/p&gt;

&lt;h3 id=&#34;5-百万在线的基石-梦幻手游服务器架构:3588ff76d10bf10d678f4491e7de2978&#34;&gt;5.百万在线的基石 ——梦幻手游服务器架构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;说到手游中的重度游戏MMO，如何提供一个稳定高效的手游MMO服务器引擎？梦幻西游手游如何做到万人同时在线？手游和端游在MMO上有何不同？AOI如何实现？通过什么样的开发流程就可以保证在产品上线时稳定，不会出现大面积DOWN机的情况？ 一整套解决方案，你值得拥有。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PPT: &lt;a href=&#34;http://www.youxituoluo.com/78130.html&#34;&gt;http://www.youxituoluo.com/78130.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;梦幻手游服务端架构来自端游的服务器架构，支持单服2.2W人，最高在线达到200W人。服务端架构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/163server.jpg-w&#34; alt=&#34;163server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于是沿用端游的架构吧，这是一种早期比较常见的服务端架构。Server采用单进程多线程的方式，同时保证写逻辑代码时只在单一线程，不需要考虑多线程问题。AOI（Area Of Interest）的实现主要有两种：格子和十字链表。梦幻手游采用的是九宫格的格子算法。（AOI算法主要解决NPC和玩家位置同步，AI事件触发的算法问题，可以这样理解，最简单直接的算法，是遍历整个场景的NPC或玩家，将位置信息同步给玩家。显然这样的效率是很低的，因为离你很远的玩家的位置其实是不需要的。） 数据存储使用udb，nosql，binlog。AI使用行为树，将AI的设定全部交给了策划同学。&lt;/p&gt;

&lt;p&gt;使用valgrind追踪内存泄露问题，统计脚本虚拟机object数量分析瓶颈。IO操作全部异步化。项目管理采用不强制的CodeReview，有自动化的协议测试Case，分析CodeCoverage，使用代码静态分析工具。&lt;/p&gt;

&lt;h3 id=&#34;小结:3588ff76d10bf10d678f4491e7de2978&#34;&gt;小结&lt;/h3&gt;

&lt;p&gt;公开日组织的不错，演讲嘉宾的内容也干货十足。中间和最后有抽奖环节，可惜没中。。在游戏自研领域，网易体现了其强大的研发实力。总的来说，受益匪浅，不虚此行。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>强制链接静态库所有符号(包括未被使用的)</title>
            <link>http://blog.coderzh.com/2015/06/14/LinkAllSymbols/</link>
            <pubDate>Sun, 14 Jun 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/06/14/LinkAllSymbols/</guid>
            <description>

&lt;p&gt;C++程序在链接一个静态库时，如果该静态库里的某些方法没有任何地方调用到，最终这些没有被调用到的方法或变量将会被丢弃掉，不会被链接到目标程序中。这样做大大减小生成二进制文件的体积。但是，某些时候，即使静态库里的某些方法没有任何地方使用到，我们也希望将这些没有使用到的代码编译进最终的二进制文件中。&lt;/p&gt;

&lt;p&gt;为什么会有这样的需求？的确，存在这种需求的是少数情况，但是一旦你遇到下面的需求，就变得必须了。比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;动态插件机制。代码中没有直接调用某方法，但是希望能在运行时动态加载执行某方法。&lt;/li&gt;
&lt;li&gt;执行代码覆盖率统计。需要统计静态库所有代码的覆盖情况，而不只是被使用到的代码覆盖情况。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果是gcc编译，比较好办，只需要加上&lt;strong&gt;&amp;ndash;whole-archive&lt;/strong&gt;链接选项。但是在Windows平台，微软的编译器没有这样的选项，一个最接近的选项是&lt;strong&gt;/OPT:NOREF&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;文档见：&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bxwfs976.aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/bxwfs976.aspx&lt;/a&gt;
说明：/OPT:REF eliminates functions and data that are never referenced; /OPT:NOREF keeps functions and data that are never referenced.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;/OPT:NOREF在Debug下是默认打开的，而且只能强制保留本工程未被使用到的函数和变量。对于引用的静态库的未被使用的函数和变量是不生效的。甚至有人认为这是微软的BUG在这个帖子里热烈讨论过：&lt;a href=&#34;https://social.msdn.microsoft.com/Forums/vstudio/en-US/2aa2e1b7-6677-4986-99cc-62f463c94ef3/linkexe-bug-optnoref-option-doesnt-work?forum=vclanguage&#34;&gt;LINK.EXE BUG: /OPT:NOREF option doesn&amp;rsquo;t work!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;遇到同样问题的可不止我一个人，比如StackOverFlow里就有人问：&lt;a href=&#34;http://stackoverflow.com/questions/3867254/what-is-the-visual-studio-equivalent-to-gnu-ld-option-whole-archive&#34;&gt;What is the Visual studio equivalent to GNU ld option &amp;ndash;whole-archive&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有人建议他用/INCLUDE 选项强制链接未使用的符号，也有人说使用/OPT:NOREF（显然不行）。&lt;/p&gt;

&lt;p&gt;使用/INCLUDE 指定某个符号强制链接是可以的。但是，假如静态库中有成百上千个符号需要强制/INCLUDE，怎么办？&lt;/p&gt;

&lt;p&gt;所以，最好的方法，也是上面讨论/OPT:NOREF BUG的帖子里有人提到的方法，就是在代码中使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma comment(linker, &amp;quot;/include:?emptyreference@Noisy@@QAEXXZ&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的方法，可以让链接器强制include一个符号，include:后面的是符号名称。如果要强制include静态库中所有符号，需要把静态库中的所有符号找出来，然后通过上面的方法强制include。&lt;/p&gt;

&lt;p&gt;人手工找出所有Symbols，然后添加上面的代码是不太靠谱的。一方面Symbols的格式可读性太差不好维护，另一方面假如静态库符号信息修改了，这个维护代价就更大了。所以，必须让这个过程自动完成。&lt;/p&gt;

&lt;p&gt;查看静态库所有符号列表，Linux里可以使用&lt;a href=&#34;https://sourceware.org/binutils/docs/binutils/nm.html&#34;&gt;nm&lt;/a&gt; ，Windows平台可以使用&lt;a href=&#34;https://support.microsoft.com/en-us/kb/177429&#34;&gt;dumpbin&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;执行dumbin.exe需要注意，必须在Visual Studio的开发命令行环境才能执行。不过有个小技巧可以让你不必在Developer Command Prompt执行，就是假如是VS2013环境，建一个批处理，在开头加上：
&lt;code&gt;
@echo off
if defined VS120COMNTOOLS (
    call &amp;quot;%VS120COMNTOOLS%\vsvars32.bat&amp;quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们使用dumpbin /LINKERMEMBER xxx.lib，可以列出所有的符号名字，比如查看静态库MyLib.lib所有符号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d:\Code\Cpp\LinkAllSymbols\Debug&amp;gt;dumpbin.exe /linkermember:1 MyLib.lib
Microsoft (R) COFF/PE Dumper Version 12.00.30501.0
Copyright (C) Microsoft Corporation.  All rights reserved.
 
 
Dump of file MyLib.lib
 
File Type: LIBRARY
 
Archive member name at 8: /
557D4C17 time/date Sun Jun 14 17:40:39 2015
         uid
         gid
       0 mode
      ED size
correct header end
 
    9 public symbols
 
      328 ??4Turtle@@QAEAAV0@ABV0@@Z
      328 ??_C@_0M@KEAKLOKJ@Turtle?5run?4?$AA@
      328 ?Download@@YAHXZ
      328 ?Run@Turtle@@QAEXXZ
     19CE ?FishRun@@YAXXZ
     19CE ?Run@Fish@@QAEXXZ
     2D16 ??_C@_08EMEDHABH@Dog?5run?4?$AA@
     2D16 ?Foo@@YAHXZ
     2D16 ?Run@Dog@@QAEXXZ
 
  Summary
 
        28B4 .debug$S
          F0 .debug$T
         102 .drectve
          15 .rdata
           C .rtc$IMZ
           C .rtc$TMZ
         15A .text$mn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此，只需要执行dumpbin，并且在输出结果中抽取出所有的符号名称，然后自动生成#pragma comment(linker, &amp;ldquo;/include:xxx&amp;rdquo;)代码即可。&lt;/p&gt;

&lt;p&gt;于是，我写了一个Python脚本，执行dumpbin，然后通过正则表达式拿到所有符号名称，自动生成强制include了所有符号的头文件。关键代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re
 
regex = re.compile(r&amp;quot;\s+.*\s([\?_]+.*)&amp;quot;)
 
exclude = []
 
def gen_header_file_for_lib(lib_path, header_path):
    cmd = [&#39;dumpbin.exe&#39;,&#39;/linkermember:1&#39;, lib_path]
    lines = execute_command(cmd)
    symbols = find_matches(lines, regex, exclude)
 
    with open(header_path, &#39;w&#39;) as f:
        header_guard = &amp;quot;LINK_ALL_SYMBOLS_H_&amp;quot;
        f.write(&amp;quot;#ifndef &amp;quot; + header_guard + &#39;\n&#39;)
        f.write(&amp;quot;#define &amp;quot; + header_guard + &#39;\n&#39;)
        f.write(&amp;quot;// Generated by GenLinkerSymbols.py. Do not modify! \n\n&amp;quot;)
 
        for symbol in symbols:
            pragma_line = &#39;#pragma comment(linker, &amp;quot;/include:&#39; + symbol + &#39;&amp;quot;)&#39;
            f.write(pragma_line + &#39;\n&#39;)
        f.write(&amp;quot;\n#endif // &amp;quot; + header_guard + &#39;\n&#39;)
 
    print(&amp;quot;Link symbols count: %s&amp;quot; % len(symbols))
 
def find_matches(lines, regex, exclude_list):
    def match(line):
        m = regex.match(line)
        if m:
            return m.group(1).split()[0]
        return None
 
    def exclude_filter(line):
        if not line:
            return False
 
        for exclude in exclude_list:
            if line.find(exclude) &amp;gt;= 0:
                return False
        return True
 
    matches = filter(exclude_filter, map(match, lines))
    return list(set(matches))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结合Visual Studio工程配置里的Post-Build Event，就可以在编译静态库之后自动更新头文件了。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python ..\GenSymbolsHeader.py $(OutDir)$(TargetName)$(TargetExt) ..\Include\LinkAllSymbols.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在使用该静态库的工程代码中，只需要#include &amp;ldquo;LinkAllSymbols.h&amp;rdquo; 就可以了。&lt;/p&gt;

&lt;h3 id=&#34;对比:179e17d63a7cb0a81de7975037280b66&#34;&gt;对比&lt;/h3&gt;

&lt;p&gt;使用OpenCppCoverage进行代码覆盖率测试，对比如下：&lt;/p&gt;

&lt;p&gt;正常情况下，不强制在linker时include静态库所有符号时，代码覆盖率结果为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/noinclude.png-w&#34; alt=&#34;noinclude&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过上面的方法，自动生成LinkAllSymbols.h并#include &amp;ldquo;LinkAllSymbols.h&amp;rdquo;，覆盖率结果为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/included.png-w&#34; alt=&#34;included&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;github:179e17d63a7cb0a81de7975037280b66&#34;&gt;github&lt;/h3&gt;

&lt;p&gt;所有代码见：&lt;a href=&#34;https://github.com/coderzh/LinkAllSymbols&#34;&gt;https://github.com/coderzh/LinkAllSymbols&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>开启Github之旅</title>
            <link>http://blog.coderzh.com/2015/06/13/StartGithub/</link>
            <pubDate>Sat, 13 Jun 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/06/13/StartGithub/</guid>
            <description>

&lt;p&gt;在那个远古时代，我以为可以用GoogleCode干点事，结果啥也没干好。如今，Github已经成为了业界标杆，就连Google、微软、Facebook的开源项目都往Github搬。Github作为全球最大的同性交友网站，假如你在上面有几个加星数不错的Project，一定会为你的简历增色不少。&lt;/p&gt;

&lt;h3 id=&#34;远古时期的我:f7ad1288d288dad02bdbde7763a601e9&#34;&gt;远古时期的我&lt;/h3&gt;

&lt;p&gt;在那个远古时代，我还用着Google Code尝试着做一些开源代码。比如这个：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/NancyWikiLogo.png&#34; alt=&#34;NancyWikiLogo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个用Python实现的基于GAE写的一个Wiki系统，现在看看界面截图，简洁美观大方，还是很不错的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/nancywiki.jpg&#34; alt=&#34;NancyWiki&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然而新鲜一阵之后我再也没有使用过这个系统，而且再也没有维护过。甚至有个用户给我提了个Issue也被我忽略掉了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/NancyWikiIssues.png&#34; alt=&#34;NancyWikiIssue&#34; /&gt;&lt;/p&gt;

&lt;p&gt;时隔几年了，我自己的NancyWiki的网站已经各种链接失效无法使用了。让我吃惊的是，给我提Issue的同学用NancyWiki建的Wiki网站还能正常访问 &lt;a href=&#34;http://mayxwiki.appspot.com/&#34;&gt;http://mayxwiki.appspot.com/&lt;/a&gt;， 不过看他也早已经没有再更新过内容了。&lt;/p&gt;

&lt;p&gt;同样的待遇的，还有以下几个项目：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NancyBlog：Python实现的基于Google App Engine的开源博客系统 &lt;a href=&#34;https://code.google.com/p/nancyblog/&#34;&gt;https://code.google.com/p/nancyblog/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NancyGLines：Python实现的基于PyGame开发的GLines游戏。类似Ubuntu里的GLines游戏。&lt;a href=&#34;https://code.google.com/p/nancyglines/&#34;&gt;https://code.google.com/p/nancyglines/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyGrid：PyQT实现的一个财务表格统计小软件。&lt;a href=&#34;https://code.google.com/p/pygrid/&#34;&gt;https://code.google.com/p/pygrid/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PySpy++：Python实现的Spy++工具。&lt;a href=&#34;https://code.google.com/p/pyspyplusplus/&#34;&gt;https://code.google.com/p/pyspyplusplus/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前为止各项目下载情况（有的只提供了SVN代码所以没统计到）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/GoogleCodeDownload.png&#34; alt=&#34;GoogleCodeDownload&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2010年后，我就再也没有更新和维护过它们，甚至忘记了它们的存在！我不是一个合格的代码开源作者，我只是把东西做出来，往上一丢，然后就忘记了这件事。。。（囧）下载过我的代码或者使用过我的项目的人估计会失望吧。。。我这作者也太不靠谱了吧。。。&lt;/p&gt;

&lt;p&gt;好了，自我反省结束了。经过这几年的厮杀，这个不存在的网站也宣告向Github投降了，GoogleCode马上就要关闭了，并提供一键迁移到GitHub的功能。Google App Engine也一直没有起来，甚至已经没落了。所以之前的GAE项目理论上也没人用了，我也不再打算维护了（说的好像维护过一样）。不过为了做个纪念，我都已经迁移到了我的GitHub中。&lt;/p&gt;

&lt;h3 id=&#34;开启github:f7ad1288d288dad02bdbde7763a601e9&#34;&gt;开启Github&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/octocat_collabocats.png&#34; alt=&#34;github&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我的主页：&lt;a href=&#34;https://github.com/coderzh&#34;&gt;https://github.com/coderzh&lt;/a&gt;    (我才发现我2010年就注册了这个全球最大的同性交友网站)&lt;/p&gt;

&lt;p&gt;现在的我，打算认认真真的开始做个真正的开源项目。想做好一个开源项目实属不易，一方面需要自己大量的技术积累（能让自己保持持续学习），另一方面很多东西都需要给自己提出更高的要求。比如，代码结构需要尽可能清晰简洁，每一行代码都暴露给别人，排版，命名都要尽量做到最好，项目文档需要清晰完整并保持更新。需要保持活跃，积极的处理用户提的Issue，最好能吸引到更多小伙伴Fork你的代码，不断的给你提Pull Request。&lt;/p&gt;

&lt;p&gt;所以，我打算从一个简单的开源项目做起，由于够简单，所以我可以尽量去做到尽善尽美。以一个简单项目为开端，为以后做一些更大的更好玩的项目做些准备。&lt;/p&gt;

&lt;p&gt;项目虽简单，但很实用，具体介绍敬请阅读下一篇博文。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>最近的一些变化</title>
            <link>http://blog.coderzh.com/2015/05/11/NewChange/</link>
            <pubDate>Mon, 11 May 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/05/11/NewChange/</guid>
            <description>&lt;p&gt;有关注我博客的朋友也许会发现，从3月份开始，我的博客又活跃了起来，平均每周会有一篇，而且，我也开通了微信公众号：一个程序员的思考。为什么会有这个变化呢？因为，我换工作了。工作内容有了很大的变化，平时的生活娱乐方式也有了一定的变化。&lt;/p&gt;

&lt;p&gt;首先，工作方面，我离开了创业4年的游戏公司。有很多人都不理解，作为手游服务端主程，为什么选择在几个月后游戏即将上线前离开。在面试腾讯的过程中，几乎每个面试官都问了同样的问题。在我内心中，也在不断的问自己。最后总结为一个词，就是累觉不爱了。&lt;/p&gt;

&lt;p&gt;曾经我们有很多优秀的同事，但是在产品大方向上，我们犯了一个又一个错误，导致人才逐渐流失。游戏定位和核心玩法上，我们经常摇摆不定，不断的推翻重来，上线时间一再推迟。这几年网游发展飞速，手游崛起，我们坚持了3年多3D端游，最后却不得不放弃，公司错过了手游转型的最好时机。现在市面上的游戏大多是跟风之作，我们也不例外。我们几乎有段时间，市面上火了一个游戏，我们就抄一个游戏，最后导致大量的推翻重做，改来改去，浪费了大量的工时。推了几次封闭测试，数据也不理想。&lt;/p&gt;

&lt;p&gt;在程序开发上面，我们也犯了不少错误。我们过于追求完美。我们曾经为了一个宏的名称及定义讨论了不下10次，我们不止一次的因为某处的设计不合理而进行大量重构。重构的结果是花费了大量的时间，最后发现我们对原来的代码的理解也不够，不断的引出了新的BUG，然后我们又花费大量的时间去解决新的BUG。这样做的好处是程序锻炼了技术，对代码结构和流程了解的更透彻，设计的更合理，未来引入的BUG将会大大减少。但是，我们付出了大量的时间，而策划需求又经常变化， 经常这样伤筋动骨的改代码，效率实在不高。从程序和未来的角度去长远考虑，这样做是没有问题的，但是从创业项目，第一个版本还未推出的情况下，是不合时宜的。随着时间的推移，我的这种感觉越来越强烈。我以前也是追求完美的程序员，但我越来越感觉到，在项目时间紧迫的创业前期，我必须接受不完美。没有能上线的产品，代码设计的再完美也是白搭。&lt;/p&gt;

&lt;p&gt;还有其他一些原因，我就不细说了。现在还有兄弟们在奋斗着，希望他们越来越好吧。&lt;/p&gt;

&lt;p&gt;新的工作，是微信的测试开发。测试开发是一个极具挑战的工作，它对于我来说，具有以下几个意义：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;更全面的技术学习。能学习到从客户端到后台，以及运营的全面的细节。（如果是开发的话，一般只专注于其中一小部分的开发）&lt;/li&gt;
&lt;li&gt;测试开发的大部分需求是自己提出来的，我们十分清楚自己要做什么，不要做什么，避免被折腾。（不再受制于产品人员或者类似游戏的策划）&lt;/li&gt;
&lt;li&gt;可以大胆尝试新语言新技术新框架，可以大胆放心重构，提升技术。（上线产品的开发总是用着老旧版本的库不敢升级，新的技术推广使用周期也很漫长）&lt;/li&gt;
&lt;li&gt;测试开发的主要目的是通过技术手段保证产品质量，提高开发和测试的效率，有挑战并且很有意义。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;生活娱乐方面，近期我也有了不少变化。我现在已经不怎么玩游戏了，唯一玩一玩的是类似纪念碑谷这样的轻型精品游戏。之前的几年时间里，游戏占据了我大量的时间，除了开发游戏，业余的时间也几乎都花在玩游戏上。都说玩物丧志，一点没错。当然，如果你的职业和志向就是游戏，是没有问题的。但是，很多人玩游戏，还是和我一样，因为没有找到更有意义的事情去做。而玩游戏是最容易最直接最快得到刺激的方式。强制说不再玩游戏是没有意义的，如果你真的找到了有意义的事情，同样有限的时间内，我相信你不会把时间用在玩游戏上。如果你没有感觉到时间不够用时，你多半正在虚度光阴。&lt;/p&gt;

&lt;p&gt;业余的时间，我开始花更多的时间去阅读。阅读不是看知乎、微博、博客，而是完完整整的去看一本书。知乎博客的东西是很碎片化的，只有看书，才能对一个事物有系统的了解。从书里，你才能真正完整的了解作者的思想。最近看过以及正在看的书有：《黑客与画家》、《马化腾的腾讯帝国》、《从0到1》、《程序员的思维训练》、《成大事者不纠结》、《从零开始学炒股》、《编写高质量代码 改善Python程序的91个建议》、《C++ Concurrency in Action》、《Game Coding Complete》、《笑傲江湖》、《失控》、《解忧杂货店》&lt;/p&gt;

&lt;p&gt;除了阅读，就是写作，把看书的笔记、平时工作学习的总结、生活的感悟通过文字重新组织表达出来，在我的博客和微信公众号里同时发布。我的微信公众号也才开通不久，希望大家多多支持。扫描下面的二维码或者直接关注：hacker-thinking （一个程序员的思考）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/qrcode.jpg&#34; alt=&#34;hacker-thinking&#34; /&gt;&lt;/p&gt;

&lt;p&gt;另外，希望我能把跑步坚持下来，加油吧。&lt;/p&gt;

&lt;p&gt;就是这么多了，未来是什么我不知道，我知道的是做好当前。引用曾国藩的话，就是：未来不迎，当时不杂，过往不恋。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>新的开始，新的挑战</title>
            <link>http://blog.coderzh.com/2015/03/15/NewStart/</link>
            <pubDate>Sun, 15 Mar 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/03/15/NewStart/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/NewStart.jpg-w&#34; alt=&#34;NewStart&#34; /&gt;&lt;/p&gt;

&lt;p&gt;人的选择，有时候看上去是有规律或刻意的，有时候又像是自然而然的。既然选择了远方，就要鼓足勇气去面对挑战。&lt;/p&gt;

&lt;p&gt;2007年，我学习了四年的土木工程之后，加入了金山软件做了一名程序员。&lt;/p&gt;

&lt;p&gt;2011年，我钻研了四年的测试开发之后，加入了创业公司做了一名游戏开发程序员。&lt;/p&gt;

&lt;p&gt;2015年，我摸索了四年的游戏开发之后，加入了一家汇集了众多优秀程序员的大型互联网公司。&lt;/p&gt;

&lt;p&gt;不断的推翻自己过去的积累沉淀，放弃自己熟悉的领域，放弃让自己安逸的环境，换个领域，从头开始，迎接全新的挑战。&lt;/p&gt;

&lt;p&gt;自然界有两个神奇的数字，一个是自然数e，一个圆周率PI。昨天是3月14日，称之π日。本想在π日入职新公司的，无奈刚好周六，所以，就在3月13日入职了。&lt;/p&gt;

&lt;p&gt;第一天，签合同，装电脑，开账号，了解规章制度，新人介绍，一切都按部就班。直到下午参加了一个单元测试的讨论会议，接着给我介绍公司的开发流程，产品架构，我的工作任务，我才意识到，我来到了一个和以前完全不同的工作环境，这里的人有着完全不同的工作习惯和思维方式。&lt;/p&gt;

&lt;p&gt;我甚至开始问自己，我为什么要来到这里？上一份工作中，公司的技术方向甚至产品的设计，我都可以起到主导作用。对代码的每一个细节，我都可以做到了如指掌。周末完全不用去想下周一的事情，到了周一，可以轻松倒上一杯热水，刷刷知乎，刷刷微博，然后回想一下上周做到哪了，这周都做些什么，到了休息时间打一把LOL。每天工作的内容是开发游戏，改BUG，讨论的话题是游戏的玩法，业余的时间是大家一起玩游戏，其乐融融。&lt;/p&gt;

&lt;p&gt;但是，在一个让自己熟悉舒适的环境呆久了，有时候会渐渐磨灭自己的斗志，甚至每日周而复始，感觉有些虚度光阴。就像有人说的，应该多去陌生的地方旅行，到了一个全新的地方，问路、探索、欣赏到更美的风景或是面临恐惧和无助，这时，你的感官才会全面的调动起来。&lt;/p&gt;

&lt;p&gt;过去的四年，我的博客几乎处于了停滞状态。每日重复的工作让我有些不思进取，业余时间也都消磨在了LOL中。虽然，最近的半年多公司转到了手游领域，一下刺激到了自己的感官，重新把学习的积极性调动了起来。但是，让我明白了，也许，我需要一个更大的改变。&lt;/p&gt;

&lt;p&gt;来到新的环境，这里的人都是陌生的，很多东西都要熟悉和学习，自己的影响力，同事对自己的信任都要重新构建。这是一个有压力的开始，我定会努力适应和进取。希望是一个好的开始。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
