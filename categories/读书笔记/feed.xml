<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>读书笔记 on CoderZh Blog</title>
        <link>http://blog.coderzh.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
        <language>zh-CN</language>
        <author>CoderZh</author>
        <rights>Copyright (c) 2015, CoderZh; all rights reserved.</rights>
        <updated>Sun, 21 Feb 2016 19:05:10 CST</updated>
        
        <item>
            <title>《必然》读书笔记之 - 知化Cognifying</title>
            <link>http://blog.coderzh.com/2016/02/21/inevitable-cognifying/</link>
            <pubDate>Sun, 21 Feb 2016 19:05:10 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2016/02/21/inevitable-cognifying/</guid>
            <description>&lt;p&gt;2002 年左右，KK 参加了谷歌的一个小型聚会，当时谷歌还是一个家专注搜索的小公司。KK 问拉里·佩奇「已经有这么多家搜索公司，干嘛还要做免费网络搜索？」&lt;/p&gt;

&lt;p&gt;佩奇回答说：「哦，我们其实是在做人工智能。」&lt;/p&gt;

&lt;p&gt;「知化」这个词不太好理解，其实主要说的是人工智能，即让机器或物体拥有智能的过程，技术上涉及到神经网络、机器学习、大数据等领域。如果你正在从事相关领域的研究，是很有前途的方向。&lt;/p&gt;

&lt;p&gt;去年公司有次请了个机器学习的专家来讲课，从头到尾我居然没有听懂他在讲什么。。当然，原因主要是在我的。毕竟机器学习这块属于专业的领域，需要有很多专业知识做背书，我之前对这块也了解甚少。&lt;/p&gt;

&lt;p&gt;但我相信机器学习的大致概念其实是很好解释清楚的，即通过设计一些算法，让计算机能够进行自我学习和改进。有人会想，计算机有这么牛逼吗？还会自己学习？其实这正是一个比较容易误解的地方。并非程序员把代码写好，计算机自个儿在哪里跑就把什么都学会了。机器学习其实是需要人为训练的过程，通过人类不断的告诉机器哪些是对的哪些是错的，准备大量训练的数据，机器通过训练来自动修正已有的算法以达到最佳的效果。&lt;/p&gt;

&lt;p&gt;举个栗子，文章开头提到的，谷歌创始人说谷歌其实是在做人工智能。首先，谷歌的搜索引擎有一套基于 Page Rank 的算法，能够根据关键词自动搜索出相关的网页。算法虽然很先进，但毕竟有时会出错，比如最佳的搜索结果并没有排在第一位。但用户是会自己判断哪个搜索结果对自己有用，用户会用脚投票，谷歌通过分析哪个搜索结果的点击率最高，来自动修正搜索引擎的算法，从而找出最合适的结果排在第一位。&lt;/p&gt;

&lt;p&gt;人工智能目前主要应用在比如垃圾邮件检测、数字识别、语音识别、人脸识别、各种智能设备，自动驾驶等领域，人工智能是未来科技发展的「必然」。对于未来的人工智能，除了给人类带来便利之外，人类也表现出了很多担心。在「知乎」里有个著名的讨论「&lt;a href=&#34;https://www.zhihu.com/question/27864852/answer/39007053&#34;&gt;为什么有很多名人让人们警惕人工智能？&lt;/a&gt;」，答案排名第一个的谢熊猫君开头就给出了一个让人震惊的结论：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人工智能很可能导致人类的永生或者灭绝，而这一切很可能在我们的有生之年发生。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;的确是有点危言耸听，而《必然》的作者 KK 显然是人工智能的乐观派，他相信人工智能并不能完全取代人类，而是对人类不擅长的能力的一种补充。计算机的有些能力是人类所不具备的，比如超强记忆容量，超强的计算能力，所以我们发明了硬盘和 CPU 。我们的思维方式不擅长做统计，于是我们制造出各种统计技术很强的智能设备。人类开车比如容易走神分心，于是我们研究制造自动驾驶。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「创造聪明绝顶的人工智能是个错误，因而探究更多智能种类显得更为明智」&lt;/strong&gt; 从这句话看来，KK 这个乐观派也未必是那么的乐观。也许他是对的，开发一个聪明绝顶的全面人工智能的机器人，对于人类来说本身就是个错误，何况技术实现也非常困难。所以，只要人工智能在某一种特定的心智表现出色就好。比如自动驾驶的人工智能只会做好驾驶一件事，预测天气的人工智能只会用来预测天气。&lt;/p&gt;

&lt;p&gt;假设人工智能在各个方面都逐渐取代了人类，那必然会导致大量的职业消失。就像自动化实现后，机器代替了农民以及在农场作业的动物，淘汰了当时大多数人的工作。作为程序员，想到的是以后人工智能可以根据用户的语音需求自动编写代码，大量的程序员将失业。&lt;/p&gt;

&lt;p&gt;机器将取代更多人类工种，一切都是时间问题。KK 甚至放出了这样的话：&lt;/p&gt;

&lt;p&gt;「或许很难令人相信，但在本世纪结束前，如今人们从事的职业中有 70% 很可能会被自动化设备取代。不用说，亲爱的读者，你的工作也会被机器取代。广泛的自动化将会触及包括体力劳动和知识型工作在内的所有工种。」&lt;/p&gt;

&lt;p&gt;「无论你是一名医生、律师、建筑师、记者甚至程序员，机器人都将历史性地接管你的工作。」&lt;/p&gt;

&lt;p&gt;所以，不要再以为你的职业一定可以干一辈子，也不要以为在大公司上班就一定可以工作到退休，也许某天你所从事的这个职业本身就消失了。你的搬砖技术练的再好，已经没有任何公司需要人搬砖了。&lt;/p&gt;

&lt;p&gt;那么，人类做什么？会有更多新的职业产生出来。未来自动驾驶的汽车随处可见，而相应的会衍生出一个新的名为行程优化师的新工作。当外科自动化机器人成为常规后，会出现一种新的专业分析师，为你解读数据。（未来代码都由机器来自动编写，测试，部署上线，服务器坏了有机器人自动维修。我想不出会出现什么新的职业，也许程序员会变成一个更高端的职业，主要设计和优化机器人使用的编程语言，开发用来生成代码的代码。）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「几乎人人都能得到个人机器人，但是仅仅拥有一个机器人并不是成功的关键。成功将青睐那些以最优化的方式与机器人以及机器一同工作的人。」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「人类的工作就是不停地给机器人安排任务，这本身就是一项永远做不完的工作，所以，我们至少还能保留这份『工作』。」&lt;/p&gt;

&lt;p&gt;「将来，无论你现在从事什么工作，收入水平如何，都讲反复经历机器人代替人的以下 7 个步骤：」&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;机器人干不了我的工作。&lt;/li&gt;
&lt;li&gt;好吧，它会许多事情，但是我做的事情它不一定都会。&lt;/li&gt;
&lt;li&gt;好吧，我做的事情它都会，但是它常常出故障，这时需要我来处理。&lt;/li&gt;
&lt;li&gt;好吧，它干常规工作时从不出错，但是我需要训练它学习新任务。&lt;/li&gt;
&lt;li&gt;好吧，就让它做我原来的工作吧，那工作本来就不是人该干的。&lt;/li&gt;
&lt;li&gt;哇，机器人正在干我以前做的工作，我的新工作不仅好玩多了，工资还高。&lt;/li&gt;
&lt;li&gt;真高兴，机器人绝对干不了我现在做的事情。&lt;/li&gt;
&lt;li&gt;【重复】&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「未来，你的薪水高低将取决于你能否和机器人默契配合。90% 的同事将会是看不见的机器，而没有他们，你的大部分工作将无法完成。这一切都是必然的。让机器人代替我们从事现在的工作，让我们在它们的帮助下去构想有意义的新工作吧。」&lt;/p&gt;

&lt;p&gt;在未来，使用编程语言手敲代码可能会被视为一种复古行为。趁着现在这个到处就差一个程序员的时代，多敲几行代码，说不定就改变世界了呢？&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>张小龙悟透《失控》做出了微信，我们看过了《必然》能做什么？</title>
            <link>http://blog.coderzh.com/2016/01/31/inevitable/</link>
            <pubDate>Sun, 31 Jan 2016 12:22:25 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2016/01/31/inevitable/</guid>
            <description>&lt;p&gt;凯文凯利在 20 多年前在《失控》一书中预言了人类的未来的科技、社会和经济，现今的万维网、博客、维基百科、无人驾驶、电子货币、去中心化等等，都在上个世纪 90 年代被 KK 成功预言，而他在写《失控》一书时，还没有万维网，因特网才刚刚进入实用阶段。&lt;/p&gt;

&lt;p&gt;微信之父张小龙很早前就读过了《失控》，在他最近被爆出来的饭否日记中，他这么写到：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;再问有多少人看了失控，无人。我顿时将自己想象为KK而口若悬河了。&lt;/p&gt;

&lt;p&gt;2011-01-13 17:42 by gzallen&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;张小龙非常推崇《失控》中提到的 &lt;strong&gt;去中心化&lt;/strong&gt; 的思想，这点在微信公众号和朋友圈都有体现。比如并没有一个中心化的公众号列表入口，展示最新最热的公众号文章。每个公众号主只与关注者互相连接，用户与用户之间互相连接，好的内容可以在用户之间以几何倍数的传播。又比如前几天的朋友圈红包照片功能，瞬间引爆了朋友圈。&lt;/p&gt;

&lt;p&gt;《失控》这本书很厚，而且里面的内容需要花大量的时间去理解和琢磨。本文的标题纯粹是为了吸引眼球，因为并不能得出这样的结论：悟透了《失控》就一定能做出像微信这样牛逼的产品。更加现实的是，即使看过了《必然》，我们大多数人什么也做不出来。&lt;/p&gt;

&lt;p&gt;但是看这两本书，有助于你了解人类未来的科技趋势。正如罗振宇所说的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这个时代最悲哀的事情，就是——&lt;/p&gt;

&lt;p&gt;你努力，但你不在风口上，&lt;/p&gt;

&lt;p&gt;你聪明，但你不在潮流中。&lt;/p&gt;

&lt;p&gt;知道趋势，意味着已经胜利在望。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《失控》中预言的很多科技虽然现在已经发生，而在某些领域，比如人工生命、机器人技术、生态学、仿真学等领域，并没有出现新的重大思想。正如他在《必然》中的 &lt;strong&gt;形成(Becomming)&lt;/strong&gt; 中提到的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;未来的大部分运转人类生活的伟大产品，在 2016 年以前，都还没被发明出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们目睹了从 PC 时代到互联网时代，再到现在的移动互联网时代的转变过程。我们正处于形成的过程中，所以我们感觉不到变化。你今天后悔当初为什么没有和张小龙想到一块去。再过几年十几年，你同样也会感叹，我要是在当时就意识到有那么多可能性该多好啊！&lt;/p&gt;

&lt;p&gt;设想未来你的孙子问你，「爷爷，为什么你年轻的时候马桶还不会说话，裤子还需要手来脱，打字还需要键盘，甚至显示屏幕还要放一个笨重的显示器，你居然还在桌子上放两个？！你当时没想到需要做点什么吗？」&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以，不要再感叹强大的 BAT 已经垄断市场，未来更大的机会正在发生甚至还未被挖掘，把握最佳的时机，就是现在！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时候我们察觉不到变化，有时候其实是因为并不认可这样的变化，当变化已经形成时却又追悔莫及。所以，我们需要抛弃成见，拥抱变化。&lt;strong&gt;看准方向，找对风口，努力去飞&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;有句话叫：风口上的猪也会飞。其实我并不认可这句话。说现实一点，想让猪飞起来，那得是多大的风啊！真有这样一个好的风口，聪明的人早已经把猪赶到不知道哪里去了，还有猪什么事。真正厉害的不是猪，而是扇风的人。有一句话说的好，「为了这些猪，我没少扇多少风。」&lt;/p&gt;

&lt;p&gt;所以，我对于 &lt;strong&gt;形成&lt;/strong&gt; 的理解是，深刻理解形成的本质，抓住最好的时机，付出持续的努力，遇到反对时能够坚定，遇到挫折时能够总结，跌倒时想着爬起来怎样继续前进。有一天你也许功成名就，也许一事无成。但这有什么关系呢，放眼到整个人类社会，&lt;strong&gt;形成&lt;/strong&gt; 的趋势并不因你而左右，你会感激形成的过程中创造出来的种种机会。&lt;/p&gt;

&lt;p&gt;《必然》这本书一共有 12 个关键词，每个关键词都需要深入的思考。我也感觉到一篇苍白无力的读后感是无法总结这本有深度的书，所以一篇文章聊其中一个关键词已经足够。下次我们再来聊聊下个关键词「&lt;strong&gt;知化(Cognifying)&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;附录：&lt;/p&gt;

&lt;p&gt;《必然》十二个关键词：形成、知化、流动、屏读、使用、共享、过滤、重混、互动、追踪、提问、开始。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>一篇文章了解什么是增长黑客</title>
            <link>http://blog.coderzh.com/2015/10/17/read-growth-hacker/</link>
            <pubDate>Sat, 17 Oct 2015 10:16:41 CST</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/10/17/read-growth-hacker/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/GrowthHacker.jpg-wt&#34; alt=&#34;GrowthHacker&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最近在Kindle上读了范冰的《增长黑客》，对增长黑客有了更系统的了解。联想到我自己的微信公众号hacker-thinking和独立博客&lt;a href=&#34;http://blog.coderzh.com/&#34;&gt;blog.coderzh.com&lt;/a&gt;，我也在苦苦寻找用户增长的终极奥义。我也尝试过各种SEO（搜索引擎优化），比如规范链接地址、nofollow防止权重降低、提供sitemap、增加关键词、规范robots.txt、加快访问速度、增加反向链接等等。肯定有人会说，这些东西然并卵，高质量的内容才是最重要的。这点我同意。&lt;/p&gt;

&lt;p&gt;通过看《增长黑客》，我了解到了作为一个增长黑客必须具备的素质，了解到了大量的国内外活生生的增长黑客的案例。即使书中提到的很多方法，在今天看来已经是司空见惯的做法，但是在当时，想到和高效执行那些想法，是非常了不起的举措。&lt;/p&gt;

&lt;p&gt;想实现产品或用户增长，需要的是开放的想象力、敏锐的思维和大胆高效的执行，绝不是看了《增长黑客》照搬几个例子就可以实现的。但我还是觉得书中例子很多很丰富，极大的拓宽了我的思维，因此决定写这篇主要内容是书摘的文章，一方面看第二遍可以让我加深印象，另一方面是之后回顾该书内容时，可以快速的找到核心重点。&lt;/p&gt;

&lt;p&gt;本文适合的读者：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;读过《增长黑客》的朋友。可以当做重新温习一遍。&lt;/li&gt;
&lt;li&gt;还未有时间读《增长黑客》的朋友，可看此文快速了解该书的主要内容。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，再次声明，以下内容主要是根据我的个人喜好，从《增长黑客》一书中摘录，经过我的归纳总结提炼出来的内容，只有少部分是个人的观点和想法。如果你看了有感觉，请支持原著《增长黑客》。&lt;/p&gt;

&lt;p&gt;以下主要是书摘：&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;什么是“增长黑客”？&lt;/p&gt;

&lt;p&gt;增长黑客说法源于硅谷，最早在2010年由Qualaroo的创始人兼CEO肖恩·埃利斯（Sean Ellis）提出，真正引起广泛关注是因为安德鲁·陈（Anrew Chen）在2014年发表的《&lt;a href=&#34;http://andrewchen.co/2012/04/27/how-to-be-a-growth-hacker-an-airbnbcraigslist-case-study/&#34;&gt;Growth Hacker is the new VP Marketing&lt;/a&gt;》。&lt;/p&gt;

&lt;p&gt;这是一群以数据驱动营销、以市场指导产品，通过技术化手段贯彻增长目标的人。他们通常既了解技术，又深谙用户心理，擅长发挥创意、绕过限制，通过低成本的手段解决初创公司产品早期的增长问题。&lt;strong&gt;在外行人眼里，他们就像是极客、发明家和广告狂人的混合体。&lt;/strong&gt;再通俗一点形容，他们的职责接近于专门为初创公司设立的市场推广部门，因为很少有用于营销的大笔经费， 所以更多的是将注意力聚焦在产品策略本身带来的自发增长上。&lt;/p&gt;

&lt;h2 id=&#34;growth-hacker:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;Growth Hacker&lt;/h2&gt;

&lt;h3 id=&#34;timothy-c-draper:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;Timothy C. Draper&lt;/h3&gt;

&lt;p&gt;Hotmail上线时，Timothy C. Draper给Hotmail两位创始人Sabeer Bhatia和Jack Smith建议在&lt;strong&gt;邮件底部打广告：“附言：我爱你，你可以到Hotmail获得免费电子邮箱”&lt;/strong&gt;。最后广告内容简化成“你可以到Hotmail注册免费电子邮件”。随后促成了产品的几何级数传播。&lt;/p&gt;

&lt;p&gt;这一改动几小时后，新注册用户以每天3000个增长，六个月内斩获100万用户，仅五周后，又获得100万用户，一年半后出售给微软时已经达到了1200万。&lt;/p&gt;

&lt;h3 id=&#34;安迪-琼斯:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;安迪·琼斯&lt;/h3&gt;

&lt;p&gt;安迪·琼斯（Andy Johns）是硅谷富有经验的增长黑客，曾效力于Facebook、Twitter、Quora等公司的增长部门。&lt;/p&gt;

&lt;p&gt;2008年，Facebook，接到任务，12个月获得2亿新用户。主要方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;提供Facebook博客小挂件，用户可以把小挂件放在自己的公共主页或博客上，对外展示炫耀。带来了十亿次展示量，千万次点击量和百万级的注册量。&lt;/li&gt;
&lt;li&gt;收购一批第三世界的国家的通讯录服务提供商。以此获得潜在用户的Email地址，对其精准广告推送。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2008年5月，Facebook全球独立访问用户首次超过MySpace。&lt;/p&gt;

&lt;p&gt;安迪总结的方法论：数据分析、用户获取（SEO、PPC、电子邮件广告）、产品研发、文化建设、人才招聘。&lt;/p&gt;

&lt;p&gt;2010年加入Twitter，组建25人的用户增长团队。主要方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;改造首页，突出登录注册区域。砍掉热门微博和搜索框，减少用户头像显示面积，简化文案，登录注册区域占据整个页面的三分之一。24小时内用户注册率提升了约250%。&lt;/li&gt;
&lt;li&gt;每当新用户注册，立即推荐关注至少10个用户。让用户有东西可看，活跃和留存得到提高。&lt;/li&gt;
&lt;li&gt;开发和优化邮件自动发送功能。提高了单位时间发送的数量，每当用户获得粉丝、被转发收藏能第一时间收到邮件提醒。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在所有措施的运转下，两年间，Twitter的活跃用户数量由1亿增长到5亿。&lt;/p&gt;

&lt;p&gt;2011年末，加入问答社区Quora。主要琢磨用户的行为模式，并将之归纳为一套“标准动作”，然后引导其他用户去执行这套标准动作。如完善个人信息，关注感兴趣的行业领袖。&lt;/p&gt;

&lt;p&gt;从安迪身上看出的增长黑客的特质：数据为王、专注目标、关注细节、富于创意、信息通透。&lt;/p&gt;

&lt;h2 id=&#34;数据为王:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;数据为王&lt;/h2&gt;

&lt;p&gt;不同产品的核心数据指标是不一样的。比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;eBay的核心指标是商品价值量和eBay网站上的活跃卖家在全球电商平台的占比。&lt;/li&gt;
&lt;li&gt;Facebook的核心指标是月活跃用户数。&lt;/li&gt;
&lt;li&gt;MySpace、Compact更关注注册用户数。&lt;/li&gt;
&lt;li&gt;WhatsApp创始人简（Jan）从来只对外公布发送消息的数量。&lt;/li&gt;
&lt;li&gt;陌陌对活跃用户的定义是“登录成功并提交地理位置一次”。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;数据分析，保证数据来源正确的前提下，做定性和定量分析。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;了解微信公众号订阅者画像，推送适合的内容。&lt;/li&gt;
&lt;li&gt;根据统计分析“免费注册”比“立即注册”点击率高30%。&lt;/li&gt;
&lt;li&gt;某日在线订餐网站数据量猛升，猜测是否与天气阴雨，用户不愿出门有关。&lt;/li&gt;
&lt;li&gt;电商网站婴儿车销量增加，奶粉销量也会相应同步增加。（经典的啤酒和尿布的销售案例）&lt;/li&gt;
&lt;li&gt;某天LinkedIn发现来自雷曼公司的访问量骤升，结果第二天雷曼公司就宣布破产倒闭。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;增长黑客工具箱:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;增长黑客工具箱&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.google.com/analytics/&#34;&gt;Google Analytics&lt;/a&gt;（百度统计、CNZZ统计）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mixpanel.com/&#34;&gt;Mixpanel&lt;/a&gt; 用户行为分析&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kissmetrics.com/&#34;&gt;KissMetrics&lt;/a&gt; 用户行为分析&lt;/li&gt;
&lt;li&gt;UserCycle 用户分组实验&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://customer.io/&#34;&gt;Customer.io&lt;/a&gt; 基于用户不同行为发送不同的邮件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.optimizely.com/&#34;&gt;Optimize.ly&lt;/a&gt;（Unbouce）A/B测试利器&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://basecamp.com/&#34;&gt;Basecamp&lt;/a&gt; 37signals旗下的项目管理软件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.umeng.com/&#34;&gt;友盟&lt;/a&gt; 国内最大的移动应用统计分析平台之一&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;创造正确的产品:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;创造正确的产品&lt;/h2&gt;

&lt;p&gt;凯文·斯特罗姆（Kevin Systrom）开发的基于地理位置服务的签到抢地盘应用Burbn未见起色，发现用户只喜欢使用Burbn的照片分享功能，于是调转方向，孤注一掷只做照片分享，一个月后吸引了100万用户，仅创立551天后，于2012年4月以10亿美元天价被Facebook收购。这就是照片分享社区Instagram。&lt;/p&gt;

&lt;p&gt;美国市场研究公司CB Insights通过分析101家科技创业公司的失败案例，总结出了创业失败的20大主要原因，其中“没有市场需求”以42％的绝对占比成为首要因素。&lt;/p&gt;

&lt;p&gt;足迹仅靠“大片”效果滤镜，让它火爆了一把。美国版大众点评Yelp在2004年创立之初旨在提供基于电子邮件的交友服务，结果发现用户乐于给商家写点评，于是转型成“商户黄页”。YouTube在2005年创立时只是聚焦在视频约会这一小众市场，当发现流量增长难以继后，改旗易帜成在线视频分享。Flickr曾是一款失败的在线角色扮演游戏的衍生产品。Flickr创始人在之后另一款游戏创业失败后，鬼使神差的在该项目上孵化出了在线协作工具Slack。&lt;/p&gt;

&lt;p&gt;QQ在创业早期从事网络寻呼机业务，在寻呼机市场江河日下时，马化腾一度想以60万的价格出售。百度在成为中国最大的独立搜索引擎之前，曾甘居幕后为其他门户网站提供搜索技术。盛大网络在依靠网络游戏发家致富前，做的是网络虚拟社区“史丹莫”。从百团大战到化妆品限时特卖的聚美优品。从独立论坛系统转型为页游公司的动网。从视频网站转型为在线直播平台的六间房。网络聊天室转型为棋牌游戏的博雅互动。坐拥1亿用户的VeryCD转型“心动游戏”。&lt;/p&gt;

&lt;p&gt;Gmail团队曾经进行过一次名为“你不是用户”的内部演示，援引大量用户数据阐释产品团队 做出每一项决策的具体援引：之所以去除某些功能，是因为大多数Gmail用户没有相关需求，从来都不使用它们。&lt;/p&gt;

&lt;p&gt;QQ邮箱的产品人员曾做了一个特性：将用户收到的所有邮件的附件单列出来，显示在一处。结果发现用户根本没有这样的需求。&lt;/p&gt;

&lt;p&gt;雷军称创业“就是要做最肥的市场”。他投资的YY最早是游戏门户，但雷军觉得最多只值1亿美金，劝李学凌改做直播平台，结果一炮打响。&lt;/p&gt;

&lt;h3 id=&#34;mvp:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;MVP&lt;/h3&gt;

&lt;p&gt;精益创业是指开发团队通过提供最小化可行产品（MVP）获取用户反馈，在此基础上持续快速 迭代（或谋求转型），直至产品达到PMF阶段。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dropbox：在Digg.com上发布虚构的Dropbox产品功能，引发大量用户兴趣，最终诞生Dropbox。&lt;/li&gt;
&lt;li&gt;Groupon：最早使用WordPress搭建，手工制作商品礼券。&lt;/li&gt;
&lt;li&gt;Zappos：鞋类电商平台，最早并没有自己的仓库和物流基地，只是跑到隔壁鞋店拍摄一批照片，有人下单再去买回来。&lt;/li&gt;
&lt;li&gt;大众点评：初期手工添加1000家饭店，验证用户是否愿意点评。&lt;/li&gt;
&lt;li&gt;Hyperlapse：延时摄影应用，功能极简，三步完成。&lt;/li&gt;
&lt;li&gt;微信游戏：为快速验证游戏策划是否可行，制作人和策划用“暴力拼图法”感受最终效果，一旦方案不可行便“尽快放弃，不再纠结”。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于微信公众平台的MVP策略，开发周期短、成本低、无需适配、分发方便、便于收集反馈、数据得以沉淀。（示例：女神进化史、悠泊）&lt;/p&gt;

&lt;h2 id=&#34;获取用户:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;获取用户&lt;/h2&gt;

&lt;p&gt;微信的张小龙曾经说过：如果你不了解女性，你将失去一半以上的用户（在他的推荐书单中包含《女性的起源》这样专门从进化学角度探讨女性的著作）。&lt;/p&gt;

&lt;h3 id=&#34;筛选种子用户:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;筛选种子用户&lt;/h3&gt;

&lt;p&gt;Facebook这家起源于哈佛大学校园的全球最大社交网站，在上线之初仅对常青藤大学的学生开放，随后逐渐向附近学校乃至全美、全世界拓展。这一聪明的策略帮助其在初期积累了大量的高质量种子用户，也勾起了外部世界融入这个精英社交圈的兴趣，为日后向普罗大众扩张奠定了牢靠的基础。&lt;/p&gt;

&lt;p&gt;知乎早期走的是精英路线。它采用了严格的邀请和审核机制，李开复、徐小平、雷军等互联网 大佬和一批投资圈、媒体圈的从业者成为了它的种子用户。这从根源上奠定了知乎的调性，也它 在圈内迅速成为话题产品，一码难求。有幸受邀加入知乎的用户们谨言慎行，创造了一批高质量 的内容。&lt;/p&gt;

&lt;p&gt;动漫爱好者的聚集地——哔哩哔哩弹幕视频网为了过滤出高质量的早期内容贡献者，维持社区 的健康生态，采用了一套答题机制来拦截不够“ 资深”的动漫爱好者。&lt;/p&gt;

&lt;p&gt;小米从竞品的网站精心筛选并主动邀请一批人成为MIUI的第一批种子用户。&lt;/p&gt;

&lt;p&gt;要警惕“产品蝗虫”。产品早期的用户不都是“种子用户”。&lt;/p&gt;

&lt;p&gt;案例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;聚美优品创始人在办公室搭起“摄影棚”，给化妆品拍照，然后精心修图以吸引女性的注意。&lt;/li&gt;
&lt;li&gt;Strikingly创始人David Chen在Facebook上添加了2000名好友，邀请用户出来喝茶，成为生活中的挚友，甚至在外出演讲时住在了用户家里。&lt;/li&gt;
&lt;li&gt;网易云笔记首先拉来公司内部50个员工高强度使用，不断提需求和反馈问题。然后通过邀请审核逐渐扩大种子用户。&lt;/li&gt;
&lt;li&gt;Airbnb在2009年时每周营收仅200美元，创始人一一查阅网站上的配图，发现那些随便用手机拍出来的照片毫无吸引力，于是租了一个昂贵的相机，挨家挨户上门帮房东拍照。一周后效果立竿见影。&lt;/li&gt;
&lt;li&gt;利用社交网络获取海量用户（开心农场、Zynga、啪啪、唱吧、抬杠、美拍）。啪啪从一开始就未提供独立账号注册登录功能，必须使用新浪微博和QQ登录，使得更容易分享到社交平台。&lt;/li&gt;
&lt;li&gt;在合法的前提下，通过数据抓取“借鸡生蛋”。比如Windows Live Space准备关闭时，网易博客通过RSS抓取，提供了“一键搬家”功能。（作者自己的“追TA”的例子，即在网络上抓取用户头像来模仿真实用户，感觉有侵权嫌疑啊。）&lt;/li&gt;
&lt;li&gt;通过内容营销：吸引流量、培养潜在用户、劝诱转化。撰写耸动的标题，Upworthy总结出的标题技巧包括：不要在标题里透露全部内容、抛出疑问而不是总结陈词、 反复修改直到满意等。&lt;/li&gt;
&lt;li&gt;KISSmetrics的联合创始人尼尔· 帕特尔（Neil Patel）发布的一项针对Google搜索排名与被 收录文章长度关系的调查数据显示，一般排在前十名的文章需要包括至少2000个单词。病毒内容提供商Buzzsumo的调查结果与KISSmetrics近似，他们认为文章篇幅在3000字至10000字的范围内 最容易获得人们的主动分享。&lt;/li&gt;
&lt;li&gt;搜索引擎优化（SEO）和应用商店优化（ASO）。SEO主要有提供sitemap、标注关键词、增加反向链接（通过维基百科）等手段。ASO主要有通过副标题堆关键词（如：大姨吗），引导高满意度用户为应用评分，在用户需求得到满足、感受到成功喜悦时提醒用户去评分。&lt;/li&gt;
&lt;li&gt;捆绑下载，比如豌豆荚、百度应用市场，搜索应用时，先下载的是一个市场APK，然后再下到搜索的软件。（有点流氓手段）&lt;/li&gt;
&lt;li&gt;Mailbox利用排队玩“饥饿营销”，Robinhood甚至提供了“插队”功能，用户只需要发布邀请链接到社交网络就能插队。Track.io甚至更加极端，在技术上无法解决性能问题的情况下，提供付费免除排队功能，找到“有迫切需要的用户”，从而使得项目起死回生。&lt;/li&gt;
&lt;li&gt;利用嵌入式代码和小挂件让你的品牌无处不在。比如：YouTube和Gleam。&lt;/li&gt;
&lt;li&gt;从线上到线下。打车软件Uber最早在旧金山低调推出，因为当地糟糕的出租车打车体验和经常下雨的环境使其迅速得到青睐。手机约会应用Tinder渗透到洛杉矶派对圈，拉拢大批年轻貌美的长期在线用户。&lt;/li&gt;
&lt;li&gt;走向海外。（Facebook、触宝、猎豹）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;激发活跃:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;激发活跃&lt;/h2&gt;

&lt;p&gt;A/B测试：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LinkedIn通过A/B测试，确定了新注册用户愿意邀请的用户数量定在了“4”个魔法数字。&lt;/li&gt;
&lt;li&gt;Airbnb曾测试过把“保存到心愿单”的收藏图标由星形改为爱心，结果仅凭这一改动就让心愿列表的使用率提升了30％。&lt;/li&gt;
&lt;li&gt;移动端通过下发HTML5执行A/B测试（百姓网）&lt;/li&gt;
&lt;li&gt;A/B测试的结果也要理性对待。百姓网通过A/B测试发现将“拨打电话”改成“投递简历”后，点击率并没有下降。后来却收到很多用户反馈“为什么不能直接拨打电话”，因为用户需要打电话，在不得已情况下才点了投递简历。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;诱饵效应，影响用户决策：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tinder交友应用的产品团队发现，当配对异性照片界面上面只有一个“喜欢”按钮时，平均每天点击数为7000次。而在旁边增加一个“不喜欢”按钮后，“喜欢”的点击数达到12000次左右。&lt;/li&gt;
&lt;li&gt;迅雷在引导用户升级“VIP尊享版”时，仅有一个“华丽地变身”比旁边加一个“残忍地拒绝”点击率低了20%。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;游戏改变世界：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;星巴克的会员成长体系（星成就、徽章、亲友券、邀请券）。比如要获得名为“晨型人”的徽章，必须完成五次9: 00之前的门店签到。&lt;/li&gt;
&lt;li&gt;Foursquare的游戏化策略：积分排名、徽章挑战、抢夺地主。&lt;/li&gt;
&lt;li&gt;滴滴打车的“滴米”激励系统，根据这一单的难易程度增减滴米。&lt;/li&gt;
&lt;li&gt;百度贴吧的签到、QQ会员的钻石点亮和VIP成长体系。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;机器人模拟用户&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Quora早期面临内容少质量差的问题时，采取了员工自问自答的方法，通过机器人来模拟用户问答。&lt;/li&gt;
&lt;li&gt;很有网络游戏里看到在线玩家，实际上执行AI的机器人。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;提高留存:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;提高留存&lt;/h2&gt;

&lt;p&gt;根据美国贝恩公司的调查，在商业社会中5％的客户留存率增长意味着公司利润30％的增长，而 把产品卖给老客户的概率是卖给新客户的3倍。所以在“增长黑客”圈内有一句名言：留住已有的 用户胜过拓展新的客户。&lt;/p&gt;

&lt;h3 id=&#34;留存率:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;留存率&lt;/h3&gt;

&lt;p&gt;衡量产品留存率的常用指标包括次日留存率、7日留存（周留存）率、30日留存（月留存）率，其计算公式为：第1天的新增用户中，在往后的第N天依然在使用的用户数/第1天的新增用户数。其中的N对应的就是留存指标中代表天数的2、7或30。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;次日留存率：可于第一时间发现产品新版本的品质变动和渠道优劣。&lt;/li&gt;
&lt;li&gt;7日留存率：可反映出用户完成一个完整体验周期后的去留状况。&lt;/li&gt;
&lt;li&gt;30日留存率：更能反映出一次版本迭代后的稳定性，辅助判断产品的演进方向是否合理。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;渠道留存也是一项值得钻研玩味的指标。由于渠道来源不一，用户质量也千差万别，所以有必要针对渠道用户单独剥离进行留存率分析，选择留存率较高的优质渠道进行重点投放。&lt;/p&gt;

&lt;p&gt;提高留存率的方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;优化产品性能。（加快打开速度、减少电池消耗、提升弱网络下的体验）&lt;/li&gt;
&lt;li&gt;有损服务，放下不必要的坚持。微信逢年过节时服务器压力巨大，因此放弃了微信群里的群聊信息先后一致性的严格要求。小米抢购排队时，放弃了精确的排队数量，而是模糊的“仅剩5万部”。手游《刀塔传奇》每逢大版本更新时，尽量先使用“低清版”资源，虽然视觉效果不够细腻，但能让玩家尽快先玩起来。&lt;/li&gt;
&lt;li&gt;引导新用户快速上手。如Twitter在新注册后会自动推荐关注5到10人，让用户的时间线有内容可读。&lt;/li&gt;
&lt;li&gt;社交维系和社交解绑。微信游戏“全民飞机大战”提供“合体”功能，选择一名微信或QQ好友帮助自己。玩家因“求合体”被召回，发现“躺着赚钱”坐收了合体奖励，可能重新被激活。Facebook在用户有冲动注销账号时，确认环节最后一步，页面会显示几名和用户关系最亲密的好友的照片，并可怜巴巴的说“他们会想念你的”。这一设计，使得Facebook的非活跃账户数降低了7%，相当于100万用户量。社交解绑的例子：Same。&lt;/li&gt;
&lt;li&gt;设计唤醒机制：电子邮件唤醒、消息推送、网页内唤醒移动应用。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;增加收入:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;增加收入&lt;/h2&gt;

&lt;p&gt;免费模式大行其道的原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;互联网极大地降低了信息的传播成本，这是免费模式的基石所在。&lt;/li&gt;
&lt;li&gt;产品通过互联网面向全球的海量用户，这进一步摊薄了边际成本。&lt;/li&gt;
&lt;li&gt;“ 免费”天然地对人们有着难以抗拒的魅力。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;免费模式如何赚钱：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基本功能免费，高级功能收费的Freemium策略。&lt;/li&gt;
&lt;li&gt;交叉补贴。如：吉列剃须刀的刀身免费刀头收费。&lt;/li&gt;
&lt;li&gt;三方市场流量变现。如：陌陌导流到自家（陌陌争霸）或合作伙伴的游戏成为一大盈利来源。&lt;/li&gt;
&lt;li&gt;开源接受捐赠，或者提供定制开发及文档收费。如：RootTools。&lt;/li&gt;
&lt;li&gt;公司上市或被收购。如：优酷上市。最新新闻又被阿里收购。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;天下没有免费的午餐。通过取消免费账户，收入获得大幅提升。如：设计师网页服务Bidesketch、网站分析服务CrazyEgg、财务软件LessAccounting。&lt;/p&gt;

&lt;p&gt;重定向广告，追踪消费者曾经搜过或打开的网页。比如在淘宝或京东搜过某个商品，在访问别的网站时，依然显示刚刚搜过的商品广告，让犹豫不决的用户点击过去直接下单。&lt;/p&gt;

&lt;p&gt;变惩为奖，堵不如疏。2011年，有网友发现了腾讯QQ会员的技术漏洞，公然在淘宝上以1元钱的价格挂出了“QQ会员点灯”业务。腾讯在修复漏洞后，并未对用户进行惩罚，反而给这部分用户提供八折的优惠折扣，将他们转化为真正的QQ会员。（同理，作者使用的CleanMyMac由破解转正版的优惠）&lt;/p&gt;

&lt;p&gt;建立商业智能系统，精细化管理业绩指标。（百姓网）&lt;/p&gt;

&lt;h2 id=&#34;病毒传播:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;病毒传播&lt;/h2&gt;

&lt;p&gt;凯文·凯利在1998年出版《新经济，新规则》一书中提出了大名鼎鼎的“传真机效应”：单独一台传真机是没有什么价值的，只有它处于一个网络中时才能被赋予价值。对于拥有一台传真机的人而言，网络中中的传真机越多，你的传真机价值也就越大。&lt;/p&gt;

&lt;p&gt;去中心化：人人都是节点，传播的效果能够以几何级数倍增。&lt;/p&gt;

&lt;p&gt;衡量病毒传播的两大核心指标是K因子（K Factor）和病毒循环周期（Virial Cycle Time）。K因子＝感染率 X 转化率。病毒循环周期，是指从用户发出病毒邀请，到新用户完成转化（如点击阅读、注册、消费的行为）所花费的时间。&lt;/p&gt;

&lt;p&gt;坏事传千里，Bug营销：百度云网盘支付BUG（只需要1/1000价格）、迅雷支付Bug（1分钱买180元白金年卡）。&lt;/p&gt;

&lt;p&gt;借势营销，如12306抢票插件、SegmentFault举行的“光棍节程序员闯关秀”。&lt;/p&gt;

&lt;p&gt;产品体外的病毒循环：朋友圈小游戏。如“围住神经猫”、“整蛊”、“财务包子铺”及各种小测试。&lt;/p&gt;

&lt;p&gt;产品体内的病毒循环：通过推荐好友解锁功能（AirDroid）、美图秀秀各种“趣味活动”（如“测试与明星的撞脸程度”）分享、百度魔图的“PK大咖”（上传照片，自动告诉你和哪位明星最像）。&lt;/p&gt;

&lt;p&gt;病毒传播中的用户心理把控：喜爱、逐利、互惠、求助、炫耀、稀缺、害怕失去或错过、懒惰。&lt;/p&gt;

&lt;p&gt;作者的实践：云诺网盘通过用户点击获得无限容量的活动营销。&lt;/p&gt;

&lt;h2 id=&#34;实例:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;实例&lt;/h2&gt;

&lt;h3 id=&#34;airbnb:4c23b88e0ac16f3853bf56fcc20ed9c2&#34;&gt;Airbnb&lt;/h3&gt;

&lt;p&gt;2007年，住在美国旧金山的两位设计师——布莱恩·彻斯基（Brian Chesky）与乔伊·杰比亚（Joe Gebbia）正在为他们付不起房租而困扰。为了赚点外快，他们计划将阁楼出租出去。传统 的做法是在Craigslist网站发帖子。“但我们不想这么干，因为在Craigslist发千篇一律的帖子会显得冷冰冰的，于是我们打算自己动手建一个网站Airbed&amp;amp;Breakfast。”&lt;/p&gt;

&lt;p&gt;如今，Airbed&amp;amp;Breakfast已经摇身一变成为享誉全球的“共享经济”代表性服务：Airbnb。&lt;/p&gt;

&lt;p&gt;早期两位创始人曾在美国大选时卖麦片来筹集资金，因此受到与硅谷创业教父保罗·格雷厄姆（Paul Graham）青睐。&lt;/p&gt;

&lt;p&gt;格雷厄姆事后承认，“这群甚至可以靠卖麦片来挣取收入的人，他们的项目死不了”。&lt;/p&gt;

&lt;p&gt;Airbnb实现用户增长的秘诀：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;挖竞争对手的用户。租房信息提供同步发送到竞争对手Craigslist网站、在Craigslist上模拟客户给屋主留言推荐Airbnb。&lt;/li&gt;
&lt;li&gt;5000美金租借高档相机挨家挨户给招租者的房屋拍照。后签约专业摄影师成立项目组，专门给房东提供拍摄服务。&lt;/li&gt;
&lt;li&gt;打通社交关系链。让屋主和租客信息更透明，解决基本的人与人的信任问题。&lt;/li&gt;
&lt;li&gt;“心愿列表”将星形改成心形，用户使用率提升了30%。&lt;/li&gt;
&lt;li&gt;拥抱移动设备。&lt;/li&gt;
&lt;li&gt;推广时，通过A/B测试发现，“邀请好友可以获得25美元”的效果就不如“向你的好友赠送25美元旅行经费”更打动人。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（Tinder、Github、美丽说、外卖库的例子见原书）&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>最近读的几本书</title>
            <link>http://blog.coderzh.com/2015/08/16/Books/</link>
            <pubDate>Sun, 16 Aug 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/08/16/Books/</guid>
            <description>

&lt;p&gt;由于我住的比较远，每天上下班单程需要1个半小时左右。因此，车上和地铁的时间成了我每天阅读的时间。&lt;/p&gt;

&lt;p&gt;下面几本是我最近读过的书，分享一下：&lt;/p&gt;

&lt;h3 id=&#34;1-创业维艰-hard-thing-about-hard-thing:7e00911045293764b501e3f40792557f&#34;&gt;1. 《创业维艰》 - Hard Thing About Hard Thing&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/HardThingAboutHardThing.jpg&#34; alt=&#34;HardThingAboutHardThing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我觉得每个创业者都必须看的好书。和其他大谈道理方法论的书不同，作者都是从自身的经历说起，通过一个又一个活生生的例子，通过切身体会得出的人生感悟和管理哲学。而且，作者很有名气，最后也非常成功。书前半部分的故事非常精彩，看的非常有感觉。后半部分的管理哲学也是受益匪浅。保证看过的都说好。&lt;/p&gt;

&lt;h3 id=&#34;2-rework重来:7e00911045293764b501e3f40792557f&#34;&gt;2. 《Rework重来》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/Rework.jpg&#34; alt=&#34;Rework&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这本书道理讲的有点多，而且，大多数道理都有点奇葩，反常理。比如，保持小公司，不要想着公司变大。不要想着以后会想到办法赚钱。不要怀着被收购的想法去创业等等。仔细一想，挺有道理的。喜欢的人会很喜欢。&lt;/p&gt;

&lt;h3 id=&#34;3-乌合之众:7e00911045293764b501e3f40792557f&#34;&gt;3. 《乌合之众》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/TheCrowd.jpg&#34; alt=&#34;TheCrowd&#34; /&gt;&lt;/p&gt;

&lt;p&gt;研究群体心理的著作。群体是感性的、本能的情绪特别容易受传染，而理智的、冷静的情绪不起丝毫作用。群体的人会感受到一种强烈的“正义”力量，抱着“法不责众”的想法，会理直气壮的做出平时不可能做出的举动。群体敬畏权威和强权，容易受暗示影响，而且情绪多变。（张小龙对这本书非常推崇，对群体心理这么了解，才做出微信这样的产品吧。）&lt;/p&gt;

&lt;h3 id=&#34;4-改变未来的九大算法:7e00911045293764b501e3f40792557f&#34;&gt;4. 《改变未来的九大算法》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/NineAlgo.jpg&#34; alt=&#34;NineAlgo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这本书属于科普吧，并不是给程序员看的那类算法书。最大的特点是把复杂的算法简化，形象成一个又一个简单可理解的小例子。让复杂的算法走下神坛，让我们明白，再复杂的算法也是由一个又一个简单大家都懂的道理衍生而来的。九大算法主要是：
 1. 搜索引擎索引
 1. 网页排名PageRank
 1. 公钥加密（PS: 颜料混合的例子特别形象生动）
 1. 纠错码
 1. 图形识别算法（PS: 机器学习原来是这么回事）
 1. 压缩算法
 1. 数据库用到的基础算法
 1. 数字签名
 1. 特别伟大解决一切问题的算法并不存在（PS: 我可以说第九个是凑数的吗？）&lt;/p&gt;

&lt;h3 id=&#34;5-mactalk人生元编程:7e00911045293764b501e3f40792557f&#34;&gt;5. 《MacTalk人生元编程》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/MacTalk.jpg&#34; alt=&#34;MacTalk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作者迟建强前段时间刚加入了锤子科技，看迟建强的文章和头像，每次都容易让我联想到以前一个朋友，形象和气质都和他很像。这本书主要介绍一些Mac的历史、故事、技巧，当然，还有更精彩的作者的编程经历和人生感悟。&lt;/p&gt;

&lt;h3 id=&#34;6-程序员跳槽全攻略:7e00911045293764b501e3f40792557f&#34;&gt;6. 《程序员跳槽全攻略》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/JobDeer.jpg&#34; alt=&#34;JobDeer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这本书有点小坑了，只要1块钱就买来看了，1个小时不到就可以读完，然后感慨一下，这样也可以出一本书？ 虽然如此，假如你看一本书，哪怕只有一点点收货，也算是很值了。我觉得书里的这幅图还是挺有意思的，程序员职业发展四大象限：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/JobDeerEBSI.jpg&#34; alt=&#34;JobDeerEBSI&#34; /&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>读《程序员的思维训练》</title>
            <link>http://blog.coderzh.com/2015/05/16/ThinkingAndLearning/</link>
            <pubDate>Sat, 16 May 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/05/16/ThinkingAndLearning/</guid>
            <description>&lt;p&gt;《程序员的思维修炼:开发认知潜能的九堂课》 从程序员的角度去认清自己，思考问题，了解我们的大脑，进而发掘潜能。&lt;/p&gt;

&lt;p&gt;作者是亨特(Andy Hunt)，他曾经写过《程序员修炼之道——从小工到专家》，《高效程序员的45个习惯:敏捷开发修炼之道》，《Programming Ruby》，《单元测试之道C#版——使用NUnit 》、《单元测试之道Java版——使用JUnit》、《版本控制之道——使用CVS 》等等。&lt;/p&gt;

&lt;p&gt;没错，他是敏捷宣言首倡者之一，敏捷开发权威人士，Pragmatic Programmers公司创始人。&lt;/p&gt;

&lt;p&gt;以下是读书过程中摘录的部分笔记，以及一点点自己的思考。（以下只是书中部分观点，详情请阅读原版书籍）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/PragmaticThinking.jpg&#34; alt=&#34;ThinkingAndLearning&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 1.一个开发人员声称拥有十年的经验，但实际上只是一年的经验重复了九次，那么这就不算是经验。&lt;/p&gt;

&lt;p&gt;我工作快8年了，参与过的产品从WPS，毒霸，月影传说OL，创业做的端游和手游，到现在的微信，做过的工作有测试开发，3D端游客户端，表现逻辑、游戏逻辑开发，Cocos2d-X手游开发，Unity手游服务端开发等等，倒是没有多少重复，但是跨界太多也未必是好事，我应该好好审视自己，如何让自己在某一领域钻的更深。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 2.一个众所周知的极限编程方法的经验之谈是“测试一切可能出错的东西”。&lt;/p&gt;

&lt;p&gt;嗯，怀疑一切。很多人包括我自己，经常都会陷入这样的思维逻辑：“他们都这样做了，应该就没问题了啊。”，如果经常做这样的假定，很多问题都会被你忽略过去。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 3.敏捷开发就是在一个高度协作的环境中，不断地使用反馈进行自我调整和完善。&lt;/p&gt;

&lt;p&gt;这个观点并不新奇，道理大家都懂，是否能做到做好就不一定了。这点其实和雷军说的小步快跑，不断试错道理是一样的。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 4.专家根据直觉工作，而不需要理由。他们可能会对如何得到结论完全说不清楚。他们的确不知道，只是“觉得是正确的”。&lt;/p&gt;

&lt;p&gt;这点我曾深有感触。游戏创业前期，我们曾经有一个专家级制作人兼主策划（个人认为），他提出的一些想法和玩法遭到主要合伙人的质疑，在别人缜密的推理辩证和追问下，他没法解释清楚其中的逻辑，然后，然后他就被请走了。。。后来我和某君交流此事，我感觉这位制作人也许就是凭着多年体验此类游戏的直觉在做判断，当面临一个思维缜密却不怎么玩此类游戏的人的质疑时，未必能PK的过。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 5.专家知道哪些是无关紧要的细节，哪些是非常重要的细节。也许不是有意识的，但是专家知道应该关注哪些细节，可以放心地忽略哪些细节。专家非常擅长做有针对性的特征匹配。&lt;/p&gt;

&lt;p&gt;这点感受颇深，却是不容易做到的。在之前游戏创业过程中，我们曾陷入这样的思维：“我们要做xxx功能，要加xxx玩法，打击感要强，人物模型要精细，场景物件要丰富，远景要有气势，要。。要。。”，我们什么都想要，结果就是我们怎么也完不成。微信第一个版本很简陋就上线了，朋友圈第一个版本连评论功能都没有，朋友圈不做滤镜功能，好友不做分组（现在有了），不做iphone用户在线标签…… 张小龙分享的创业观里，很多都是这个逻辑，我们不做什么。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 6.达尔文说过：“无知往往来自于自信而不是知识。”反过来似乎也是对的。一旦你真的成为了一名专家，你会痛苦地意识到你知道的是多么少。&lt;/p&gt;

&lt;p&gt;我常常都感觉自己很水……&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 7.敏捷开发是非常有效的工具，但它不适用于一个完全由新手和高级新手组成的团队。&lt;/p&gt;

&lt;p&gt;说的太好了。不过，敏捷开发这个东西，已经被沦为了一个口号。即使有非常优秀的团队，也未必能把敏捷开发做好。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 8.根据不同的研究成果，开发人员之间存在20∶1~40∶1的生产力差异&lt;/p&gt;

&lt;p&gt;生产力并不是指代码量，而是解决问题的能力，以及应付未来变化的能力。如果所有的老板都懂这个道理就好了，让优秀的程序员工资也能是其他人的几十倍：）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 9.新手使用规则，专家使用直觉。大多数人都是高级新手。元认知（metacognitive）能力，或者自我认知的能力，往往在较高的技能层次中才会具有。&lt;/p&gt;

&lt;p&gt;很多人都常常高估了自己。看见别人成功了就会说，这有什么呀，还不是他命好，他怎么怎么的。自己失败了总会给自己找各种理由，一点小成就就高估了自己的作用。我们没法要求别人怎样，但我自己力求做到失败了多找找自己的原因，并且时刻保持一颗谦卑虚心学习的心。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 10.正确自我评估的唯一办法就是提高个人技能层次，这反过来又会提高元认知能力。专家会更多地自我怀疑。&lt;/p&gt;

&lt;p&gt;一山更比一山高啊，只有爬上了这座山，你才能看到后面的巨峰啊。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 11.专家并不总是最好的老师。教学是一门技能，你在某个领域是专家，这并不能保证你可以把它教给别人。你可能发现处在胜任水平的人可能更合适教一名新手。&lt;/p&gt;

&lt;p&gt;如果你已经是专家了，也要好好教教偶们嘛~~~&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 12.一旦你成了某个领域的专家，在别的领域成为专家就会变得更容易。至少你已经有了现成的获取知识的技能和模型构建的能力。&lt;/p&gt;

&lt;p&gt;先努力成为某一领域的专家再说。。。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 13.保持实践以维持专家水平。&lt;/p&gt;

&lt;p&gt;专家的世界我不懂，反正我每天除了实践，也，只能实践。。。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 14.捕获所有的想法以从中获益更多。准备好做记录的工具，并随身携带……&lt;/p&gt;

&lt;p&gt;作者提倡随时携带笔和纸记录，但是对我来说太困难了，字写的太丑，很多汉字还写不出。所以，我平时是用手机的为知笔记，随时记录一些想法。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 15.“设计并不是创造美，美来自于选择、共鸣、同化和爱。”&lt;/p&gt;

&lt;p&gt;设计是没有绝对正确的，搞民主投票是错误的。作为主美或者主设计师，你做了一些选择，表达了你的想法，不能让所有人喜欢，但是获得了一些人的共鸣，就是好的设计。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 16.晨写是早晨要做的第一件事——在喝咖啡之前、在收听交通广播之前、在洗澡之前、在送孩子上学之前、在遛狗之前。&lt;/p&gt;

&lt;p&gt;这个习惯不好实施啊，每天起早贪黑，哪有时间喝咖啡听广播。。。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 17.离开键盘去解决难题。&lt;/p&gt;

&lt;p&gt;当一个问题绞尽脑汁都解决不了的时候，尝试把它完全忘掉，然后出去走走，走的时候不要再去想这件事，也许你放松心情做别的事情的时候，灵感突然就会到来。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 18.使用武术来提高注意力&lt;/p&gt;

&lt;p&gt;小时候没开始练，现在也晚了。。。不过我一个前同事武术很厉害，以前晚上的时候看见过他打拳，还会耍棍子。膜拜~&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 19.百分之七十五的人偏于外向型，剩下百分之二十五的人则希望单独呆着。&lt;/p&gt;

&lt;p&gt;我就是那个希望单独呆着的二十五。。。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 20.有很多办法来制定出一个解决方案并达成妥协。唯一一个不会起作用的方式是试图改变别人的性格以适合自己。&lt;/p&gt;

&lt;p&gt;不要去尝试改变别人的性格和习惯，要学会观察和了解别人，从而找到好的解决方案&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 21.需要平均20分钟返回到原来的工作状态。&lt;/p&gt;

&lt;p&gt;进入工作状态的时候，把QQ之类的关了吧，手机开着总会弹出来就把Q群屏蔽了，设置接收但不提醒。因为不断被打断的话，效率非常的低。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 22.试图把注意力同时放在几件事情上，意味着你在每件事情上都会处理得很差&lt;/p&gt;

&lt;p&gt;专注，即使同时做两件事，就像单CPU两个线程，每次都要切换上下文，最后导致两件事情效率都不高。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 23.英国的一项有争议的研究：如果你持续中断正在进行的任务，去检查电子邮件或者回复即时消息，你的有效智商会下降10分。&lt;/p&gt;

&lt;p&gt;这果然是“有争议”的研究，也许是对的吧。。。智商减了10，还够用吗？。。。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 24.我最喜欢的便携式写作工具之一，就是我的夏普Zaurus。在它的生命即将走到尽头时，我去掉了它里面所有的东西，只剩vi编辑器。我卸掉了无线网卡，仅使用CF存储卡同步。此时的设备使我很少分心&lt;/p&gt;

&lt;p&gt;自动用了Kindle，我也能专心的看书了：）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 25.在Mac上可以使用Think!屏蔽焦点以外的所有程序，或者是DeskTopple，它可以隐藏你的桌面图标，替换你的墙纸，并定时自动隐藏应用程序的窗口。你可以使用QuickSilver工具来设置一些基于按键的快捷命令。&lt;/p&gt;

&lt;p&gt;Mac我还买不起，Windows上的Launchy、TotalCommand、Vim等等还是必不可少的。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&amp;gt; 26.反反复复的“你有封信”的提示音也是如此。如果可以的话，把它们全部关闭。加大检查邮件的间隔。不要每分钟都检查邮件。&lt;/p&gt;

&lt;p&gt;工作用的台式机一般是不会有声音的啦。。。每天选择几个固定的时间查看邮件，也许效率会高一些。&lt;/p&gt;

&lt;p&gt;书中还有大段的篇幅介绍了左脑与右脑的区别，如何运用左脑和右脑等，个人认为理论居多，以后有感觉了回头再看看吧。&lt;/p&gt;

&lt;p&gt;欢迎关注我的微信公众号：hacker-thinking，谢谢支持！
&lt;br /&gt;
&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/qrcode.jpg&#34; alt=&#34;hacker-thinking&#34; /&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>成大事者不纠结</title>
            <link>http://blog.coderzh.com/2015/04/26/Category/</link>
            <pubDate>Sun, 26 Apr 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/04/26/Category/</guid>
            <description>&lt;p&gt;最近在看罗振宇的《成大事者不纠结》，想想自己平时有什么纠结的事情，当我打开为知笔记看着长长的文件夹分类时，我明白了，其实我一直纠结着“分类”。我有一定的分类整理的习惯，当然也不是特别强迫的那种。比如，记录技术文章时，我会分出：C++，Python，Cocos2d-x，GameServer，Linux，……等等，甚至还会分出若干的二级分类。&lt;/p&gt;

&lt;p&gt;这样分类的结果，就是自从被分入某个子类之后，我再也没有打开过它。甚至平时连看都不曾看见过它，好像它从未存在过。&lt;/p&gt;

&lt;p&gt;同样的例子，之前我喜欢在手机里给APP分类：游戏，阅读，新闻，视频，社交，工具，系统，……等等。游戏类别还不够分，再分出：休闲游戏，动作游戏，卡牌游戏，……等等。休闲游戏太多放在一起太乱又分成：休闲游戏1，休闲游戏2，……。最后的结果是，自从一个游戏被纳入了分类文件夹，我就很少再打开过它。&lt;/p&gt;

&lt;p&gt;再举个栗子，之前喜欢在多看里看书（现在转到Kindle了），我也喜欢把下载的书籍分门别类。甚至感觉下载和分类的兴趣大过了阅读的兴趣，找到一本有趣的书，下载并纳入某个分类，像达成了某个成就，而之后根本没有打开阅读过。就像某些人热衷于收集某岛国的片子并分门别类，甚至大过了观赏的兴趣。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以，我决定从今天起不再纠结分类。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;原则上，尽可能不要分类。当不分类造成混乱时，只允许进行一级的分类。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;记录笔记时，我只分最大的一级分类，而且保持在5个以内。比如：技术类笔记统一到Programming，工作类笔记统一到Working，灵感记录，收藏备忘等等。&lt;/li&gt;
&lt;li&gt;Kindle里，我采取不分类的方式。因为同一时刻，我关注的永远是最近的1,2本书。其他的书完全可以通过搜索来找到。&lt;/li&gt;
&lt;li&gt;手机里，把常用的APP放到桌面上，不常用的就直接删了吧。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;分类太细导致新增时到底分到哪个类别要纠结很久，而且放入某个分类后，就相当于被折叠了，打开它至少需要两步操作，以后关注的也会比较少。试想把微信放到一个文件夹里，每次打开微信都要先进入一个文件夹是多么繁杂的事情。&lt;/p&gt;

&lt;p&gt;如果有个东西你不想再看到它，就把它丢到一个分类吧。当然，最好的方法是直接删掉。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>读《从0到1》</title>
            <link>http://blog.coderzh.com/2015/04/20/ZeroToOne/</link>
            <pubDate>Mon, 20 Apr 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/04/20/ZeroToOne/</guid>
            <description>

&lt;p&gt;自从入手了Kindle Paper White，现在已经习惯了在Kindle上购买图书了，已经买了好几本了。在Kindle上读书体验就是好啊，自己也变得越来越爱读书了。呵呵。&lt;/p&gt;

&lt;p&gt;利用周末和平时闲暇时间，把《从0到1:开启商业与未来的秘密》读了一遍，书中很多观点不错，耐人深思，记录一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/ZeroToOne.jpg&#34; alt=&#34;ZeroToOne&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;简介:9a56c900e23924928a82a1d8d7925594&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;硅谷创投教父、PayPal创始人作品，斯坦福大学改变未来的一堂课，为世界创造价值的商业哲学。&lt;/p&gt;

&lt;p&gt;在科技剧烈改变世界的今天，想要成功，你必须在一切发生之前研究结局。&lt;/p&gt;

&lt;p&gt;你必须找到创新的独特方式，让未来不仅仅与众不同，而且更加美好。&lt;/p&gt;

&lt;p&gt;从0到1，为自己创造无限的机会与价值！&lt;/p&gt;

&lt;h3 id=&#34;笔记摘要:9a56c900e23924928a82a1d8d7925594&#34;&gt;笔记摘要&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;成功人士总能在意想不到的地方发现价值，他们遵循的是基本原则，而非秘籍。&lt;/li&gt;
&lt;li&gt;每个垄断企业都有自己的特色，但它们通常会综合以下几个特点：专利技术、网络效应、规模经济以及品牌优势。&lt;/li&gt;
&lt;li&gt;创造全新的事物，做出10倍改进，你就可以避开竞争。&lt;/li&gt;
&lt;li&gt;世界不是静态的沙盒，获得的资源并非必须从别人那里掠夺，而应该从0到1，通过创新可以创造更多的价值。&lt;/li&gt;
&lt;li&gt;我们所在的世界不是正常的世界，而是处在幂次法则之下：一小部分公司完胜其他所有公司。&lt;/li&gt;
&lt;li&gt;质疑现有观念，从零开始重新审视自己所从事的业务。&lt;/li&gt;
&lt;li&gt;最反主流的行动不是抵制潮流，而是在潮流中不丢弃自己的独立思考。&lt;/li&gt;
&lt;li&gt;如果你想创造并获得持久的价值，不要只是跟风建立一个没有特色的企业。&lt;/li&gt;
&lt;li&gt;企业成功的原因各有不同：每个垄断企业都是靠解决一个独一无二的问题获得垄断地位；而企业失败的原因却相同：它们都无法逃脱竞争。&lt;/li&gt;
&lt;li&gt;开始创业时，首先最至关重要的的决定是和谁一起做。选合伙人就像结婚，创始人之间闹矛盾就像离婚一样令人不快。&lt;/li&gt;
&lt;li&gt;公司做的越好，首席执行官的薪酬就越少：任何情况下，有风险资本注入的初创企业的首席执行官，年薪都不应超过15万美元。&lt;/li&gt;
&lt;li&gt;公司里绝大多数矛盾都是由同事竞争同一岗位引起的。消除竞争更易于建立长久的纯粹的工作关系以外的交情。&lt;/li&gt;
&lt;li&gt;一个初创企业完美的目标市场是特定的一小群人，而且几乎没有其他竞争者与你竞争。&lt;/li&gt;
&lt;li&gt;创始人最大的危险是对自己的神话过于肯定，因而迷失了方向。对于公司，最大的危险是不再相信创始人的神话，错把不信神话当做一种智慧。&lt;/li&gt;
&lt;li&gt;奇点已经临近，我们唯有做好准备，从0到1。最重要的第一步是独立思考，只有重新认识世界，如同古人第一眼看见这个世界一样新奇，我们才能重构世界，守护未来。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上观点值得思考，可以结合BAT以及其他互联网公司的发展和现状自行脑补。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《黑客与画家》杂想</title>
            <link>http://blog.coderzh.com/2015/03/01/HackerAndPainter/</link>
            <pubDate>Sun, 01 Mar 2015 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2015/03/01/HackerAndPainter/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/hackerspainters.jpg&#34; alt=&#34;HackersAndPainters&#34; /&gt;&lt;/p&gt;

&lt;p&gt;春节前，入手了个Kindle PaperWhite。之前一直担心Pad看书已经够用了，实际用下来，发现看书还是用Kindle好。因为Kindle能让你专心看书，不易伤眼，而且续航时间很长。&lt;/p&gt;

&lt;p&gt;之前一直想读《黑客与画家》，于是春节假期用Kindle把它读完。这本书备受赞誉，里面很多观点很好，但是我读下来，高预期之后还是有些落差。&lt;/p&gt;

&lt;p&gt;首先是书名：黑客与画家。书中关于黑客与画家之间的联系描述的很少，主要总结为：程序员写代码并不是一气呵成，而是像画家一般，先画个轮（框）廓（架），再调整细（功）节（能），然后不然修（缺）缮（陷）。黑客写代码是一件有艺术的活，不是工程的活。&lt;/p&gt;

&lt;p&gt;纵观全书，内容窜起来总结为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;黑客不是搞破坏的坏人，而是很厉害有追求的程序员。&lt;/li&gt;
&lt;li&gt;作为一个黑客的我，如何理解中学时被称为书呆子（特质及形成原因）。&lt;/li&gt;
&lt;li&gt;走出社会后，如何看待这个社会（哪些话不能说）和财富（金钱≠财富，财富是创造出来的）。&lt;/li&gt;
&lt;li&gt;选择创业后，如何看待创业公司和大公司（要创业不要大公司），创业时用到很酷的技术（Lisp编程语言，运行在服务端的软件），如何管理公司（小团队），如何解决各种技术问题。&lt;/li&gt;
&lt;li&gt;成功把公司卖掉，然后感叹大公司效率低下。&lt;/li&gt;
&lt;li&gt;最后再探讨一下程序员编程语言的选择（要动态语言不要静态语言，狂吹Lisp的好）以及大胆设想了100年以后的编程语言是什么样子。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，这本书应该是一本关于&lt;strong&gt;一个小时候被称为书呆子的黑客通过使用Lisp语言创业成功的故事，中间夹杂着各种对社会问题和程序问题的看法的文集。&lt;/strong&gt;将黑客与画家类比，只是其中的一小部分观点而已。&lt;/p&gt;

&lt;p&gt;再写下去，自己都看不下去了，有点感觉在黑这本书的意思。毕竟是Paul Graham，毕竟是硅谷创业之父，书中很多的观点是耐人寻味，引发思考，而且是非常超前的。比如别人都在开发桌面软件时，他们已经看到未来是服务端的时代（当时还未出现智能手机，但有预言到手机时代），选择了一个未来都看起来很酷，设计理念在现在看起来还很超前，很难也很少人用的编程语言Lisp。可惜他写这本书的时候还没有Go语言，不知道他是否觉得Go会更先进一步呢？至少书中多种语言对比的例子里，现在的Python版本已经可以直接用lambda写上一段很简洁的版本了。&lt;/p&gt;

&lt;p&gt;因为是杂想，所以并不打算罗列书中观点。未看过书的同学还是亲自阅读体验，看过书的也可再拿来回味一番。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《xUnit Test Patterns》学习笔记7(完) - 总结</title>
            <link>http://blog.coderzh.com/2010/02/07/xUnit-Test-Patterns7-End/</link>
            <pubDate>Sun, 07 Feb 2010 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2010/02/07/xUnit-Test-Patterns7-End/</guid>
            <description>

&lt;p&gt;总体来说，这本书是不错的。后面的第二部分和第三部分，主要针对Test Smells和Test Patterns进行了更加具体的描述，主要的内容和第一部分还是基本一致的。因此，我主要的精力都花在了第一部分，对于后面的第二部分和第三部分，我是跳着看完的。后面的内容当作字典来查询会比较好，因为写的比较详细。&lt;/p&gt;

&lt;p&gt;其中有一个观点我觉得是比较新颖的，如果你分不清现在做的测试是不是属于单元测试，就请参照一下下面的吧：&lt;/p&gt;

&lt;p&gt;A test is not a unit test if:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It talks to the database.&lt;/li&gt;
&lt;li&gt;It communicates across the network.&lt;/li&gt;
&lt;li&gt;It touches the ﬁle system.&lt;/li&gt;
&lt;li&gt;It can&amp;#8217;t run correctly at the same time as any of your other unit tests.&lt;/li&gt;
&lt;li&gt;You have to do special things to your environment (such as editing conﬁg ﬁles) to run it.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在讲到代码的可测性设计时，作者提出主要从以下几个方面来提高可测性：&lt;/p&gt;

&lt;h4 id=&#34;dependency-injection:61305de2f52c04ea1a9f8a750021f1ad&#34;&gt;Dependency Injection&lt;/h4&gt;

&lt;p&gt;依赖注入，代码设计中并不依赖于具体的实现，并且运行将特定的实现注入到系统中。注入主要有三种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Parameter Injection&lt;/li&gt;
&lt;li&gt;Constructor Injection&lt;/li&gt;
&lt;li&gt;Setter Injection&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;dependency-lookup:61305de2f52c04ea1a9f8a750021f1ad&#34;&gt;Dependency Lookup&lt;/h4&gt;

&lt;p&gt;依赖查找，运行时动态查找到所依赖的具体对象。&lt;/p&gt;

&lt;h4 id=&#34;humble-object:61305de2f52c04ea1a9f8a750021f1ad&#34;&gt;Humble Object&lt;/h4&gt;

&lt;p&gt;这个名称很抽象，我的理解是在代码中提供一些接口出来，方面测试。&lt;/p&gt;

&lt;h4 id=&#34;test-hook:61305de2f52c04ea1a9f8a750021f1ad&#34;&gt;Test Hook&lt;/h4&gt;

&lt;p&gt;在代码中加入一些测试逻辑，比如，如果是测试模块，就怎么怎么样。不过，我想这种方式应该是不值得推荐的。&lt;/p&gt;

&lt;p&gt;最后，很欣慰在春节前把这本书看完了，可以说收获还是蛮大的。以后遇到什么问题，可以拿这本书当资料来查。xUnit Test Patterns的官方地址如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xunitpatterns.com/&#34;&gt;http://xunitpatterns.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以在这个地址查询到每个测试模式和相关的名称解释。&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[温馨提示]：该文章由原博客园导入而来，如排版效果不佳，请移步：&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/02/07/xUnit-Test-Patterns7-End.html&#34;&gt;http://www.cnblogs.com/coderzh/archive/2010/02/07/xUnit-Test-Patterns7-End.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《xUnit Test Patterns》学习笔记6 - Test Double</title>
            <link>http://blog.coderzh.com/2010/01/31/xUnit-Test-Patterns6-Test-Double/</link>
            <pubDate>Sun, 31 Jan 2010 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2010/01/31/xUnit-Test-Patterns6-Test-Double/</guid>
            <description>

&lt;p&gt;我不知道Test Double翻译成中文是什么，测试替身？Test Double就像是陈龙大哥电影里的替身，起到以假乱真的作用。在单元测试时，使用Test Double减少对被测对象的依赖，使得测试更加单一，同时，让测试案例执行的时间更短，运行更加稳定，同时能对SUT内部的输入输出进行验证，让测试更加彻底深入。但是，Test Double也不是万能的，Test Double不能被过度使用，因为实际交付的产品是使用实际对象的，过度使用Test Double会让测试变得越来越脱离实际。&lt;/p&gt;

&lt;p&gt;我感觉，Test Double这玩意比较适合在Java，C#等完全面向对象的语言中使用。并且需要很好的使用依赖注入(&lt;a href=&#34;http://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;Dependency injection&lt;/a&gt;)设计。如果被测系统是使用C或C++开发，使用Test Double将是一个非常困难和痛苦的事情。&lt;/p&gt;

&lt;p&gt;要理解Test Double，必须非常清楚以下几个东西的关系，本文的重点也是说明一下他们之间的关系。他们分别是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dummy Object&lt;/li&gt;
&lt;li&gt;Test Stub&lt;/li&gt;
&lt;li&gt;Test Spy&lt;/li&gt;
&lt;li&gt;Mock Object&lt;/li&gt;
&lt;li&gt;Fake Object&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_2.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_thumb.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;dummy-object:7d90771bbf1c9880ab4be082e80aca74&#34;&gt;Dummy Object&lt;/h4&gt;

&lt;p&gt;Dummy Objects泛指在测试中必须传入的对象，而传入的这些对象实际上并不会产出任何作用，仅仅是为了能够调用被测对象而必须传入的一个东西。&lt;/p&gt;

&lt;p&gt;使用Dummy Object的例子：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testInvoice_addLineItem_DO()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ﬁnal&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;QUANTITY&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Product&amp;nbsp;product&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Product(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;Dummy&amp;nbsp;Product&amp;nbsp;Name&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getUniqueNumber());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Invoice&amp;nbsp;inv&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Invoice(&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;DummyCustomer()&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;expItem&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;LineItem(inv,&amp;nbsp;product,&amp;nbsp;QUANTITY);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inv.addItemQuantity(product,&amp;nbsp;QUANTITY);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Verify&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;nbsp;lineItems&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;inv.getLineItems();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;number&amp;nbsp;of&amp;nbsp;items&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;lineItems.size(),&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;actual&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(LineItem)lineItems.get(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertLineItemsEqual(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;rdquo;&amp;rdquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;expItem,&amp;nbsp;actual);
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&#34;test-stub:7d90771bbf1c9880ab4be082e80aca74&#34;&gt;Test Stub&lt;/h4&gt;

&lt;p&gt;测试桩是用来接受SUT内部的间接输入(indirect inputs)，并返回特定的值给SUT。可以理解Test Stub是在SUT内部打的一个桩，可以按照我们的要求返回特定的内容给SUT，Test Stub的交互完全在SUT内部，因此，它不会返回内容给测试案例，也不会对SUT内部的输入进行验证。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_4.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_thumb_1.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用Test Stub的例子：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testDisplayCurrentTime_exception()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Exception&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Fixture&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;Testing&amp;nbsp;with&amp;nbsp;Doubles&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;136&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Chapter&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Using&amp;nbsp;Test&amp;nbsp;Doubles
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Deﬁne&amp;nbsp;and&amp;nbsp;instantiate&amp;nbsp;Test&amp;nbsp;Stub&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;TimeProvider&amp;nbsp;testStub&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;TimeProvider()
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;Anonymous&amp;nbsp;inner&amp;nbsp;Test&amp;nbsp;Stub&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;Calendar&amp;nbsp;getTime()&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;TimeProviderEx&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;throw&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;TimeProviderEx(&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;Sample&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;);
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instantiate&amp;nbsp;SUT&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TimeDisplay&amp;nbsp;sut&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;TimeDisplay();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sut.setTimeProvider(testStub);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&amp;nbsp;SUT&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;result&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;sut.getCurrentTimeAsHtmlFragment();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Verify&amp;nbsp;direct&amp;nbsp;output&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;expectedTimeString&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;lt;span&amp;nbsp;class=&amp;lt;/span&amp;gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;error&amp;lt;/span&amp;gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;gt;Invalid&amp;nbsp;Time&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Exception&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;expectedTimeString,&amp;nbsp;result);
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&#34;test-spy:7d90771bbf1c9880ab4be082e80aca74&#34;&gt;Test Spy&lt;/h4&gt;

&lt;p&gt;Test Spy像一个间谍，安插在了SUT内部，专门负责将SUT内部的间接输出(indirect outputs)传到外部。它的特点是将内部的间接输出返回给测试案例，由测试案例进行验证，&lt;font color=&#34;#ff0000&#34;&gt;Test Spy只负责获取内部情报，并把情报发出去，不负责验证情报的正确性&lt;/font&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_6.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_thumb_2.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用Test Spy的例子：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testRemoveFlightLogging_recordingTestStub()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Exception&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Fixture&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightDto&amp;nbsp;expectedFlightDto&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;createAnUnregFlight();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightManagementFacade&amp;nbsp;facade&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;FlightManagementFacadeImpl();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test&amp;nbsp;Double&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;AuditLogSpy&amp;nbsp;logSpy&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;AuditLogSpy();&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.setAuditLog(logSpy);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.removeFlight(expectedFlightDto.getFlightNumber());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Verify&amp;nbsp;state&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertFalse(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;ﬂight&amp;nbsp;still&amp;nbsp;exists&amp;nbsp;after&amp;nbsp;being&amp;nbsp;removed&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.ﬂightExists(&amp;nbsp;expectedFlightDto.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getFlightNumber()));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Verify&amp;nbsp;indirect&amp;nbsp;outputs&amp;nbsp;using&amp;nbsp;retrieval&amp;nbsp;interface&amp;nbsp;of&amp;nbsp;spy&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;number&amp;nbsp;of&amp;nbsp;calls&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;logSpy.getNumberOfCalls()&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;action&amp;nbsp;code&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Helper.REMOVE_FLIGHT_ACTION_CODE,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;logSpy.getActionCode()&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;helper.getTodaysDateWithoutTime(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;logSpy.getDate()&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;Helper.TEST_USER_NAME,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;logSpy.getUser()&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;detail&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expectedFlightDto.getFlightNumber(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;logSpy.getDetail()&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h4 id=&#34;mock-object:7d90771bbf1c9880ab4be082e80aca74&#34;&gt;Mock Object&lt;/h4&gt;

&lt;p&gt;Mock Object和Test Spy有类似的地方，它也是安插在SUT内部，获取到SUT内部的间接输出(indirect outputs)，不同的是，&lt;font color=&#34;#ff0000&#34;&gt;Mock Object还负责对情报(indirect outputs)进行验证&lt;/font&gt;，总部(外部的测试案例)信任Mock Object的验证结果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_8.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns6TestDouble_106E8/image_thumb_3.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mock的测试框架有很多，比如：NMock，JMock等等。如果使用Mock Object，建议使用现成的Mock框架，因为框架为我们做了很多琐碎的事情，我们只需要对Mock对象进行一些描述。比如，通常Mock框架都会使用基于行为(Behavior)的描述性调用方法，即，在调用SUT前，只需要描述Mock对象预期会接收什么参数，会执行什么操作，返回什么内容等，这样的案例更加具有可读性。比如下面使用Mock的测试案例：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testRemoveFlight_Mock()&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Exception&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Fixture&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightDto&amp;nbsp;expectedFlightDto&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;createAnonRegFlight();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Mock&amp;nbsp;conﬁguration&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;ConﬁgurableMockAuditLog&amp;nbsp;mockLog&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;ConﬁgurableMockAuditLog();
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mockLog.setExpectedLogMessage(
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;helper.getTodaysDateWithoutTime(),
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Helper.TEST_USER_NAME,
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Helper.REMOVE_FLIGHT_ACTION_CODE,
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expectedFlightDto.getFlightNumber());
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mockLog.setExpectedNumberCalls(&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Mock&amp;nbsp;installation&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightManagementFacade&amp;nbsp;facade&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;FlightManagementFacadeImpl();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.setAuditLog(mockLog);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.removeFlight(expectedFlightDto.getFlightNumber());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Verify&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertFalse(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;ﬂight&amp;nbsp;still&amp;nbsp;exists&amp;nbsp;after&amp;nbsp;being&amp;nbsp;removed&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.ﬂightExists(&amp;nbsp;expectedFlightDto.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getFlightNumber()));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mockLog.verify();
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Fake Object&lt;/p&gt;

&lt;p&gt;经常，我们会把Fake Object和Test Stub搞混，因为它们都和外部没有交互，对内部的输入输出也不进行验证。不同的是，&lt;font color=&#34;#ff0000&#34;&gt;Fake Object并不关注SUT内部的间接输入(indirect inputs)或间接输出(indirect outputs)，它仅仅是用来替代一个实际的对象，并且拥有几乎和实际对象一样的功能，保证SUT能够正常工作&lt;/font&gt;。实际对象过分依赖外部环境，Fake Object可以减少这样的依赖。需要使用Fake Object通常符合以下情形：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;实际对象还未实现出来，先用一个简单的Fake Object代替它。&lt;/li&gt;
&lt;li&gt;实际对象执行需要太长的时间&lt;/li&gt;
&lt;li&gt;实际对象在实际环境下可能会有不稳定的情况。比如，网络发送数据包，不能保证每次都能成功发送。&lt;/li&gt;
&lt;li&gt;实际对象在实际系统环境下不可用，或者很难让它变得可用。比如，使用一个依赖实际数据库的数据库访问层对象，必须安装数据库，并且进行大量的配置，才能生效。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一个使用Fake Object的例子是，将一个依赖实际数据库的数据库访问层对象替换成一个基于内存，使用Hash Table对数据进行管理的数据访问层对象，它具有和实际数据库访问层一样的接口实现。
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;InMemoryDatabase&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;implements&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;FlightDao{&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;List&amp;nbsp;airports&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Vector();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Airport&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;createAirport&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;(String&amp;nbsp;airportCode,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;name,&amp;nbsp;String&amp;nbsp;nearbyCity)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;DataException,&amp;nbsp;InvalidArgumentException&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertParamtersAreValid(&amp;nbsp;&amp;nbsp;airportCode,&amp;nbsp;name,&amp;nbsp;nearbyCity);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertAirportDoesntExist(&amp;nbsp;airportCode);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Airport&amp;nbsp;result&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Airport(getNextAirportId(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;airportCode,&amp;nbsp;name,&amp;nbsp;createCity(nearbyCity));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;airports.add(result);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;result;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Airport&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;getAirportByPrimaryKey&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;(BigDecimal&amp;nbsp;airportId)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;DataException,&amp;nbsp;InvalidArgumentException&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertAirportNotNull(airportId);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Airport&amp;nbsp;result&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&amp;nbsp;i&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;airports.iterator();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(i.hasNext())&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Airport&amp;nbsp;airport&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(Airport)&amp;nbsp;i.next();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(airport.getId().equals(airportId))&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;airport;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throw&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;DataException(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Airport&amp;nbsp;not&amp;nbsp;found:&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;airportId);
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;说了这么多，可能更加糊涂了。在实际使用时，并不需要过分在意使用的是哪种Test Double。当然，作为思考，可以想一想，以前测试过程中做的一些所谓的&amp;#8220;假的&amp;#8221;东西，到底是Dummy Object, Test Stub, Test Spy, Mock Object, 还是Fake Object呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[温馨提示]：该文章由原博客园导入而来，如排版效果不佳，请移步：&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/31/xUnit-Test-Patterns6-Test-Double.html&#34;&gt;http://www.cnblogs.com/coderzh/archive/2010/01/31/xUnit-Test-Patterns6-Test-Double.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《xUnit Test Patterns》学习笔记5 - xUnit基础</title>
            <link>http://blog.coderzh.com/2010/01/24/xUnit-Test-Patterns-5/</link>
            <pubDate>Sun, 24 Jan 2010 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2010/01/24/xUnit-Test-Patterns-5/</guid>
            <description>

&lt;p&gt;这几节我看的比较快一些，因为内容之间其实是有联系的，所以合在一起做一个笔记。6-10节主要介绍了什么是Fixture，如何保证一个Fresh Fixture，如何使用Setup，Tearndown，如何进行验证(Verify)，等等。&lt;/p&gt;

&lt;h4 id=&#34;什么是fixture:7d47d71a0d04e88834101d47d7eacb82&#34;&gt;什么是Fixture？&lt;/h4&gt;

&lt;p&gt;&lt;font color=&#34;#ff0000&#34;&gt;The test ﬁxture is everything we need to have in place to exercise the SUT.&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;从作者的英文解释来看，Fixture确实是一个比较难定义的东西，所以作者用了everything这个词。&lt;/p&gt;

&lt;h4 id=&#34;什么是fresh-fixture:7d47d71a0d04e88834101d47d7eacb82&#34;&gt;什么是Fresh Fixture？&lt;/h4&gt;

&lt;p&gt;一个测试案例一般都包含以下几个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup&lt;/li&gt;
&lt;li&gt;Exercise&lt;/li&gt;
&lt;li&gt;Verify&lt;/li&gt;
&lt;li&gt;Teardown&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fresh Fixture是指每个案例执行时，都会生成一个全新的Fixture，好处是不受其他案例的影响。避免了Interacting Tests(之前有提到的)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_2.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_thumb.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;什么是setup:7d47d71a0d04e88834101d47d7eacb82&#34;&gt;什么是Setup？&lt;/h4&gt;

&lt;p&gt;Setup是案例的准备阶段，主要有三种实现方式：In-line Fixture Setup, Delegated Setup, Implicit Setup。推荐使用的是Implicit Setup。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In-line Fixture Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;直接在测试方法内部做一些具体的Setup操作 ：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testStatus_initial()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;In-line&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Airport&amp;nbsp;departureAirport&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Airport(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Calgary&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;YYC&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Airport&amp;nbsp;destinationAirport&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Airport(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Toronto&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;YYZ&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Flight&amp;nbsp;ﬂight&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Flight(&amp;nbsp;ﬂightNumber,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;departureAirport,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;destinationAirport);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&amp;nbsp;SUT&amp;nbsp;and&amp;nbsp;verify&amp;nbsp;outcome&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(FlightState.PROPOSED,&amp;nbsp;ﬂight.getStatus());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;tearDown:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Garbage-collected&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;缺点是容易造成很多重复的代码，不易维护。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delegated Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;相比In-line Fixture Setup，将里面具体的Setup操作提取出来，作为一个公用的方法，提高了复用性。
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testGetStatus_inital()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Flight&amp;nbsp;ﬂight&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;createAnonymousFlight();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&amp;nbsp;SUT&amp;nbsp;and&amp;nbsp;verify&amp;nbsp;outcome&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(FlightState.PROPOSED,&amp;nbsp;ﬂight.getStatus());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Teardown
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Garbage-collected&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implicit Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;几乎所有的xUnit家族的框架都支持SetUp，比如，使用Google Test中指定的函数名SetUp，NUnit使用[Setup]Attribute。这种方法，不需要我们自己去调用Setup方法，框架会在创建Fresh Fixture后调用Setup。因此，我们只管实现SetUp方法。
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Airport&amp;nbsp;departureAirport;
Airport&amp;nbsp;destinationAirport;
Flight&amp;nbsp;ﬂight;
&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testGetStatus_inital()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Implicit&amp;nbsp;setup
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&amp;nbsp;SUT&amp;nbsp;and&amp;nbsp;verify&amp;nbsp;outcome&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(FlightState.PROPOSED,&amp;nbsp;ﬂight.getStatus());
}
&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;setUp()&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Exception{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;.setUp();&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;departureAirport&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Airport(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Calgary&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;YYC&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;destinationAirport&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Airport(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Toronto&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;YYZ&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;BigDecimal&amp;nbsp;ﬂightNumber&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;BigDecimal(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;999&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;ﬂight&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Flight(&amp;nbsp;ﬂightNumber&amp;nbsp;,&amp;nbsp;departureAirport,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;destinationAirport);
}
&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;什么是Teardown？&lt;/p&gt;

&lt;p&gt;为了保证每个案例都拥有一个Fresh Fixture，必须在案例的结束时做一些清理操作，这就是Teardown。和Setup一样，Teardown也有三种实现方式：In-line Fixture Teardown, Delegated Teardown, Implicit Teardown。同样，推荐使用Implicit Teardown。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_12.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_thumb_5.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;什么是Shared Fixture？&lt;/p&gt;

&lt;p&gt;多个测试方法共用一个Fixture，这时，Setup只会在第一个测试方法执行时被执行。gtest中，同时还拥有一个公共的TearDownTestCases方法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_14.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_thumb_6.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Result Verification&lt;/p&gt;

&lt;p&gt;前面说过，测试案例必须拥有Self-Checking的能力。Verification分两种：State Verification和Behavior Verification。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State Verification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;执行SUT后，验证SUT的状态：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_16.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_thumb_7.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;验证时，可以使用Build-in Assertions，比如xUnit框架提供的assertTrue, assertEquals等方法。或者Custom Assertion等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Behavior Verification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不仅仅验证SUT的状态，同时还对SUT的行为对外部因素造成的影响进行验证。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_18.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns5xUnit_D75E/image_thumb_8.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;比如下面这个例子：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testRemoveFlightLogging_recordingTestStub()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Exception&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;ﬁxture&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightDto&amp;nbsp;expectedFlightDto&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;createAnUnregFlight();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightManagementFacade&amp;nbsp;facade&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;FlightManagementFacadeImpl();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test&amp;nbsp;Double&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AuditLogSpy&amp;nbsp;logSpy&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;AuditLogSpy();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.setAuditLog(logSpy);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;exercise&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.removeFlight(expectedFlightDto.getFlightNumber());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;verify&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;number&amp;nbsp;of&amp;nbsp;calls&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;logSpy.getNumberOfCalls());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;action&amp;nbsp;code&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Helper.REMOVE_FLIGHT_ACTION_CODE,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;logSpy.getActionCode());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;helper.getTodaysDateWithoutTime(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;logSpy.getDate());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;Helper.TEST_USER_NAME,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;logSpy.getUser());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;detail&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expectedFlightDto.getFlightNumber(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;logSpy.getDetail());
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;除此之外，我们还可以使用一些Mock框架，使用基于行为的验证方式，这种方式，不需要我们显式的调用验证的方法。(Expected Behaivor Specification)
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testRemoveFlight_JMock()&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;throws&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Exception&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;ﬁxture&amp;nbsp;setup&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightDto&amp;nbsp;expectedFlightDto&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;createAnonRegFlight();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FlightManagementFacade&amp;nbsp;facade&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;FlightManagementFacadeImpl();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;mock&amp;nbsp;conﬁguration&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Mock&amp;nbsp;mockLog&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;mock(AuditLog.&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;mockLog.expects(once()).method(&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;logMessage&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;)
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.with(eq(helper.getTodaysDateWithoutTime()),
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eq(Helper.TEST_USER_NAME),
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eq(Helper.REMOVE_FLIGHT_ACTION_CODE),
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eq(expectedFlightDto.getFlightNumber()));&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;mock&amp;nbsp;installation&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.setAuditLog((AuditLog)&amp;nbsp;mockLog.proxy());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;exercise&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;facade.removeFlight(expectedFlightDto.getFlightNumber());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;verify
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;verify()&amp;nbsp;method&amp;nbsp;called&amp;nbsp;automatically&amp;nbsp;by&amp;nbsp;JMock&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;如何使测试代码变得简洁，减少重复？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expected Object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需要比较对象内部很多属性时，使用对象比较会更简单。&lt;/p&gt;

&lt;p&gt;原有案例代码：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testInvoice_addLineItem7()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;expItem&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;LineItem(inv,&amp;nbsp;product,&amp;nbsp;QUANTITY);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inv.addItemQuantity(product,&amp;nbsp;QUANTITY);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Verify&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;nbsp;lineItems&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;inv.getLineItems();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;actual&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(LineItem)lineItems.get(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(expItem.getInv(),&amp;nbsp;actual.getInv());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(expItem.getProd(),&amp;nbsp;actual.getProd());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(expItem.getQuantity(),&amp;nbsp;actual.getQuantity());
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;改进后：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;testInvoice_addLineItem8()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;expItem&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;LineItem(inv,&amp;nbsp;product,&amp;nbsp;QUANTITY);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Exercise&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inv.addItemQuantity(product,&amp;nbsp;QUANTITY);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&amp;nbsp;Verify&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;nbsp;lineItems&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;inv.getLineItems();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;actual&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(LineItem)lineItems.get(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;Item&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;,&amp;nbsp;expItem,&amp;nbsp;actual);&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Custom Assersions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需要验证的细节很多时，可以自己定义一个Assersion，隐藏掉这些细节。比如：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;assertLineItemsEqual(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;&amp;nbsp;msg,&amp;nbsp;LineItem&amp;nbsp;exp,&amp;nbsp;LineItem&amp;nbsp;act)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals&amp;nbsp;(msg&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Inv&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;&amp;nbsp;exp.getInv(),&amp;nbsp;act.getInv());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals&amp;nbsp;(msg&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Prod&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;exp.getProd(),&amp;nbsp;act.getProd());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals&amp;nbsp;(msg&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;Quan&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;exp.getQuantity(),&amp;nbsp;act.getQuantity());
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verification Methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;和Custom Asserions很像，唯一不同的是，Custom Assertion只包含验证的代码，Verification Methods同时还包含对SUT的操作。比如：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;assertInvoiceContainsOnlyThisLineItem(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Invoice&amp;nbsp;inv,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;expItem)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;List&amp;nbsp;lineItems&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;nbsp;inv.getLineItems();&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;number&amp;nbsp;of&amp;nbsp;items&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;lineItems.size(),&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;actual&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(LineItem)lineItems.get(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertLineItemsEqual(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;rdquo;&amp;rdquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,expItem,&amp;nbsp;actual);
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parameterized and Data-Driven Tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于测试逻辑一致，只是测试数据有不同的测试案例，适合使用参数化测试，或者叫数据驱动测试。比如，Google Test就很好的提供了参数化的测试，见：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2009/04/08/1431297.html&#34;&gt;玩转 Google开源C++单元测试框架Google Test系列(gtest)之四 - 参数化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过参数化，可以简化测试代码，不需要为大量不同的输入数据分别编写测试案例。&lt;/p&gt;

&lt;h4 id=&#34;avoiding-conditional-test-logic:7d47d71a0d04e88834101d47d7eacb82&#34;&gt;Avoiding Conditional Test Logic&lt;/h4&gt;

&lt;p&gt;验证时，不要使用一些条件相关的逻辑！比如，&lt;span style=&#34;color: red;&#34;&gt;不要使用if&lt;/span&gt;, loop之类的语句！下面是一个例子：&lt;/p&gt;

&lt;p&gt;使用if的情况：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #000000;&#34;&gt;List&amp;nbsp;lineItems&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;invoice.getLineItems();
&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(lineItems.size()&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;expected&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;LineItem(invoice,&amp;nbsp;product,&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;BigDecimal(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;BigDecimal(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;69.96&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;));
&amp;nbsp;&amp;nbsp;&amp;nbsp;LineItem&amp;nbsp;actItem&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(LineItem)&amp;nbsp;lineItems.get(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;invoice&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;expected,&amp;nbsp;actItem);
}&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;fail(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;Invoice&amp;nbsp;should&amp;nbsp;have&amp;nbsp;exactly&amp;nbsp;one&amp;nbsp;line&amp;nbsp;item&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;可以看出，上面的写法是不好的，验证中有逻辑判断意味着有可能案例不够单一，使得案例难以理解。因此，比较好的是改成下面的方式：
  &lt;div class=&#34;cnblogs_code&#34;&gt;&lt;div&gt;&lt;span style=&#34;color: #000000;&#34;&gt;List&amp;nbsp;lineItems&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;invoice.getLineItems();
&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;assertEquals(&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;number&amp;nbsp;of&amp;nbsp;items&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;,&amp;nbsp;lineItems.size(),&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: red;&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
LineItem&amp;nbsp;expected&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;LineItem(invoice,&amp;nbsp;product,&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;BigDecimal(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;BigDecimal(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;69.96&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;));
LineItem&amp;nbsp;actItem&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;nbsp;(LineItem)&amp;nbsp;lineItems.get(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;);
assertEquals(&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;invoice&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;,&amp;nbsp;expected,&amp;nbsp;actItem);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&#34;working-backward:7d47d71a0d04e88834101d47d7eacb82&#34;&gt;Working Backward&lt;/h4&gt;

&lt;p&gt;一个编写测试案例的小技巧或者说是习惯吧，就是&lt;span style=&#34;color: red;&#34;&gt;实现一个测试案例时，从最后一行开始写起&lt;/span&gt;，比如，先写Assertions。可以一试。&lt;/p&gt;

&lt;h4 id=&#34;using-test-driven-development-to-write-test-utility-method:7d47d71a0d04e88834101d47d7eacb82&#34;&gt;Using Test-Driven Development to Write Test Utility Method&lt;/h4&gt;

&lt;p&gt;我们经常实现一些测试用的辅助方法，这些方法在实现过程中，使用TDD的方式去实现，编写一些简单的测试案例，保证辅助方法也是正确的。也就是说，&lt;span style=&#34;color: red;&#34;&gt;测试案例代码本身也是需要被测试的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[温馨提示]：该文章由原博客园导入而来，如排版效果不佳，请移步：&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/24/xUnit-Test-Patterns-5.html&#34;&gt;http://www.cnblogs.com/coderzh/archive/2010/01/24/xUnit-Test-Patterns-5.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《xUnit Test Patterns》学习笔记4 - Principles of Test Automation</title>
            <link>http://blog.coderzh.com/2010/01/23/xUnit-Test-Patterns-4/</link>
            <pubDate>Sat, 23 Jan 2010 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2010/01/23/xUnit-Test-Patterns-4/</guid>
            <description>&lt;p&gt;自动化测试过程中，有一些基本的原则，就如同宣言(Manifesto)。由于大部分的原则在前面其实都提到的，因此，有的不做太多说明了。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Write the Tests First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Design for Testability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Use the Front Door First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;意思是说，从最外层暴露的publish方法开始测试。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Communicate Intent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;意思是说，测试案例要意图明确，这样才容易理解和维护。比如，命名时，使用Intent-Revealing Names[SBPP]。参考：&lt;a href=&#34;http://architects.dzone.com/news/intention-revealing-designs&#34;&gt;http://architects.dzone.com/news/intention-revealing-designs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Don&amp;#8217;t Modify the SUT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不要修改被测的对象。但有时需要使用一些Test Double或Fake对象时，要注意每个替代的对象都被测试。举了个例子，有X,Y,Z三个模块，X依赖于Y和Z，Y依赖于Z，测试X时，可以使用Test Double代替Y和Z，测试Y时，可以使用Test Double代替Z，但是在测试Z时，不能再把Z替换成Test Double了，因为Z就是被测对象。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Keep Tests Independent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;让测试案例独立，能够单独的执行，不依赖于别的案例。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Isolate the SUT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;让SUT独立，不依赖外部的环境。SUT往往会依赖一些外部的其他环境，比如，依赖一个外部的应用程序，依赖一个可用的http服务器等等。这使得测试变得不稳定，或者减慢了执行的速度。去除SUT依赖的方法是使用Test Double替换掉外部的因素。比如，需要http服务器，可以自己搭一个假的http服务器。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Minimize Test Overlap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最小化重复的测试。我们知道，测试案例的组合是无穷无尽的，我们不可能覆盖所有的组合。但我们可以选择最佳的组合。对被测代码的同一个条件进行重复的测试是没有多少意义的。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Minimize Untestable Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最小化不可测试的代码，方法就是，重构！&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Keep Test Logic Out of Production Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上一节提到了，不要在产品的代码里添加任何测试的逻辑。比如，像if tesing之类的判断。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Verify One Condition per Test&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;解释的过程中，有个观点比较有意思。手工测试时，通常会做一些复杂的操作，复杂的条件组合在一起，然后看是否出错。这看起来和自动化测试或单元测试完全相反了，为什么呢？这是因为，人能够在复杂的情况下去判断各种执行结果，并能够去分析其中的问题。而我们的案例其实并没有那么智能，为了让案例能够更加精确的定位问题，我们只能检查每个案例只检查一种情况。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Test Conerns Separtely&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Separation of concerns的解释见：&lt;a href=&#34;http://en.wikipedia.org/wiki/Separation_of_concerns&#34;&gt;http://en.wikipedia.org/wiki/Separation_of_concerns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里的意思大概是让测试案例做好分层，减少重复的部分，从而更加容易定位问题。&lt;/p&gt;

&lt;p&gt;原则：&lt;strong&gt;Ensure Commensurate Effort and Responsibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;编写和维护测试案例的时间，不能超过实现产品代码的时间。因此，要平衡好测试与开发的付出。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[温馨提示]：该文章由原博客园导入而来，如排版效果不佳，请移步：&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/23/xUnit-Test-Patterns-4.html&#34;&gt;http://www.cnblogs.com/coderzh/archive/2010/01/23/xUnit-Test-Patterns-4.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《xUnit Test Patterns》学习笔记系列</title>
            <link>http://blog.coderzh.com/2010/01/23/xUnit-Test-Patterns/</link>
            <pubDate>Sat, 23 Jan 2010 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2010/01/23/xUnit-Test-Patterns/</guid>
            <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/17/xUnit-Test-Patterns-1.html&#34;&gt;《xUnit Test Patterns》学习笔记1 - Test Smell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/18/xUnit-Test-Patterns-2.html&#34;&gt;《xUnit Test Patterns》学习笔记2 - Goal Of Test Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/21/xUnit-Test-Patterns-3.html&#34;&gt;《xUnit Test Patterns》学习笔记3 - Philosophy of Test Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/23/xUnit-Test-Patterns-4.html&#34;&gt;《xUnit Test Patterns》学习笔记4 - Principles of Test Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/24/xUnit-Test-Patterns-5.html&#34;&gt;《xUnit Test Patterns》学习笔记5 - xUnit基础&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/31/xUnit-Test-Patterns6-Test-Double.html&#34;&gt;《xUnit Test Patterns》学习笔记6 - Test Double&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/02/07/xUnit-Test-Patterns7-End.html&#34;&gt;《xUnit Test Patterns》学习笔记7(完) - 总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;[温馨提示]：该文章由原博客园导入而来，如排版效果不佳，请移步：&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/23/xUnit-Test-Patterns.html&#34;&gt;http://www.cnblogs.com/coderzh/archive/2010/01/23/xUnit-Test-Patterns.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《xUnit Test Patterns》学习笔记3 - Philosophy of Test Automation</title>
            <link>http://blog.coderzh.com/2010/01/21/xUnit-Test-Patterns-3/</link>
            <pubDate>Thu, 21 Jan 2010 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2010/01/21/xUnit-Test-Patterns-3/</guid>
            <description>

&lt;p&gt;这一章主要讲自动化测试的原则。前面的章节介绍了很多测试的思想，而思想的东西难免有点虚，这一章就是告诉你，遇到了具体的什么问题时，应该怎么办。作者咨询了很多的开发人员和测试人员，同时也和Martin Fowler就自动化测试的一些原则问题进行了交流，有些是显而易见的，有些又是让人把握不定。因此，这章主要讨论了以下几个问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test First or Last?2.  Tests or Examples?3.  Test-by-Test or Test All-at-Once?4.  Outside-In or Inside-Out?5.  State or Behavior Verification?6.  Fixture Design Upfront or Test-by-Test?&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;test-first-or-last:f0ac2162b36dda0c0053a43471ef317a&#34;&gt;Test First or Last?&lt;/h4&gt;

&lt;p&gt;是应该先写代码还是先写测试案例？作者认为应该先写测试案例，然后再写代码。这也是测试驱动开发和敏捷测试的一个重要原则。这样做的原因有很多，比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对一个已完成或旧的代码编写测试案例，比在代码完成前编写测试案例难的多。（面对一个庞大的已完成的系统时，确实会让人无从下手）2.  先写测试案例，可以极大的增强代码的可测性。使得后面编写的代码，天生就具备可测试的能力，因为测试案例已经早于它写好了。3.  先写测试案例，可以对后面的编码起到约束作用，避免编码时添加一些臃肿的、根本就不会用到的函数，使得代码看起来更加精简。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;个人感受：&lt;/p&gt;

&lt;p&gt;先编写测试案例再写代码，的确有很多好处。但是发现真正这样做的人很少，一方面，对于传统的软件开发公司，要做出一些改变确实有些困难。一方面，先编写测试案例带来的好处并不是立竿见影，很多人尝试了一下就放弃了。因此，需要不断的实践，坚持。(我也要努力了)&lt;/p&gt;

&lt;h4 id=&#34;tests-or-examples:f0ac2162b36dda0c0053a43471ef317a&#34;&gt;Tests or Examples?&lt;/h4&gt;

&lt;p&gt;这一段，说实话，没看懂在讨论什么问题。只看出在表达一个观点，测试案例相对于文档。同时，还提出一个名词：EDD（example-driven development），但后又提到EDD的框架，如RSpec，JBehave，让我有点摸不着头脑，据我说知，RSpec，JBehave应该是BDD框架才对。&lt;/p&gt;

&lt;p&gt;作者最后的观点：Tests are examples.&lt;/p&gt;

&lt;h4 id=&#34;test-by-test-or-test-all-at-once:f0ac2162b36dda0c0053a43471ef317a&#34;&gt;Test-by-Test or Test All-at-Once?&lt;/h4&gt;

&lt;p&gt;到底是应该写一个测试案例，写一段代码呢，还是应该先把测试案例都写好，再写代码？这个问题比较有意思，因为这是一个非常实际的问题。迭代开发(incremental development)中，有一句话：Test a bit, code a bit, test a bit more。当然，这样的做法是比较理想的，因为这样能够更加准确的定位到代码的问题。但是，作者提到，一个更好的办法，是先列一个提纲，把测试案例的函数都填好，里面的实现为空。然后，每次填充一个测试案例，写一段代码。&lt;/p&gt;

&lt;p&gt;我的观点：&lt;/p&gt;

&lt;p&gt;和作者一样。比如，在需要编写一个类前，先假设自己就是代码的调用者，把Test Fixture中的测试案例罗列一下，然后再逐个完成测试案例。每编写完一个测试案例，就把相应的代码实现一下。&lt;/p&gt;

&lt;h4 id=&#34;outside-in-or-inside-out:f0ac2162b36dda0c0053a43471ef317a&#34;&gt;Outside-In or Inside-Out?&lt;/h4&gt;

&lt;p&gt;通常，模块之间会有一些依赖和层次结构，应该从最外层的调用模块开始写案例呢，还是从最里层开始写案例呢？作者的观点是从外到里。&lt;/p&gt;

&lt;p&gt;先看下从里到外的情形：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns3PhilosophyofTestAutoma_12F0A/image_2.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns3PhilosophyofTestAutoma_12F0A/image_thumb.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上图，从里到外的开发过程更像传统的开发过程，容易理解，实施起来相对简单。但是，这样的顺序有个缺点，就是上层的SUT必须依赖于已经实现的底层的SUT。如果两个模块是不同的人开发的，上层模块的开发必须等底层模块的开发编写完成才能开始工作。同时，最底层的SUT先实现的话，有可能会过度设计，设计出一些上层模块根本就不使用的一些特性。最终使得整个程序的可测性降低。因此，从外向里的过程会好一些：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns3PhilosophyofTestAutoma_12F0A/image_4.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns3PhilosophyofTestAutoma_12F0A/image_thumb_1.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先编写最外层的测试案例，可以使用Test Double对象替代被调用的底层模块，使得SUT天然就具备很好的可测性（依赖注入）。同时，由于时刻都是保持&amp;#8220;从用户或调用者的角度去思考&amp;#8221;，使得SUT对象实现起来目标更加明确，实现的更加精简，从而避免了过度的设计。&lt;/p&gt;

&lt;h4 id=&#34;state-or-behavior-verification:f0ac2162b36dda0c0053a43471ef317a&#34;&gt;State or Behavior Verification?&lt;/h4&gt;

&lt;p&gt;提出的问题是，应该使用基于状态的验证，还是基于行为的验证？基于状态的验证是指在调用SUT后只检查SUT的状态，比如返回值，比如一个求和函数，最后检查一下求和的结果是否正确。而基于行为的验证，通常是，SUT被调用后，不仅仅改变SUT的状态，还会产生其他影响。比如，一个用户注册的函数，除了要检查返回值是否注册成功，还要坚持数据库中是否写入了新的用户记录。BDD(behavior-driven development)，就是基于行为的验证方式。作者最后说，他主要使用基于状态的验证，但有时为了追求代码覆盖率，会使用基于行为的验证。&lt;/p&gt;

&lt;p&gt;我的理解：&lt;/p&gt;

&lt;p&gt;对于功能单一，简单，设计良好的代码，使用State Verification确实已经足够。但往往真实的系统是很复杂的，模块之间互相调用，单个函数的功能可能也不是那么单一。基于行为的测试，其实就是站在了用户的角度，去验证各种行为所产生的各种影响。&lt;/p&gt;

&lt;h4 id=&#34;fixture-design-upfront-or-test-by-test:f0ac2162b36dda0c0053a43471ef317a&#34;&gt;Fixture Design Upfront or Test-by-Test?&lt;/h4&gt;

&lt;p&gt;Fixture是某一类案例的集合，一种观点是，让很多案例都共享一个Fixture，每个测试案例的方法执行时都会创建一个新的Fixture实例，并在案例前执行其中的SetUp方法。另一种观点是，前一个观点的做法，会让案例看起来不那么清晰，不容易找到一个测试案例的方法到底会执行哪些SetUp或TearDown的方法。因此，提出了在每个测试案例方法中，使用自定义的Minimal Fixture，而不是使用一个大的，不容易找到或理解的Fixture。&lt;/p&gt;

&lt;p&gt;我的感受：&lt;/p&gt;

&lt;p&gt;这一点我也有感受，我也发现我写的一些测试案例，都喜欢让很多Test Class继承一个基类Fixture，在里面定义SetUp和TearnDown，同时，子类中，还可以添加额外方法执行一些准备和清理的操作。这样，使得我的测试案例看起来并不清晰，因为很难从我的测试案例的函数中看出，我到底在SetUp里做了些什么，以及执行了哪些SetUp操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[温馨提示]：该文章由原博客园导入而来，如排版效果不佳，请移步：&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/21/xUnit-Test-Patterns-3.html&#34;&gt;http://www.cnblogs.com/coderzh/archive/2010/01/21/xUnit-Test-Patterns-3.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>《xUnit Test Patterns》学习笔记2 - Goal Of Test Automation</title>
            <link>http://blog.coderzh.com/2010/01/18/xUnit-Test-Patterns-2/</link>
            <pubDate>Mon, 18 Jan 2010 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://blog.coderzh.com/2010/01/18/xUnit-Test-Patterns-2/</guid>
            <description>

&lt;p&gt;或许有人觉得单元测试可有可无，因为觉得需要付出太多的精力，而客户并不需要它。这就涉及到投资回报率的问题，其实所付出的用于测试的投资，往往会收获到更多回报。它让我们减少了Bug的数量，减少了调试代码寻找Bug的时间。看下图，有效的自动化测试投资下，测试和开发付出的努力的时间图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns2GoalOfTestAutomation_FF5C/image_2.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns2GoalOfTestAutomation_FF5C/image_thumb.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;初期，随着测试的介入，开发付出的投入逐渐减少。后期，随着测试案例的完善和自动化，测试和开发所需要付出的投入都减少到一个很低的水平。阴影部分是节省的开发投入。&lt;/p&gt;

&lt;p&gt;同时，如果自动化测试做的不好，在后期，将可能加大测试和开发的负担：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns2GoalOfTestAutomation_FF5C/image_6.png&#34;&gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/coderzh/WindowsLiveWriter/xUnitTestPatterns2GoalOfTestAutomation_FF5C/image_thumb_2.png&#34; alt=&#34;image&#34; title=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;自动化测试的目标:37286d7576f0ac1ddfe739b00d492425&#34;&gt;自动化测试的目标&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Tests should help us improve quality.&lt;/li&gt;
&lt;li&gt;Tests should help us understand the SUT.&lt;/li&gt;
&lt;li&gt;Tests should reduce (and not introduce) risk.&lt;/li&gt;
&lt;li&gt;Tests should be easy to run.&lt;/li&gt;
&lt;li&gt;Tests should be easy to write and maintain.&lt;/li&gt;
&lt;li&gt;Tests should require minimal maintenance as the system evolves around them.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;tests-should-help-us-improve-quality:37286d7576f0ac1ddfe739b00d492425&#34;&gt;Tests should help us improve quality&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Tests as Specification 测试案例可以验证产品的行为，验证是否&amp;#8220;building the right software&amp;#8221;&lt;/li&gt;
&lt;li&gt;Bug Repellent 自动化测试的主要目的不是发现Bug，而是预防或防止Bug的出现。&lt;/li&gt;
&lt;li&gt;Defect Localization 顶层的customer tests只会告诉你案例失败了，unit tests会告诉你为什么失败了，能定位到具体的问题。如果customer tests失败了而所有的unit tests却通过的话，说明单元测试案例缺失了。(Missing Unit Test)&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;tests-should-help-us-understand-the-sut:37286d7576f0ac1ddfe739b00d492425&#34;&gt;Tests should help us understand the SUT&lt;/h4&gt;

&lt;p&gt;测试案例是非常好的文档，它告诉了你SUT做了些什么。同时，它还让你可以直接调试测试案例，单步跟踪，去了解整个系统是如何运作的。&lt;/p&gt;

&lt;h4 id=&#34;tests-should-reduce-and-not-introduce-risk:37286d7576f0ac1ddfe739b00d492425&#34;&gt;Tests should reduce (and not introduce) risk&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Tests as Safety Net 测试案例应该成为修改代码安全的保障，让我们在重构旧代码时能够大刀阔斧，而不必担心会破坏什么。&lt;/li&gt;
&lt;li&gt;Do No Harm 测试案例不能对产品造成影响，一个重要的原则是，不要修改SUT。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;tests-should-be-easy-to-run:37286d7576f0ac1ddfe739b00d492425&#34;&gt;Tests should be easy to run&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Fully Automated Test 完全自动化&lt;/li&gt;
&lt;li&gt;Self-Checking Test 能够自我检查，说白了就是不需要人工去检查案例执行的结果对不对&lt;/li&gt;
&lt;li&gt;Repeatable Test 需要具备可重复性。鼓励开发人员在每一次按下保存按钮时都执行一次测试案例(我没事就喜欢Ctrl+S)。案例需要具备可重复性，必须具备自我清理能力(self-cleaning)，通常，是在Test Fixture的TearDown中进行环境的清理。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;tests-should-be-easy-to-write-and-maintain:37286d7576f0ac1ddfe739b00d492425&#34;&gt;Tests should be easy to write and maintain&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Simple Tests 一个首要的原则是，让测试案例尽量的简单，使得其更容易维护。一次只测一种条件（Verify One Condition per Test）&lt;/li&gt;
&lt;li&gt;Expressive Tests 测试案例要达到表达清晰的目的，比如，可以使用一些Creation Mehods和Custom Assertion。有点像BDD。&lt;/li&gt;
&lt;li&gt;Separation of Concerns 测试案例要尽量测试单一，独立的功能，不要依赖过多。往往需要前期就介入参与产品的可测性设计(design for testability)。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;tests-should-require-minimal-maintenance-as-the-system-evolves-around-them:37286d7576f0ac1ddfe739b00d492425&#34;&gt;Tests should require minimal maintenance as the system evolves around them&lt;/h4&gt;

&lt;p&gt;测试案例需要最小化维护的工作，因此，我们需要编写健壮的测试案例(Robust Test)。&lt;/p&gt;

&lt;h3 id=&#34;toc_7:37286d7576f0ac1ddfe739b00d492425&#34;&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/h3&gt;

&lt;p&gt;这章讲的是测试的目标，保持案例简单，稳定，容易维护的声音似乎总是在不停的重复着，是不是有点烦了？也许作者就是希望通过这种不停的唠叨，让我们真正记住、接受，并最终体会和感悟到这些东西给我们带来的好处吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[温馨提示]：该文章由原博客园导入而来，如排版效果不佳，请移步：&lt;a href=&#34;http://www.cnblogs.com/coderzh/archive/2010/01/18/xUnit-Test-Patterns-2.html&#34;&gt;http://www.cnblogs.com/coderzh/archive/2010/01/18/xUnit-Test-Patterns-2.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
