<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CoderZh Blog on CoderZh Blog</title>
        <link>https://blog.coderzh.com/feed.xml</link>
        <language>zh-CN</language>
        <author>CoderZh</author>
        <rights>Copyright (c) 2015, CoderZh; all rights reserved.</rights>
        <updated>Sun, 25 Feb 2018 00:15:00 CST</updated>
        
        <item>
            <title>我的 2017</title>
            <link>https://blog.coderzh.com/2018/02/25/my-2017/</link>
            <pubDate>Sun, 25 Feb 2018 00:15:00 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2018/02/25/my-2017/</guid>
            <description>

&lt;p&gt;2017 总结：写了一篇博客，发了一篇公众号。完。&lt;/p&gt;

&lt;p&gt;为什么写的少了，如果说因为带娃太忙没有时间，都是借口，时间挤一挤总会有的。这一年，我看了一些书，学了一些东西，做了一些决定，每次想写点东西又不知为何总是没有做到。也许是懒了，也许是浮躁了，因为写东西太花时间了。我写作速度不快，简单的几句话总是要反复斟酌。所以想着还不如把时间用来学习更深入的东西，写更多的代码。结果也看到了，深入的东西没有学到多少，代码没写多少，同时，文章也一篇没有写。&lt;/p&gt;

&lt;p&gt;所以看来，把写作的时间腾出来学习对我来说是个伪命题。最近在看《快速阅读术》，里面就提到了『呼吸』式阅读，即不能只看（吸气），还要写下来（呼气），这样能减轻阅读的负担，还能帮助吸收理解。所以，希望之后我能尽量多写吧，就算写的内容对别人没什么帮助，至少可以写给自己。&lt;/p&gt;

&lt;h3 id=&#34;读书&#34;&gt;读书&lt;/h3&gt;

&lt;p&gt;这一年，我买了好多纸质书，已经堆满了我的桌子。主要是技术类的书籍：《Hadoop权威指南》（影印版，没看），人工智能类书籍：《神经网络与深度学习》、《TensorFlow实战》、《图解机器学习》、《程序员的数学1,2,3》、《高等数学上下册》、《深度学习》、《机器学习》（西瓜书），编程语言类：《Go语言实战》、《Kotlin实战》、《Javasript权威指南》，游戏渲染相关：《WebGL编程指南》、《OpenGL ES 3.0编程指南》、《OpenGL超级宝典》、《OpenGL编程指南》&lt;/p&gt;

&lt;p&gt;首先说说人工智能，自 AlphaGO 先后击败人类顶级围棋选手李世石、柯洁，可以说 AI 大热。整个业界、整个公司都掀起了一股学习 AI 的热潮。为了搞清楚机器学习、深度学习到底是个什么东西，我投入了不少的精力，最后我觉得也算是简单的入门了，更高深的就不敢说。&lt;/p&gt;

&lt;p&gt;从零开始学习机器学习，一开始我感到很吃力。大家都知道学习一门编程语言时，都会先学习 Hello World 怎么写。最让人受打击的是，一开始学习的房价预测这个 HelloWord 级别的线性模型时，就让我倍感吃力。突然感觉数学知识不够用了，然后找来《高等数学》把卡住的几个概念温习了一遍，然后在脑子里不停的想那个梯度下降到底是个什么东西。我又找来 Andrew Ng 的视频，然后继续想这个东西的本质是什么。&lt;/p&gt;

&lt;p&gt;某天突然就想明白了，就是设计了一个模型，然后通过求导，不断迭代，将预期值和实际值的误差降到最小，然后把模型的参数计算出来的一个过程。而且，如果你使用 TensorFlow 之类的框架的话，甚至求导和梯度下降都不需要你来做了，直接一个 API 搞定了。之后深度学习相关的一些模型、CNN、聚类算法等等，也有了概念性的直观理解。知道大概是怎么回事，虽然没有太多的动手实践。然后发现，原来写个手写数字识别的程序也是这么简单的事情。最后我极力推荐李宏毅老师关于 Deep Learning 的课程，去 YouTube 搜下就有了。这是我看过的讲的最生动、最通俗易懂，同时讲的也很透彻的课程了（嗯，不用谢）。&lt;/p&gt;

&lt;p&gt;17 年底，微信上线了『小游戏』。为了职业生涯的转型，我突击了一下游戏渲染相关的知识。之前做游戏开发时，主要做的是游戏逻辑、UI、后台相关的开发，对渲染引擎这块感觉专业性太强，有点敬而远之。这次沉下心来学习，感觉自己的知识体系又打开了一扇门。&lt;/p&gt;

&lt;p&gt;除了技术类的书，我都首选看电子版了。主要是在微信读书和 Kindle 上看。读过的有印象的书罗列一下：《腾讯传》、《如何高效学习》、《教父》三部曲、《摩根写为儿子的32封信》、《人民的名义》、《刻意练习》、《富爸爸穷爸爸》、《股票大作手回忆录》、《从20万到30亿：特朗普自传》 等等。&lt;/p&gt;

&lt;p&gt;印象最深刻的是《教父》和《富爸爸穷爸爸》。教父讲的其实是一个在外打拼，为了给家里人更好生活，但被形势所迫，一步一步成为黑帮老大的故事。它讲的其实是作为男人对家庭的责任感。教父不管在外面要忍受什么，做多么危险的事，在家时从不在家人面前讨论工（砍）作（人）。他所做的一切，都是为了保护他的家人。反复刷教父电影三部曲还不过瘾，又拿书来刷。惊喜的是书里的第二部和第三部是另外单独的故事，特别是第二部关于吉利安诺的故事。印象最深的是他被枪击后顿悟的那段，特别的精彩，很好奇为啥没有拍成电影。&lt;/p&gt;

&lt;p&gt;《富爸爸穷爸爸》也是很老的书了，看完之后才发现我就是书里提到的财商很低的人啊。原来谈钱并不是那么让人羞耻的事情，特别是程序员，跳槽谈钱时，总是感觉扭扭捏捏难为情，其实大可不必。首先我们要端正对钱的态度，我们追求金钱，是为了改善和保障家人的生活。其次，我们要学习怎样赚钱，怎样让钱为我工作，而不是我为钱工作，最终走上快车道，实现财务自由。这本书早在 2000 年左右就出了，如果当时就看了并且砸锅卖铁投资房地产，现在不就发了吗。当然，开始投资从来都不晚，机会到处都是，就看你能不能看准了。&lt;/p&gt;

&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;

&lt;p&gt;2017 年我在 GitHub 上的代码提交次数只有 30 几次，可以忽略不计了。这里特别要提下 Go 的静态网站生成器 Hugo，从我最早使用时的 v0.1 几版本，到现在已经到了 v0.36 版本。开源社区的项目就像一个大轮子，单位时间内虽然不是速度最快，但是不断有人参与进来推动轮子前进，不知不觉之间，已经前进了很多很多。新版本不断在改进完善，旧的过时功能不断被修正和删除，以至于之前我写的几个主题被迫进行了几次升级，以支持新版的 Hugo。&lt;/p&gt;

&lt;p&gt;就在我兴致勃勃打算写这篇文章时，才发现使用最新版 Hugo 生成我的博客页面时，所有文章列表相关的页面都生成不出来了。于是我用了一个晚上的时间去查原因，看 Hugo 的更新文档，最后解决好之后已然夜深人静了。&lt;/p&gt;

&lt;p&gt;之前我在用 Cocos2d-x 写游戏时也有这种感悟。某天突然心血来潮想写个小游戏玩玩，然后发现 Cocos2d-x 又更新了好几个版本，加了好多内容。等我更新完 SDK，看过更新的内容之后，写游戏这件事本身却被抛在了脑后。等哪天突然又想起来，发现 SDK 又更新了，周而复始。我写游戏的速度，已经赶不上游戏引擎更新的速度了。&lt;/p&gt;

&lt;p&gt;所以，我的一个感悟是，这个世界正在以你难以想象的速度在向前发展，不管你看得见还是看不见。所以你一定要保持前进，保持进步，不然等你回过神来，会发现已经被远远的抛在后面。&lt;/p&gt;

&lt;h3 id=&#34;重点&#34;&gt;重点&lt;/h3&gt;

&lt;p&gt;没错，前面说的都不重要。保持身体健康，心情愉快，家庭和谐才是最重要的。所以，2018 年的一个小目标是：坚持锻炼身体。对了，去年买的佳明 Forerunner 235 手表不知道放哪里去了，我要去找找了，再见。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>我的 2016</title>
            <link>https://blog.coderzh.com/2017/01/01/my-2016/</link>
            <pubDate>Sun, 01 Jan 2017 00:00:00 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2017/01/01/my-2016/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/baseball.JPG&#34; alt=&#34;baseball&#34; /&gt;&lt;/p&gt;

&lt;p&gt;光阴似箭，岁月如梭，仿佛去年写「我的 2015」就在昨日，然而时间的确在滴滴答答中度过了 365 天。这一年里，经历了一些事，读了一些书，努力过，收获过，感恩 2016。&lt;/p&gt;

&lt;h4 id=&#34;公众号&#34;&gt;公众号&lt;/h4&gt;

&lt;p&gt;其中一个变化是，我的公众号（博客）的更新频率越来越低了。2016 年我总共写了 20 多篇文章，平均算下来，2 周才有 1 篇。相比去年的 1 周 1 篇少了不少。&lt;/p&gt;

&lt;p&gt;这其中有几个原因，首先，工作占据了我更多的时间。有的时候为了解决问题，不可避免的把工作带回了家。其次，随着小孩的长大，周末需要花更多的时间带小孩，陪家人。第三，见识了越多优秀的人，越发现自己的无知，与其为了 1 周 凑上 1 篇，还不如多沉下心学习，做些更深入的研究，多读点书，多写点代码，多存点干货再来分享。第四，还是因为懒。&lt;/p&gt;

&lt;h4 id=&#34;读书&#34;&gt;读书&lt;/h4&gt;

&lt;p&gt;2016 年，我读了以下书：《必然》、《MacTalk 跨越边界》、《7 Eleven零售的哲学》、《改变未来的九大算法》、《重来》、《马克·扎克伯格传》、《硅谷钢铁侠：埃隆·马斯克》、《途客圈创业记》、《福特自传》、《人类简史：从动物到上帝》、《Google 重新定义公司》、《Android 软件安全与逆向分析》、《第二次机器革命》、《接纳不完美的自己》、《黑客》、《成为乔布斯》……&lt;/p&gt;

&lt;p&gt;其中的《人类简史》开阔了我的思维认识，也是张小龙极力推荐的。但对我的思维改变最大的，是《接纳不完美的自己》这本书。书中提到一个形象的比喻：每个人刚出生时内心都有一座很大的城堡，城堡里有很多的房间，各式各样的房间，每个房间代表一种特质，比如：善良、勇敢、正直、激情，当然也包括了：自私、胆小、愚蠢，奸诈等不好的特质。开始每扇门都是对外敞开的。随着慢慢的长大，你去了别人的城堡，发现有些不好的特质是别人没有的（或许是被藏起来了），于是你把不好特质的门锁上，不让别人进去，甚至是自己。慢慢的，越来越多的门被锁上，偌大的一座城堡，最后你只能在很少的房间活动。&lt;/p&gt;

&lt;p&gt;那些被锁上的房间，正是不完美的自己。有些人选择把锁住的房间遗忘，而一旦发现别人表现出不好的特质，则会异常的激动和排斥。比如，你认为某个人非常的小气，甚至为此感到不齿，其实恰恰说明了你自己正是一个小气之人。因为你害怕别人说你小气，于是小气之门被你严严锁死，一旦你发现某个人表现出小气的特质时，你就会异常的激动，拼命的表现出不齿的感觉以和小气撇清关系。&lt;/p&gt;

&lt;p&gt;所以，接纳不完美的自己，第一步是把自己内心深处的房间打开。每当你觉得别人怎么怎么样时，你越是激动，越要想一想，我是不是越是一样，只是我把门锁上了(直白一点：你越认为别人笨，其实越是你笨。你越是认为别人心机婊，其实你越是心机婊)。于是你会对别人的缺点更加宽容，也能更好的反思自我。第二步是必要时利用你的缺点。比如有人要非法拆迁你的房子，你是不是表现的无赖一些反而会更好。&lt;/p&gt;

&lt;h4 id=&#34;代码&#34;&gt;代码&lt;/h4&gt;

&lt;p&gt;写代码依然是一件非常有意思的事情。2016 年的一个重大变化是，我的开发环境已经全面转向了 Mac。我深刻的感受到了《成为乔布斯》书中提到的乔布斯对艺术和美的追求。一句话：用更好看的 Mac，写代码不折腾。&lt;/p&gt;

&lt;p&gt;编程语言方面，Go 和 Swift 走马观花了一下，node.js 有初步涉及。主力语言还是 Python 和 C++，有时也会被老板用枪指着写点 Java。&lt;/p&gt;

&lt;p&gt;机器学习粗浅了解，还未入门，来年要加大学习投入。&lt;/p&gt;

&lt;p&gt;从 GitHub 统计的我过去一年的贡献活跃度可以看出，下半年开始，我变得非常的不活跃，来年争取填满更多的格子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/github2016.png&#34; alt=&#34;github2016&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;工作&#34;&gt;工作&lt;/h4&gt;

&lt;p&gt;依然认为是最棒的公司。来年继续加油。&lt;/p&gt;

&lt;h4 id=&#34;不足&#34;&gt;不足&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;公众号（博客）写少了。&lt;/li&gt;
&lt;li&gt;GitHub 代码写少了。&lt;/li&gt;
&lt;li&gt;运动少了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;展望&#34;&gt;展望&lt;/h4&gt;

&lt;p&gt;好的习惯继续发扬，不足要改掉，健身的重要性要提高一个 Level。&lt;/p&gt;

&lt;h4 id=&#34;最后&#34;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢你们！如此低的更新频率下还没有退订，感谢！Happy 2017!&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>真正的黑客</title>
            <link>https://blog.coderzh.com/2016/10/16/real-hacker/</link>
            <pubDate>Sun, 16 Oct 2016 21:55:45 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/10/16/real-hacker/</guid>
            <description>&lt;p&gt;当听到「黑客」一词时，你的第一反应是什么？是行为古怪，专门通过计算机干坏事的坏蛋，还是深藏不漏令人敬仰的技术大神。我们从小形成的固有观点认为，黑客等同于坏蛋，是具有贬义的。但在《黑客与画家》一书中，作者认为黑客是被称为书呆子，技术出众而且富有创造力，做着改变世界的一群人。&lt;/p&gt;

&lt;p&gt;如果想更深入了解「黑客」一词的起源，就得从《黑客》这本书看起。《黑客》一书中，绘声绘色的描述了世界上第一批黑客的诞生，他们从哪里来，具备什么特点，他们想干些什么。&lt;/p&gt;

&lt;p&gt;第一批真正的黑客，出现在 20 世纪 50~60 年代的 MIT。在那个年代，计算机还是价值数百万美元的庞然大物。IBM 704 需要占据整整一间房子，始终由一队专业的机器操作员看管，需要专用的空调，以免机器内部过热而烧坏。所以，计算机是极其稀缺的资源，每个人只能轮流安排有限的时间上机。MIT 的黑客们对计算机有种天生的狂热，他们为了有更多的上机时间，在机房蹲守，尽可能占用那些没来的同学的上机时间。一到深夜，他们撬开机房的锁，尽情的使用计算机。&lt;/p&gt;

&lt;p&gt;既然计算机资源如此珍贵，大家都认为应该让计算机干一些高大上的事情。但 MIT 的黑客们完全不吃这一套。彼得·萨姆森整晚都在编写一个即时将阿拉伯数字转换成罗马数字的程序，别人很难理解这有什么意义。萨姆森彻夜编写能演奏音乐的程序，别人不能理解，为什么要用这台 300 万美元的机器，去完成一个价值 5 美元的玩具钢琴就能完成的小事。&lt;/p&gt;

&lt;p&gt;从 IBM 704 到 TX-0 再到 PDP-1、PDP-6，他们追求用最少的汇编语句实现功能，他们称之为「正确答案」。他们擅自拆开价值昂贵的计算机，将指令解码器 add 线和 store 线的二极管相连，只为给计算机增加一条新的「累加至内存」的汇编指令，而当时哪怕私自更换打字机的墨带也会被永远的驱逐出去。&lt;/p&gt;

&lt;p&gt;他们研究高精尖的 AI 领域，教计算机下国际象棋。&lt;/p&gt;

&lt;p&gt;他们控制机械手臂，自动捡起抛过去的物体。&lt;/p&gt;

&lt;p&gt;他们设计制造自动打乒乓球的机器人。&lt;/p&gt;

&lt;p&gt;他们在 PDP-6 上移植了 LISP 语言。&lt;/p&gt;

&lt;p&gt;他们编写《太空大战》游戏。&lt;/p&gt;

&lt;p&gt;他们对现有的分时操作系统不满意，自己实现了不兼容分时系统（ITS）。&lt;/p&gt;

&lt;p&gt;他们痴迷于《LIFE》游戏。&lt;/p&gt;

&lt;p&gt;他们信奉的黑客道德是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对计算机的访问应该是不受限制的、完全的。任何人都有动手尝试的权利！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他们把《太空大战》游戏的纸带放在抽屉里，任何人都可以打开它，阅读代码，优化代码，修改代码，然后再放回抽屉。这个抽屉不就是现在的 github 吗？然而他们更甚，他们相信黑客道德，相信每个使用计算机的黑客都会尊重别人的成果，分享自己的代码，不会随便删除别人的代码。他们设计的 ITS 操作系统居然是没有账号密码的，任何人都可以随意访问他人的文件！&lt;/p&gt;

&lt;p&gt;他们追求完美，不擅于和妹子沟通，一名 PDP-6 黑客在将近 20 年后依旧如此评论：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;即使在今天，女性也被认为是完全难以预测的。一个黑客怎么能够容忍这样一种不完美的存在呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;别人认为他们有社交障碍，其实真相却是如大卫·塞维亚所说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对于这些人来说，似乎必须非常才华横溢，并且从某种意义上讲，他们需要在社交方面有所障碍，这样，他们才能完全集中精力做一件事情。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1972 年阿波罗 17 号登月旅行之日，高斯珀作为实验室黑客的一份子受邀来到「科学游轮」近距离观看太空飞船发射，船上挤满了科幻小说作家、未来学者、科学家、评论员。开始时，高斯珀还对此不屑一顾。当火箭发射时，能量冲击波近在咫尺时，他的衬衫紧紧贴在胸口，口袋里的零钱叮当作响，PA 系统的扬声器从观景台的托架上掉落，悬挂在电源线上摇摇晃晃。&lt;/p&gt;

&lt;p&gt;阿波罗 17 号，这艘如果没有计算机就不可能如此真实地发射的火箭直冲云霄，快速地飞向浩瀚宇宙。火箭发射的景象给高斯珀带来了深刻的影响。他看到了现实世界在下定决心之后能够创造出怎样令人赞叹的奇迹。美国宇航局并没有遵循黑客道德，但是却实现了实验室倾其所有也不可能实现的事情。从某种意义上讲，他们这些黑客在欺骗自己，使用能力有限的机器工作，但却依然尝试着实现全部的事情，让自己在这间实验室里改变整个世界。这是第一代黑客的反思。&lt;/p&gt;

&lt;p&gt;不可否认的是，他们聪明绝顶，才华横溢，他们推动了计算机的发展，最终让计算机走进了千家万户，真正的改变了世界。&lt;/p&gt;

&lt;p&gt;思考：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;我第一次接触计算机时的感受是怎样的？&lt;/li&gt;
&lt;li&gt;我把编程视为狂热的爱好，还是仅仅为了谋求一份工作？&lt;/li&gt;
&lt;li&gt;我们现在拥有比以往黑客都要好的计算机资源，为何做不出一件改变世界的事情？&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
        <item>
            <title>小目标</title>
            <link>https://blog.coderzh.com/2016/09/25/small-plan/</link>
            <pubDate>Sun, 25 Sep 2016 23:43:43 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/09/25/small-plan/</guid>
            <description>&lt;p&gt;两个多月没更新了，感谢一直关注的小伙伴们。&lt;/p&gt;

&lt;p&gt;上篇文章《一次 CTF 之旅》有读者评论，会不会因为学习的东西太多而每个都不精通？以我的经验来看，会的。&lt;/p&gt;

&lt;p&gt;曾经我也认为我什么都能学，什么都能做好，但是在具体某一领域，和真正的专家比起来，差距还是比较明显的。如果想成为某一方面的专家，就一定要找准一个点深入下去，在这个点上有持续的积累，你的优势才会凸显。&lt;/p&gt;

&lt;p&gt;道理都明白，但是却很难做到。&lt;/p&gt;

&lt;p&gt;因为学习是一件非常枯燥和困难的事情。只要身边有一点诱惑，就很容易打退堂鼓。&lt;/p&gt;

&lt;p&gt;其他任何一件事，看上去都比学习要容易的多：&lt;/p&gt;

&lt;p&gt;在沙发上来个葛优躺，就算发几分钟呆，也是极舒服和享受的。更不要说看个电影肥皂剧，玩个游戏。&lt;/p&gt;

&lt;p&gt;当你觉得无所事事的时候，视频、微博、微信、游戏会很轻易的填充你的时间。因为任何时间，你只要掏出手机，轻轻一点，马上就会有很强烈的感官刺激，非常及时的反馈，而时间就这样慢慢流逝了。&lt;/p&gt;

&lt;p&gt;学习的反馈非常的慢，但却是更有意义的事情。为了避免枯燥，应尽量选择自己感兴趣或擅长的领域。&lt;/p&gt;

&lt;p&gt;我们只看到大神的谈笑风生，却看不到他们曾经多少个孤独的夜晚。&lt;/p&gt;

&lt;p&gt;学习是一种自我驱动的修行。&lt;/p&gt;

&lt;p&gt;鸡汤三千，取一瓢自饮，本文仅以自勉。&lt;/p&gt;

&lt;p&gt;目标不要定的太远，先写它个小程序，实现个小目标。&lt;/p&gt;

&lt;p&gt;（开玩笑了，小目标是：每周看 10 小时书。微信读书内每周有统计，诸君共勉。）&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>一次 CTF 之旅</title>
            <link>https://blog.coderzh.com/2016/07/11/a-ctf-tour/</link>
            <pubDate>Mon, 11 Jul 2016 07:35:59 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/07/11/a-ctf-tour/</guid>
            <description>&lt;p&gt;有好几周没有发文章了，具体原因是上上周末去了团建，上周末主要在研读《Android 软件安全与逆向分析》一书。我报名参加了公司第一次 CTF 比赛，结果很幸运组队时抱上了几个大腿进了决赛。本着绝不坑队友的原则，精心准备了一把。结果最后还是坑了，我那道 Android 逆向的题还是没有做出来。虽然比赛已经结束，但心有不甘，这周末又继续搞了两天这题，代码逆向和解题思路都搞的差不多，但是似乎 Native 层的代码理解有一点点偏差。昨晚 11 点多不得已向比赛组委会出题大神请教，解题方法居然没有我想的复杂，我还是太 Naive 了。&lt;/p&gt;

&lt;p&gt;首先介绍一下什么是 CTF。&lt;/p&gt;

&lt;p&gt;CTF（Capture The Flag）夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF 起源于 1996 年 DEFCON 全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。&lt;/p&gt;

&lt;p&gt;这次是公司第一次举办 CTF 的比赛。而我在这之前，对 CTF 也是了解甚少。组织这次比赛的是公司 T5 大神所在的实验室，本着学习的态度，就尝试报了名。刚好队里缺 Android 逆向的小伙伴，所有我就专攻 Android 题，其他题交给其他的小伙伴。&lt;/p&gt;

&lt;p&gt;由于是第一次举办，采用了比较初级的「解题模式」。主要分为几类：隐写、逆向、Web、Mobile。举个隐写的例子就明白了。比如让你在一个浏览器页面里找藏在里面的 Flag，只要查看源码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;
找到第一个 Flag!
&amp;lt;!-- Flag{WelcomeToCTF} --&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;WelcomeToCTF&lt;/code&gt; 就是其中的 Flag。当然，这种属于最初级的题，更多的隐写 Flag 会藏在更深的地方，比如图片、MP3、PDF 等等文件里，你需要做各种数据抽离，找出其中的不同，最终发现写在里面的隐藏内容。&lt;/p&gt;

&lt;p&gt;对 CTF 有兴趣的同学可以自行去了解更多，这里不一一介绍了。一是我本身也专研不深，二是这次比赛我只搞了 Mobile 题。所以，接下来就只聊一聊 Mobile 题。&lt;/p&gt;

&lt;p&gt;Mobile 题主要是 Android 的逆向，Crack 破解或者是找出其中漏洞。同样举个简单的例子，比如破解一个需要序列号的 APP，通过逆向，你找到它里面判断序列号是否正确的地方，把判断条件改反，或者修改判断条件，让它永远返回 True。这样就简单的绕过了验证。&lt;/p&gt;

&lt;p&gt;而实际情况会比这种复杂的多。所以要掌握好 Android 逆向，需要了解 Android 虚拟机的原理及 Dalvik 指令集，熟悉 DEX 文件的格式及反汇编语言 smali。能读懂和理解 ARM 汇编（寄存器和各种寻址）。由于 Java 层的破解相对容易，很多 APP 会把关键功能放在 Android NDK 的 so 里。所以，分析反汇编的 so 代码也是必须要掌握的。&lt;/p&gt;

&lt;p&gt;Android 逆向主要分静态分析和动态调试。静态分析就是查看逆向的代码，找出其他的关键所在，然后修改代码，重新打包、签名，得到最终结果。动态调试是指使用工具动态调试 APP，可在运行时下断点，查看或修改寄存器的值，Dump 一段内存等等。&lt;/p&gt;

&lt;p&gt;常见的 Android 加壳过程就是通过 so 加载一个二进制文件，然后解密出真正的 DEX 文件。通过加壳，把真实的业务代码隐藏了起来，Java 层的逆向你看不到真实的业务逻辑代码，因为只有一个壳。破解的思路也很简单，动态调试 APP，运行到解密完 DEX 的地方（或者是定位到关键函数，比如加载新 DEX 的地方），将 DEX 文件所在的内存 Dump 出来，然后再去分析 Dump 出来的真实 DEX 文件。&lt;/p&gt;

&lt;p&gt;魔高一尺道高一丈。既然动态调试可以这么容易把隐藏的 DEX Dump 出来，那么反破解的方法就是加入「反调试」的逻辑。比如，不断检查 App 的 TracerID，一旦发现有人在调试它，就启动自毁程序。于是，动态调试的难度又增加了，这时候就需要用到「反反调试」。找出其中「反调试」的代码，通过静态分析，想尽一切办法绕过反调试。&lt;/p&gt;

&lt;p&gt;这其中过程说的似乎轻描淡写，实际操作起来却并非那么容易。我体验一段时间之后的感觉是，首先基础要扎实，上看得了 Java，下看得了 smali，C++，arm 汇编，其次，工具使用要熟练。已经很少有人徒手破解了，因为有很多现成的工具可用。比如：APKTool、jd-gui、IDA Pro…… 其中的 IDA Pro 堪称神器，熟练掌握 IDA Pro 几乎成功了一半（瞎说的，因为我不是很熟）。第三，要有敏锐的思路，分析出其中的关键路径，寻出破解的方法。&lt;/p&gt;

&lt;p&gt;基础方面，我恶补了《Android 软件安全与逆向分析》一书。写的确实好，讲的非常系统，入门的首选。我买的纸质书，看完的感受是看此类书还是纸质的比较好。比赛结束后又入了一本《漏洞战争》，最新出炉的安全大作，作者就是文章开头我提到的这次 CTF 组委会出题的大神。&lt;/p&gt;

&lt;p&gt;实践部分我做的就不好了，工具的不熟练使用成了我的一大瓶颈。首先是环境准备部分，我就入了一个大坑。搞 Android 逆向，使用手机真机调试是必不可少的，而且手机必须是 root 过的，同时必须准备好多个 Android API 版本的手机（因为有的题的 APK 对 API Level 有要求。）别人已经在破解调试了，而题目的 APP 在我的手机上正常跑起来却是一个问题。（汗~）&lt;/p&gt;

&lt;p&gt;当然，也是可以使用模拟器的。这又要说到我遇到的另外一个大坑，因为习惯了 Genymotion 模拟器（性能很好），然后发现动态调试使用的 android_server 在 Genymotion 里根本跑不起来。于是当初我就放弃了模拟器方案，最后在这周末的时候发现，使用 Google 原生的模拟器，选择 arm 版本的 SDK 就可以了！（哭~）&lt;/p&gt;

&lt;p&gt;当然，这都没什么。还有一个更大的坑。因为比赛我带的是我的 Mac，而破解工具大多数是在 Windows 里运行的。所以我就选择在 Mac 里装 Windows 虚拟机（VirtualBox），然后就掉坑里了。默认的 NAT 方式，虚拟机里是不能访问宿主机的，所以根本没办法进行动态调试。比赛之前我早有考虑，所以简单的切换到 Bridge 模式就可以解决。然而我还是太 Naive 了，公司里是不允许用 Bridge 方式的，使用后根本就上不了网。&lt;/p&gt;

&lt;p&gt;我不太可能把 Mac 再装个 Windows 双系统，而且我也不会那样做。最后，为了能在虚拟机里使用 IDA Pro 动态调试 Android，我折腾出如下方法：虚拟机同时设置 NAT 模式和 Host-Only 模式，NAT 模式是为了能够上网，Host-Only 模式是为了能访问宿主机器。有了 Host-Only 模式，可以访问到宿主机了，但是还是没办法直接连接到 android_server 的调试端口。&lt;/p&gt;

&lt;p&gt;原理是这样的，android_server 的调试端口 23946 是在手机上开启的，为了在 PC 上能连接这个端口，所有的教程都教你需要输入如下指令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb forward tcp:23946 tcp:23946
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即，将 PC 机上的 23946 端口的数据全部转发到手机的 23946 端口上。在虚拟机的 IDA Pro 里，我直接设置主机的 IP 和端口，是无法连接上的，因为主机只负责转发来自 127.0.0.1 的 23946 端口的数据。于是，我拿出了 nginx 杀手锏，开启了一个监听端口 23950，然后配置成自动转发到本地的 127.0.0.1:23946 上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stream {
    upstream dbg_socket {
        hash $remote_addr consistent;
        server 127.0.0.1:23946;
    }

    server {
       listen 23950;
       proxy_connect_timeout 180s;
       proxy_timeout 3600s;
       proxy_pass dbg_socket;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在 IDA Pro 里设主机的 IP 和端口 23950，it works!&lt;/p&gt;

&lt;p&gt;第一次参加 CTF 的我真是有点伤不起啊。&lt;strong&gt;如果再来一次，我会告诉自己，带上几台真机，放下你的 Mac，老老实实的带个 Windows 本子去吧。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;至于解题思路方面，需要平时多关注一些安全相关的文章，同时要有开放性的思维。&lt;/p&gt;

&lt;p&gt;这就是我这次 CTF 之旅的血泪史，虽然最后我的成绩不尽人意，但还是收获满满。主要是队友给力，通过比赛，认识了一群 Nice、聪明、激情又好学的朋友，你可以想象我的队友在刚刷出题目 5 秒钟就告诉我们解出来了吗？这就是 CTF！&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>聊聊播客</title>
            <link>https://blog.coderzh.com/2016/06/19/podcasts/</link>
            <pubDate>Sun, 19 Jun 2016 18:53:33 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/06/19/podcasts/</guid>
            <description>&lt;p&gt;播客（Podcast）已经不是什么新鲜的东西了。记得大概在 06 年左右，我经常逛博客园，当时 .NET 圈有个人开了一个独立播客，每篇文章就是一段录好的音频。我使劲回忆，各种搜索，十年前的记忆已经模糊。我只记得当时他讲的东西着实有趣，好像还是一个系列，但是关于其他的一切都已不记得了。&lt;/p&gt;

&lt;p&gt;也许那是我第一次听播客，当时我也曾天真的认为这个东西也许会和博客一样火。很显然，现在连博客都已经没落，更不要说播客了。&lt;/p&gt;

&lt;p&gt;播客这个载体有其特殊的一面，它只有音频，意味着你只能听，还得认认真真听，不然可能错过某个细节。这时，你的眼睛也许会变得呆滞，手脚也不知道该如何安置，因为所有的一切只需要一双耳朵和集中注意力的大脑。于是，播客只适合于某些特定的场合。比如你的其他器官在休息时（坐车），或在做机械运动时（散步、跑步）。&lt;/p&gt;

&lt;p&gt;播客相对来说比较小众，以至于很多人都不知道 iPhone 里就自带了播客（Podcast）客户端。我一直认为，&lt;strong&gt;小众软件可以改变世界，它一定具备某种特质，能够吸引喜欢它的人，并且拥有非常高的忠诚度。这种特质之所以未被大众所接受，是因为它还不够平庸，甚至需要很多门槛&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;听播客的门槛就是每天会花很多时间在路上。为了利用路途的时间，有的人刷微信，有的人戴上耳机，听音乐，看视频，有的人会选择听播客。&lt;/p&gt;

&lt;p&gt;我就是选择听播客的那一个。有了播客，漫长的车程变得不再无聊，相反，在闭目养神之间还能听到很多有趣的故事，学习很多有意思的知识。&lt;/p&gt;

&lt;p&gt;播客本身已经很小众，而程序员的播客节目就显得更小众了。但是，这丝毫没有妨碍它的有趣。国外的技术类播客比国内的发展的要好，通过听国外的播客节目学习英语也是不错的方式。而中文的技术类播客中，《内核恐慌》和《TeaHour》是我最喜欢的节目。&lt;/p&gt;

&lt;p&gt;《内核恐慌》是一个专门为程序员定制的播客节目，话题涉及编程语言、键盘、字体、编辑器、前沿技术、科技新闻等程序员感兴趣的话题。主持人 Rio 和吴涛特别能侃，每一期节目我都听过，「号称 hardcore，但也没什么干货，想听的人听，不想听的人就不要听」，节目完全随性子，经常聊了 1 个小时发现还未进入正题，但往往能抓住程序员感兴趣的点。这有点像我写文章，有时候把标题写好，本想先写个铺垫，结果写着写着就写成了正文，于是标题一改就发出去了，就是这么随性。&lt;/p&gt;

&lt;p&gt;内核恐慌早期有些节目比较精彩，近期更新越来越慢，不过也是可以理解的，毕竟两位主持人是利用业余时间来做的这个节目，想持续保持高质量的内容是非常的困难的。我会持续关注，希望后面有更多的惊喜。&lt;/p&gt;

&lt;p&gt;对了，通过节目了解到吴涛是我的校友（中南大学），应该大我 1，2届，呵呵，又暴露年龄了。&lt;/p&gt;

&lt;p&gt;《TeaHour》是一个程序员的访谈节目，每期都会邀请一些技术大牛进行分享，节目结束前的好东西推荐环节也是其中一个特色。节目的质量很高，嘉宾的分享也很精彩，更新频率不高，但经常都有惊喜。一个偶然的机会我认识了 TeaHour 的主播之一 Terry，互加了微信有了一些交流。他是一个程序员、自由职业者，从事远程工作。前段时间 Terry 开了个微信公众号 Remote，其中的《我如何把薪水从 50人民币/天 提升到 100美元/小时的》系列，看的我也是如痴如醉。总之，一句话，《TeaHour》强烈推荐。&lt;/p&gt;

&lt;p&gt;IT 类节目我之前一直听《IT 公论》。 这是由李如一（不鸟万如一）和 Rio 主持的科技博客。特点是更新很快，能及时对最新的科技新闻进行分析和解读，两位主持人的观点立场也比较分明。李如一有点理想主义，崇尚手工艺、崇尚艺术和美，而 Rio 更加理性，习惯从实际出发进行推演，于是两个人免不了把节目演变成了一次次的辩论比赛。后来 Rio 做了风投，单独开了一个节目《疯投圈》，李如一一人做《IT 公论》有些孤独，于是停播了《IT 公论》，做起了一个新节目《一天世界》。总之，《IT 公论》是不会再有了。&lt;/p&gt;

&lt;p&gt;读书类的节目，我主要听《狗熊有话说》和《罗辑思维》。偶尔也听听英语学习类的节目，以及优秀的脱口秀节目：《冬吴相对论》、《晓松奇谈》、《老梁故事汇》……&lt;/p&gt;

&lt;p&gt;如果你也喜欢播客，欢迎交流，大胆的说出你喜欢的节目吧。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>代自己：《致和菜头书》</title>
            <link>https://blog.coderzh.com/2016/06/11/to-hecaitou/</link>
            <pubDate>Sat, 11 Jun 2016 12:24:55 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/06/11/to-hecaitou/</guid>
            <description>

&lt;p&gt;和菜头先生，&lt;/p&gt;

&lt;p&gt;恭喜您在《得到》APP 开启了《槽边往事》新的篇章！我是读者 CoderZh，你开设付费栏目后第一时间付费并给你写信的人。你也许会好奇：为什么要「代自己」给你写这篇文章？因为那个叫 CoderZh 的家伙得知你不再爱免费的微信公众号时，一会儿全身酥软，一会儿捶胸顿足，在拥挤的书房里上蹿下跳、抓耳挠腮，完全放弃了一个优秀、Geek 程序员应有的矜持。他的手指因为颤抖得太厉害，连敲个 Hello World 都编译不过，更不要说请 3 小时假抛下老婆孩子去看《魔兽》了。所以，他只好委托爱思考的程序员的我来写这篇文章。&lt;/p&gt;

&lt;p&gt;另外，我自己还有一个更特别的理由：自写公众号《一个程序员的思考》以来，我一直都想成为像您一样的人。拥有那么好的文笔，那么多的赞赏收入，那么多的女粉丝。甚至有时在梦里，一遍又一遍的重复这样的场景：那是一个雨天，我用 HHKB 噼里啪啦的敲着代码，编译器不时惊叹如此优雅的代码，同时马不停蹄的为我编译。随着回车键按下，与女粉丝互换私密照片的微信公众号服务上线了。我打开微信「公众号安全助手」，已经有 28000 条读者的消息在等着我点开。我飞速的扫视着读者的头像，一眼就看见了那个穿着黄色雨衣的娇小身影。她有一条留言：「叔，这个月的零花钱都赞赏给你了。」&lt;/p&gt;

&lt;p&gt;但是现在看起来，这一幕不大可能发生了。因为 CoderZh 先生使尽了吃奶的力气，才积攒了 2000 个粉丝。他上班要写代码，下班要带孩子，根本没有那么多时间像菜头先生一样写文章、看评论、拉黑粉丝。更重要的是，他没有你的才华，可以嬉笑怒骂皆成文章。但是，他头发比你多，是吧。&lt;/p&gt;

&lt;p&gt;原谅我说了那么多无关的话，我是个内向而羞射的人，不善于表达自己，张不开嘴说「来关注我吧」，更不敢直接问读者要钱。所以，以上只是强行和你套近乎，强行拉粉的方式。很老土，是吧？&lt;/p&gt;

&lt;p&gt;对了，我应该向我的读者介绍一下您。毕竟，你也不像赵又廷那样出名。哦，也许你不认识赵又廷，但你一定听过高圆圆吧。好吧，没关系，我对这两个人也不熟，还是说说你吧。Google 搜索「和菜头是谁」，会进入一个知乎的页面，排名第一的居然是你自己的回答。你写道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;和菜头是一个网络ID，最早出现在1999年的BBS里。&lt;/p&gt;

&lt;p&gt;承载这个ID的是一个沉重的肉身。时光荏苒，这具肉身受到肠溃疡、胃炎、脚气、痛风等疾病的困扰，在网络上活跃的时间也随之减少。&lt;/p&gt;

&lt;p&gt;在相对较为官方的版本中，它曾经宣称ID的来源是云南的一种咸菜，但是人们并不能记住这种咸菜的名字，因为它委实太过平凡了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你写了这么长，只说明了你是一个中年发胖的网络写手。其实远不止此，你的经历和人脉如此之丰富，比如你是微信之父张小龙的好朋友、宁财神 50 元将微博账号卖给了你、你替罗振宇写《致女儿书》、你的《槽边往事》一天可以发 3 篇微信公众号文章。意味着你只要笔耕不辍，就可以挣到别人 3 倍的赞赏收入。但你偏偏用来发照片，各种天空的照片。不仅自己发，还做了个交换天空照片的功能，让读者也来发。&lt;/p&gt;

&lt;p&gt;从拍天空照片看出，你是一个有情怀的人。你对你的文字要求很严格，但你对你的读者更为苛刻，因为一言不合就会被你拉黑。想要不被和菜头拉黑，有 3 种办法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;给和菜头的文章赞赏。&lt;/li&gt;
&lt;li&gt;给和菜头的文章留言，赞同他说的一切。&lt;/li&gt;
&lt;li&gt;不留言也不赞赏，别让和菜头发现你。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;终于说到正题了，还有一种方法可以不被菜头拉黑。什么？「换个美女头像」？也许有效吧，毕竟和菜头不止是个 ID，背后的沉重的肉身也是有七情六欲的。&lt;/p&gt;

&lt;p&gt;好吧，扯远了，现在有一种方法可以让菜头先生你拉黑不了我，就是去买你的《槽边往事》年费会员。一旦交了年费，就可以堂而皇之的指着菜头先生的鼻子说，快，快写，一周至少 3 篇，写的不好老子就退订！这样一来，读者和菜头先生的角色就翻转了，订阅者成了你的衣食父母，一言不合读者就会退订。菜头先生你只能上蹿下跳、抓耳挠腮、绞尽脑汁每周憋出 3 篇像样一点的文章来讨好观众。&lt;/p&gt;

&lt;p&gt;依你的才华，相信这都不是问题。你也许会变得比现在更有钱，当然，也可能会更惨。不可否认的一点是，你已经走上了和罗振宇一样的铜臭之路，从那一刻起，你也成了一个臭奸商。&lt;/p&gt;

&lt;p&gt;你提倡为知识付费，这本身没有一点错。你说在这个社会，水要收费，蔬菜要收费，甚至空气也要收费，为什么文章要免费。为什么文章要免费给大部分人看，而让那些少部分的喜欢你的人买单。&lt;/p&gt;

&lt;p&gt;于是你关上了免费阅读的大门，对读者说，来，给钱就看。&lt;/p&gt;

&lt;p&gt;曾几何时，我也付费购买《程序员》杂志，短短几年间，这本杂志已经少有人谈起。相反，InfoQ 的技术文章和电子期刊质量都算上乘，但人家是免费的，做的风生水起。这样的例子太多了，免费的微信、知乎、微博、豆瓣，甚至那个臭奸商罗振宇的《罗辑思维》也是免费的。下次你替我问问他，你咋不收费呢？你咋不上天呢？&lt;/p&gt;

&lt;p&gt;读者赞赏的是你具体的一篇文章，或是某个片段，觉得有点意思，或是有所启发。如果不让免费看，用户如何判断是否对自己有价值，如何判断是否要掏腰包？&lt;/p&gt;

&lt;p&gt;好的内容自然会让更多人付费，甚至付了费还帮你传播，给你带来更多潜在的付费用户。而你现在却要关上这扇门，选择一个封闭的付费小圈子。我又偷偷瞄了一眼你的付费订阅人数，还停留在 8000 多人，和 10w+ 比起来，是不是还单薄了点。更关键的是，你把更多的可能性掐死了。&lt;/p&gt;

&lt;p&gt;这是一个双向选择的过程，公众号里你可以依据赞赏数判断该文章的受欢迎程度。在《得到》里，你只能看到每篇文章的阅读数。它不会刺激你去写一篇爆款的文章，也勾不起你的欲望去挑战一下读者的底线。你会变成一个写作机器，规规矩矩，任劳任怨的实现每周至少 3 篇的承诺。&lt;/p&gt;

&lt;p&gt;这样会变得很没意思，不是吗？在公众号里，你想一天 3 更，或是 3 天一更，完全看你的喜好。你想拉黑你的读者，或者在评论区调戏女粉丝，只要看你的心情。&lt;/p&gt;

&lt;p&gt;除非你在一遍一遍拉黑洗粉之后，发现已经无粉可吸，才决定把现有的粉丝圈起来，我也是无话可说。但是我敬仰你的才华，虽然 40 岁了，你还有无限可能，你的才华应该让更多人看到。&lt;/p&gt;

&lt;p&gt;好了，听我瞎扯了这么多，我自己还不是乖乖的交了那 199 元年费。我并不反对为知识付费，这是对知识的尊重，我也认为付费的内容往往比免费的好。如果你要坚定的走付费阅读这条路，我也希望你越来越好。&lt;/p&gt;

&lt;p&gt;你常说的：「请你相信，我所说的都是错的」。&lt;/p&gt;

&lt;p&gt;最后我也想说一句，这篇文章里我所说的，也都是错的。因为和菜头你很大可能不会看到这篇文章，这一切都只发生在我的想象世界。既然你不会看到，就说个真相吧：&lt;/p&gt;

&lt;p&gt;「和菜头，其实你的文章也没什么好看的。」&lt;/p&gt;

&lt;p&gt;当然，包括这句话也可能是错的。&lt;/p&gt;

&lt;h3 id=&#34;禅定时刻&#34;&gt;禅定时刻&lt;/h3&gt;

&lt;p&gt;那些你想象中的汹涌流量，也许永远不会到来。&lt;/p&gt;

&lt;p&gt;那些你想象中的滚滚财源，也许只会流向他方。&lt;/p&gt;

&lt;p&gt;那些你想象中的赞美言辞，也许变成刺耳谩骂。&lt;/p&gt;

&lt;p&gt;那些你想象中的簇拥美女，也许只是逢场作戏。&lt;/p&gt;

&lt;p&gt;唯有平和之心，相信和菜头和你说的都是错的，方得始终。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>马斯克的冒险</title>
            <link>https://blog.coderzh.com/2016/06/05/elon-musk/</link>
            <pubDate>Sun, 05 Jun 2016 14:16:25 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/06/05/elon-musk/</guid>
            <description>&lt;p&gt;埃隆·马斯克（Elon Musk）出生在一个冒险家庭。他的外祖父约书亚就是个不折不扣的冒险家。在约书亚 7 岁时父亲就去世了，于是他便维持起了家里的生计。他学会了各种技能，包括开垦荒地、驯养野马、拳击和摔跤，甚至组织牛仔竞技表演。后来经济大衰退，导致约书亚失去了自己的农场，陷入了经济危机。&lt;/p&gt;

&lt;p&gt;后来约书亚娶了一位加拿大舞蹈老师，并开了一家按摩诊所，挣了不少钱，便玩起了私人飞机。后来约书亚不满加拿大道德的沦陷，决定放弃一切，变卖了所有家产，举家搬到南非准备重新开始。&lt;/p&gt;

&lt;p&gt;约书亚和妻子温曾驾驶飞机完成了一次 2.2 万英里的往返旅行，后来有次飞行了 3 万英里，往返于澳大利亚。他们的飞机没有装备任何的仪器，连无线电都没有，他们用公路地图代替航空地图。&lt;/p&gt;

&lt;p&gt;约书亚对冒险和探索的热爱几近疯狂，除了飞行，还曾深入丛林寻找失落之城。在约书亚 72 岁那年，他正驾驶飞机练习着陆，但没有看见两根电线杆中间的电线，结果电线缠住了飞机轮子并把飞机掀翻，约书亚折断了脖子不幸身亡。&lt;/p&gt;

&lt;p&gt;马斯克继承了外祖父的冒险精神，他出生在南非，经过不懈的努力，18 岁时移民加拿大，21 岁那年靠奖学金进入宾夕法尼亚大学攻读经济学和物理学。在拿到双学位之后，本来打算在斯坦福大学攻读材料科学和物理学博士学位，后来在斯坦福大学待了两天就退学了，因为他无法抗拒互联网的诱惑，准备大干一场。&lt;/p&gt;

&lt;p&gt;从南非到加拿大，再到美国，再到辍学创业，每一步都是冒险。&lt;/p&gt;

&lt;p&gt;马斯克先是创办了 Zip2，一个类似马云早期做的企业黄页服务。Zip2 在后来的一次次的融资后，马斯克未能牢牢的控制住公司股权。他一直想做 CEO，但一直未能如愿。后来 Zip2 被收购，27 岁的马斯克从一个加拿大背包客摇身一变成了坐拥 2200 万美元资产的富豪。&lt;/p&gt;

&lt;p&gt;一个月后他就创办了一家金融初创企业 X.com，准备用互联网的方式改造效率低下的银行业。马斯克认为「银行家富有但愚蠢，这个领域蕴藏着巨大的机会」。也是从那时开始，富豪马斯克开始结交各种上层名流，比如邀请甲骨文联合创始人，亿万富翁拉里·埃里森一起驾驶迈凯伦玩赛车。&lt;/p&gt;

&lt;p&gt;马斯克给 X.com 投资了 1200 万美元，只给自己留了 400 万美元，不像其他成功创业者，将赚来的钱藏匿起来，再从别人那里获得投资继续创业。马斯克愿意为新事业堵上身家性命。当时 X.com 和 PayPal 竞争很激烈，两家公司一合计合并算了。合并之后，马斯克的很多理念不被其他人所接受，在一次蜜月旅行时，公司员工和董事会一起发动了一场政变，彼得·蒂尔取代了他 CEO 的位置。关于 PayPal 黑帮的故事，在蒂尔的《从 0 到 1》有详细叙述。&lt;/p&gt;

&lt;p&gt;马斯克被踢出董事会后，X.com 正式更名为 Paypal。后来 Paypal 以 15 亿美元的天价出售给了 eBay，马斯克获得了 3 亿美元的巨额财富。而当时的他已经创办了火箭公司 SpaceX，他给 SpaceX 投入了 1 亿美元，他想牢牢的控制住公司，再也不要像 Zip2 和 PayPal 那样被夺走。&lt;/p&gt;

&lt;p&gt;探索太空是马斯克从小的梦想，其他人只是想一想，而马斯克却真枪实弹的干了起来。他找来苏联制造火箭的小册子，学习火箭技术。同时开始结识火箭领域的专家，曾去到俄罗斯打算购买一个火箭。在讨价还价时，被俄罗斯富豪嘲笑他是否有那么多钱，马斯克摔门而出，在回去的飞机上，他开始计划自己制造火箭，制造更低成本的火箭。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;马斯克的终极目标是「把人类变成一种跨越行星的物种」。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了把火箭的发射成本降低下来，SpaceX 想尽了各种办法，不依赖进口，自己制造各种火箭零件，制造可回收的火箭。&lt;/p&gt;

&lt;p&gt;后来马斯克投资了电动车公司特斯拉，太阳能公司太阳城，还声称要制造「超级高铁」，可谓是风光无限。可你曾想过在这之前，电动汽车、火箭发射、太阳能都是极其冷门的领域。&lt;/p&gt;

&lt;p&gt;2008 年马斯克陷入了人生低谷，和妻子贾斯丁离婚，火箭接连发射失败，特斯拉濒临破产，媒体大量的负面报道。后来终于成功发射了一次，NASA 的一笔 16 亿美元的订单拯救了 SpaceX。后来 SpaceX 在火箭发射领域大获成功，特斯拉也于 2010 年上市。&lt;/p&gt;

&lt;p&gt;在《硅谷钢铁侠》书中，可以了解到一个更全面的马斯克。最后再分享几个我读到的有趣的故事：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 Zip2 早期，代码都是马斯克写的，虽然他不是专业出身，但是学习能力很强，而且一直认为自己写的代码是最棒的。后来公司有了投资，从硅谷引入了大量专业的程序员，那些程序员看马斯克的代码写的既冗余又不规范，于是通篇重写。马斯克虽然有很多股份在身，但是没有任何管理职能，于是他经常干这种事：晚上偷偷的修改硅谷程序员的代码。结果程序员第二天来上班发现昨天写了一天的代码被马斯克回滚了，简直苦不堪言。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;X.com 和 Paypal 合并时，马斯克热衷于微软的技术，而 Paypal 更喜欢 Linux 的技术栈，编程语言之战就此爆发，随后导致 Paypal 高层出走，马斯克也落得大家都不喜欢的下场。后来趁着马斯克蜜月旅游的时机，员工联合了其他董事会成员一起把马斯克弹劾了，踢出了董事会。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;马斯克是个工作狂，而且还要求别人也是。在 SpaceX，只要一言不合就有可能被马斯克开除，甚至邮件里出现几个错别字都有可能被马斯克开除。马斯克讨厌各种缩写，他认为缩写非常不利于交流，会导致新人开会时只能傻站在一旁不敢提问。他规定了一个缩写词汇表，超出了词汇表的缩写都不被允许。作为公司 CEO，大到公司战略，小到单词缩写词汇表，他都要严格按照他的要求来做。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;彼得·蒂尔曾感叹：「我们想要一辆会飞的汽车，得到的却是 140 个字符」。&lt;/p&gt;

&lt;p&gt;而马斯克正在制造火箭。&lt;/p&gt;

&lt;p&gt;Facebook 早期员工杰夫·汉默巴彻曾说：「我们这一代人中最优秀的头脑，都在思考如何让你们点击广告，这太糟糕了。」&lt;/p&gt;

&lt;p&gt;马斯克在推进人类星际移民。&lt;/p&gt;

&lt;p&gt;谷歌的创始人拉里·佩奇曾说，他宁愿死后把财产捐给像马斯克这样的人来改变世界，也不愿捐给慈善机构。&lt;/p&gt;

&lt;p&gt;马斯克说，「我从来没觉得电动车是个『好机会』。我其实一直觉得做特斯拉的失败率比成功率大得多。我只是觉得这是应该要去做的事情，而且我不想苦等别人来实现」。&lt;/p&gt;

&lt;p&gt;马斯克也坦诚，将所有的未来赌在火箭和电动车上很冒险。但他话锋一转，表示如果不这么投入，才是最大的冒险，因为成功的希望是零。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>游戏必将改变世界</title>
            <link>https://blog.coderzh.com/2016/05/29/game-changed-world/</link>
            <pubDate>Sun, 29 May 2016 00:28:18 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/05/29/game-changed-world/</guid>
            <description>&lt;p&gt;有一项活动，它人为的制作了种种不必要的障碍，而你却自愿参与，即使过程需要花费大量时间，艰苦的工作，但是你却依然乐在其中。&lt;/p&gt;

&lt;p&gt;这项活动叫：游戏。&lt;/p&gt;

&lt;p&gt;我们这代人，是伴随着电子游戏长大的。从红白机（小霸王）的超级玛丽、魂斗罗，到 PC 时代的大富翁、仙剑、暗黑、FIFA、红警，到联网对战的 CS、星际，再到网络时代的传奇、剑侠、魔兽世界、英雄联盟，再到移动互联网时代的刀塔传奇、COC、皇室战争，以及现在的虚拟现实游戏（VR）。&lt;/p&gt;

&lt;p&gt;太多太多的游戏，你玩过的，没玩过的，听说过的，没听说过的。你可以不玩游戏，但你不可以漠视它们。&lt;/p&gt;

&lt;p&gt;马斯克说：「游戏行业汇集了世界上最顶尖的人才。两个离开 PayPal 的人加入了暴雪，帮助创作了游戏『魔兽世界』。它的复杂度令人瞠目，令任何网站都相形见绌。」&lt;/p&gt;

&lt;p&gt;我们见证了电子游戏的发展，电子游戏伴随着我们长大。游戏给我们留下了美好的回忆，现在及将来，也将一直为我们创造无穷乐趣。&lt;/p&gt;

&lt;p&gt;「小霸王，其乐无穷」&lt;/p&gt;

&lt;p&gt;这句广告语至今还记忆犹新。读小学时，家里以一台小霸王为诱惑让我拿三好学生。为了能玩游戏，我如愿以偿。当时的资源不像现在那么丰富，有限的几张卡带被我们反复玩，什么街头霸王、超级玛丽、魂斗罗、坦克大战、炸弹超人、热血系列、双截龙，手柄都要玩烂了，真的是其乐无穷。&lt;/p&gt;

&lt;p&gt;游戏几乎是没有说明书的，但是我们上手就可以玩。通过玩游戏，我们学会了不断尝试，拥有了探索精神，不像现在凡事先问谷歌。我们学会了与他人配合，拥有了协作精神，当然我们也经常单打独斗。我们学会了在失败中总结教训，我们发挥创意，为我们发现的每一个游戏技巧欢欣雀跃。&lt;/p&gt;

&lt;p&gt;当时我最喜欢的游戏，是热血格斗。这是一个全日文界面的格斗游戏，对于我们这些小屁孩来说，游戏的首要挑战，是找到选哪个键可以开始游戏。在游戏开始前，需要输入角色的名字、生日、血型，然后随机出一个角色来。角色的能力有高有低，当时我们公认最厉害的角色是「大眼睛」（后来才知道名字叫国夫）和「一点发」（头发上有一点的那个）。为了选出厉害的角色，我们经过了不懈的尝试和探索。&lt;/p&gt;

&lt;p&gt;这个游戏有很多的操作技巧，比如怎样一直把人扔到电网里，扔到雷了，利用地形地势进行攻击。更关键的是，这是一个非常注重配合的游戏。比如两个人快速避开敌人的同时使用合体技，需要很好的默契和反应能力。在其中一个快挂时，让剩下的那人抢先吃下挂后留下的道具，体现了一定的团队精神和策略性。最后的老虎关卡敌人异常强大，纯粹硬拼拳脚是必败的，因为老虎的手速和脚速都很快，而且一近身就把你抱飞到天上摔下来。因此，为了战胜老虎，必须掌握一些技巧和具备一定的反应能力，在躲避攻击的同时能够攻击到对方。&lt;/p&gt;

&lt;p&gt;可以说，当时类似的好玩又有意义的游戏有很多。理论上，那些游戏对于开发智力，训练反应能力，培养团队精神，提高专注力都是大有好处的。然而，「学习」一直是家长和老师眼中的主旋律，「游戏」从一开始就被认为是不务正业。&lt;/p&gt;

&lt;p&gt;如果一个人沉迷于游戏，会被家长认为是没有出息。这就是当时的现状。&lt;/p&gt;

&lt;p&gt;为什么说「当时」，因为现在的确有所改观。&lt;/p&gt;

&lt;p&gt;当李晓峰连续几届获得魔兽争霸 WCG 世界冠军，电子竞技被提上奥运会议程，电子竞技群体日益增大，职业游戏玩家奖金日益丰厚，游戏直播如火如荼，游戏主播赚的钵满盆满时，电子游戏已经开始打破人们的传统观念，获得了更多一点的认可。&lt;/p&gt;

&lt;p&gt;当然，还有一个原因，是我们玩游戏的这一代人都长大了。&lt;/p&gt;

&lt;p&gt;游戏本是纯粹的东西，从它诞生之初就是为美好目的而生。&lt;/p&gt;

&lt;p&gt;早在 3000 年前，有一年，在吕底亚出现了全国范围的饥荒，甚至没有出现一点好转的迹象。这样下去将看不到希望，于是吕底亚人发明了一种奇怪的方法来解决饥饿的问题：他们先用一整天来玩游戏，只为感觉不到对食物的渴求。然后再用一天吃东西，克制不玩游戏，如此交替。最后他们成功度过了 18 年的饥荒，其间发明了骰子、抓子儿、球以及其他常见的游戏。&lt;/p&gt;

&lt;p&gt;游戏，最初的目的是为了让生活更美好。&lt;/p&gt;

&lt;p&gt;然而，现今社会，人们对游戏的认识却并非如此。&lt;/p&gt;

&lt;p&gt;一方面很多游戏开发商为了追求利益，粗制滥造，利用玩家心里狠赚一笔。这种游戏利用了人的阴暗面，虚荣心，攀比心、杀戮心，不断通过诱惑和刺激吸引玩家，往游戏里充钱，或是沦为大 R 玩家的时间奴隶，花费大量的青春年华只为获得那一份虚荣感。&lt;/p&gt;

&lt;p&gt;另一方面，游戏太容易让人沉迷。人们花在游戏虚拟世界的时间越多，剩下给现实生活的时间就越少。在虚拟世界虽然能获得巨大的成就感，幸福感，但总归和现实脱节。令人亢奋的游戏过后总要面对冰冷的人生。在长时间投入游戏后，当人们开始反省过来时，会感到非常懊恼，《游戏改变世界》一书中称为「玩家之悔」。即使是资深的玩家，也许有一天连自己都不认可自己玩的游戏。&lt;/p&gt;

&lt;p&gt;那么，问题出哪里呢？&lt;/p&gt;

&lt;p&gt;我曾经也沉迷于游戏，大学时玩《剑侠情缘》玩到挂科差点毕不了业，工作后玩《英雄联盟》也是疯狂到不认识自己，所有的业余时间都贡献给了这款游戏。当我回过神来时对之前蹉跎的游戏时光懊恼不已，我有强烈的「玩家之悔」。&lt;/p&gt;

&lt;p&gt;直到有一天，某人和我说，他很喜欢玩游戏，但玩什么游戏都很难沉迷深入下去，反倒是非常羡慕我有过沉迷游戏的经历。因为假若你不曾为某款游戏沉迷过，你就永远无法体会游戏的奥妙所在，对游戏的理解永远也不会深刻。假如你是游戏开发人员，你永远也无法开发出真正扣人心弦的游戏。&lt;/p&gt;

&lt;p&gt;这番话让我对自己的罪恶感减轻了不少。我开始重新审视什么是游戏以及对待游戏的态度，看《游戏改变世界》这本书给了我很大的启发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好游戏不应该是脱离现实的，而应该是让现实更美好。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如游戏《文明》，玩家在游戏里模拟一个文明发展，需要平衡好经济、军事、外交、科技，了解各种宗教、治国政策的作用，了解人类不同文明发展阶段的特点，在各种综合条件下做出自己的选择，发展文明。这种游戏让我们学习到了很多人类文明的知识，同时也过足了当古代君王建立伟大帝国的瘾。因为这种体验几乎不可能在现实中发生，游戏弥补了这一缺憾。&lt;/p&gt;

&lt;p&gt;《Dota》、《英雄联盟》同样也是好游戏。它让我们化身为一个拥有 4 个魔法技能的超级英雄，组队和对面的 5 个英雄进行对抗。在游戏中你想要获胜，必须有精巧的微操，快速的反应，良好的意识，精密的团队配合。有时你还需要强大的心理分析能力，审时度势的能力，在自己强的时候表现的气焰嚣张，遇到真正的强敌时要时刻保持冷静。其中运用的兵法战术，穷寇莫追、围魏救赵，暗度陈仓，和古代人打战也是一样一样的。&lt;/p&gt;

&lt;p&gt;优秀的游戏有不少，然而称得上完美的并不多。所幸的是，最近一两年，劣质坑钱游戏大有被淘汰之势，真正优秀的精品游戏开始崭露出来，成为最后的赢家。比如芬兰的 SuperCell 公司，只有 180 名员工，一共只发布了 4 款游戏：《部落冲突》、《海岛奇兵》、《卡通农场》、《皇室战争》，但款款精品，每款游戏都堪称不同时期的现象级产品。&lt;/p&gt;

&lt;p&gt;游戏化是必然的趋势。如果你还不曾领略游戏的魅力，你可以再想象一下，假如有一件事，需要你每天花 3 ~ 5 个小时，期间必须严格集中注意力，需要解决各种人为制造的不必要的麻烦，有时候甚至是机械的重复劳动，不但没有任何酬劳，还需要你不断往里充钱，似乎对现实的你也没有一点益处。你会做这件事吗？但假如是游戏，你却会自愿的去接受那些艰苦的工作，这就是游戏的魅力。&lt;/p&gt;

&lt;p&gt;游戏必将改变世界，那些能够弥补现实生活不足，增强现实生活能力，让现实更美好的游戏更甚。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>善良比聪明更难</title>
            <link>https://blog.coderzh.com/2016/05/15/kind-or-clever/</link>
            <pubDate>Sun, 15 May 2016 11:32:15 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/05/15/kind-or-clever/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Jeff, one day you&amp;rsquo;ll understand that it&amp;rsquo;s harder to be kind than clever.&lt;/p&gt;

&lt;p&gt;杰夫，总有一天你会明白，善良比聪明更难。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jeff Bezos 毕业于普林斯顿大学，是美国亚马逊的创始人。在 2010 年普林斯顿大学学士毕业典礼上，贝索斯发表了演讲《善良比聪明更难》。&lt;/p&gt;

&lt;p&gt;演讲中，他提到在 10 岁时一次家庭房车旅游中，祖父一边开着车，祖母在旁一边抽着烟。贝索斯不喜欢烟的味道，于是自作主张的根据一个吸烟广告的数据计算了起来。最后他得意的拍了拍祖母的肩膀，骄傲的宣称：「如果两分钟就吸一口烟的话，你就会少活 9 年！」&lt;/p&gt;

&lt;p&gt;贝索斯很聪明，他本以为会得到家人的赞许，因为里面涉及了很多数学计算。然而他的自作聪明，却伤害了他的祖母，祖母开始哭泣起来。&lt;/p&gt;

&lt;p&gt;下车后，祖父对贝索斯说：「杰夫，总有一天你会明白，善良比聪明更难。」&lt;/p&gt;

&lt;p&gt;演讲视频很容易在网上找到，建议有兴趣的同学都去看看原版视频，因为我发现很多持有反对意见的人是没有看过原版视频的。&lt;/p&gt;

&lt;p&gt;首先，贝索斯的演讲对象是普林斯顿大学的毕业生，毫无疑问，是一群聪明绝伦的人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;聪明是一种天赋，而善良是一种选择。天赋得来很容易——毕竟它们与生俱来。而选择则颇为不易。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;聪明的人面临选择时，是选择一条伤害他人获利自己的路，还是选择一条即使更难但始终保持善良的路？&lt;/p&gt;

&lt;p&gt;这是贝索斯抛出的问题。&lt;/p&gt;

&lt;p&gt;不聪明的人作恶，很容易被发现或被制止，他们往往做些小恶，贪图一些小便宜，如果做大恶，代价太大，容易被识破或触犯法律，当然也不排除铤而走险的人。&lt;/p&gt;

&lt;p&gt;聪明的人作恶更容易，他们知道如何在获取巨大利益的同时，掩盖自己的恶。比如《笑傲江湖》里的岳不群。&lt;/p&gt;

&lt;p&gt;人之初，性本善。作恶之人会把原因归咎于社会，归咎于环境，他们擅长寻找心里慰藉，很多人甚至不认为那是恶，他们会说：「人为财死，鸟为食亡」。他们会为自己做的恶找很多借口，他们会说：「我顶多只能算推波助澜，真正作恶的是别人。」&lt;/p&gt;

&lt;p&gt;社会不如我们想象中的美好，通过作恶获取巨大利益给了聪明人巨大的诱惑，而且他们善于掩盖和包装所做的恶，直到催眠自己，把一切都看作理所当然。&lt;/p&gt;

&lt;p&gt;社会也不像我们想象中的那么差，依然有大量心怀善意的人，他们影响着他人，甚至改变着世界。&lt;/p&gt;

&lt;p&gt;贝索斯的演讲就是告诉我们，当我们面临选择时，请选择一条善意的路，尽管它更难。&lt;/p&gt;

&lt;p&gt;有人会问，选择善良会容易吃亏吗？&lt;/p&gt;

&lt;p&gt;不聪明的人对你做恶，往往只是想占你一点小便宜。聪明的人对你作恶，错的不是你太善良，而是你不够聪明。&lt;/p&gt;

&lt;p&gt;我也曾在百度搜过几种疾病，本能的我会意识到其中的广告成分，我会选择不去相信。当然，作为国内最大的搜索引擎，想靠用户去甄别真的很难。&lt;/p&gt;

&lt;p&gt;于是我再聪明一点，我选择不用百度。尽管很难，我坚持使用 Google，因为这是一家推崇「不作恶」的公司。&lt;/p&gt;

&lt;p&gt;再举个栗子：&lt;/p&gt;

&lt;p&gt;《琅琊榜》里，梁王谋反篡位，陷害忠良，东宫太子和誉王为夺皇位无恶不作。誉王、夏江、秦般弱都是聪明之人，手段也很毒辣，怎奈还是敌不过更加聪明一等，并且保持善良的梅长苏！这个剧被热播，也正好说明了人们人心向善的愿望，能有个梅长苏替自己给险恶之人以沉痛一击，岂不快哉！&lt;/p&gt;

&lt;p&gt;「To be or not to be, 这不是一个问题。」&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Swift 语言学习及速查手册</title>
            <link>https://blog.coderzh.com/2016/04/24/swift-tips/</link>
            <pubDate>Sun, 24 Apr 2016 23:21:16 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/04/24/swift-tips/</guid>
            <description>&lt;p&gt;学习一门新的编程语言要多久？答案是随着你的经验的增加，学习花费的时间越来越短。当然，这也和新语言的不断演变进化有关系。&lt;/p&gt;

&lt;p&gt;我利用周末两天时间，把《Swift Programming Language》中文版整整的细看了一遍，然后为了总结提取 Swift 的主要语言特性，又把这本书快速过了第二遍。&lt;/p&gt;

&lt;p&gt;根据我的番茄钟粗略统计，我看书学习第一遍大约花了 5 小时（包括边学，边在 XCode 试验的时间），第二遍主要是快速过一遍主要特性，将主要示例代码提取出来，大约花了 3.5 小时。&lt;/p&gt;

&lt;p&gt;连我自己都觉得有点难以置信，总共只需要 8 小时，就可以基本入门一门新语言了。&lt;/p&gt;

&lt;p&gt;很多时候，我们想学习某个东西，但是却一直停留在想一想的状态，迟迟都未动手。究其原因，大概是如下几个原因吧：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;恐惧未知。对未知的东西没有把握，怕太难，怕需要太长时间学，所以能拖就拖。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注意力不能集中。连续玩几个小时游戏一点不累，看半小时书就感觉身心俱疲。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;番茄工作法在这个时候就起作用了，告诉自己，不想太多，开始一个番茄钟试试，在这 25 分钟内，只关注这 25 分钟内要看的内容。然后，很自然的，障碍被逐个击破，番茄钟一个接着一个。&lt;/p&gt;

&lt;p&gt;以下是我学习 Swift 的代码总结，可用于之后速查。&lt;/p&gt;

&lt;p&gt;代码：&lt;a href=&#34;https://github.com/coderzh/CodeTips/blob/master/swift.swift&#34;&gt;https://github.com/coderzh/CodeTips/blob/master/swift.swift&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 swift.swift:
 Swift 速学速查速用代码手册
 Source: github.com/coderzh/CodeTips/blob/master/swift.swift
 Author: coderzh(github.com/coderzh)
 Blog: http://blog.coderzh.com
 参考：《Swift Programming Language》
 */

import Cocoa

// 0. 注释
/*
块注释
行尾分号可不用
*/

// 1. Hello World
print(&amp;quot;Hello Swift&amp;quot;)

// 2. 常量变量类型
let constValue = 3.14
var variable = 18

variable += 1

// 指定类型
let age: Int = 18
// 多重赋值
var (a, b) = (1, 2)
// 匿名占位符
(_, b) = (3, 4)

// 类型会自动推导
let name = &amp;quot;It&#39;s a string&amp;quot;
let gravity = 0.98 // 默认 double

// 永远不做隐式转换，必须自己强转
let sum = Double(age) + gravity

// 运算：+, -, *, /, % 求余
// 比较：&amp;lt;, &amp;gt;, ==, &amp;gt;=, &amp;lt;=, !=
// === 恒等，是否为同一个对象
// !== 不恒等
// 位运算：~x 取反，&amp;amp; 与，| 或，^ 异或，&amp;lt;&amp;lt; 左移动，&amp;gt;&amp;gt; 右移
// 溢出运算符 &amp;amp;+ &amp;amp;- &amp;amp;* &amp;amp;/ &amp;amp;% ，这样溢出部分就会丢掉，不会出错，比如：
var willOverflow = UInt8.max
willOverflow = willOverflow &amp;amp;+ 1 // = 0

// 类型
let b1 = true
let i32: Int32 = 6
let f64: Float64 = 3.1415

// 字符串
let str = &amp;quot;swift&amp;quot;
// 字符串连接，使用\()
var hello = &amp;quot;hello \(str)&amp;quot;
let count = str.characters.count
let c = hello[hello.startIndex]
for i in hello.characters.indices {
    print(&amp;quot;\(hello[i])&amp;quot;)
}

hello.insert(&amp;quot;!&amp;quot;, atIndex: hello.endIndex)
hello.insertContentsOf(&amp;quot; there&amp;quot;.characters, at: hello.endIndex.predecessor())
hello.removeAtIndex(hello.endIndex.predecessor())
hello.hasPrefix(&amp;quot;hello&amp;quot;)
hello.hasSuffix(&amp;quot;swift&amp;quot;)

let unicode = &amp;quot;你好 swift&amp;quot;
unicode.characters.count // 8

for codeUnit in unicode.utf8 {
    print(&amp;quot;\(codeUnit)&amp;quot;, terminator: &amp;quot;&amp;quot;)
}
if hello == unicode{

}

// 数组
var shoppingList = [&amp;quot;test&amp;quot;, &amp;quot;book&amp;quot;, &amp;quot;bike&amp;quot;]
shoppingList[2] = &amp;quot;joke&amp;quot;
shoppingList.append(&amp;quot;bus&amp;quot;)
shoppingList.insert(&amp;quot;foo&amp;quot;, atIndex: 0)
shoppingList.removeAtIndex(0)

// 类似 slice
shoppingList[0..&amp;lt;2] // [&amp;quot;test&amp;quot;, &amp;quot;book&amp;quot;]
shoppingList[0...2] // [&amp;quot;test&amp;quot;, &amp;quot;book&amp;quot;, &amp;quot;joke&amp;quot;]

for item in shoppingList {
    print(item)
}

for (index, value) in shoppingList.enumerate() {
    print(&amp;quot;\(index): \(value)&amp;quot;)
}

let emptyArray = [String]()
var someInts = [Int]()
var someInts2 = [Int](count: 3, repeatedValue: 8) // [8, 8, 8]
var someInts3 = [Int](count: 3, repeatedValue: 2)

// 任意类型数组
var anyArray = [Any]()
anyArray.append(1)
anyArray.append(&amp;quot;book&amp;quot;)

someInts = someInts2 + someInts3 // [8, 8, 8, 2, 2, 2]

// 元组
let httpResponse = (404, &amp;quot;Not Found&amp;quot;)
print(httpResponse.0)

// 集合 Sets
var setBooks: Set&amp;lt;String&amp;gt; = [&amp;quot;book1&amp;quot;, &amp;quot;book2&amp;quot;]
// 自动推导
var setBooks2: Set = [&amp;quot;book1&amp;quot;, &amp;quot;book2&amp;quot;, &amp;quot;book3&amp;quot;]

setBooks.intersect(setBooks2)  // 交集
setBooks.exclusiveOr(setBooks2)  // 非交集
setBooks.union(setBooks2)  // 并集
setBooks.subtract(setBooks2)  // 减集

setBooks.isSubsetOf(setBooks2)
setBooks2.isSupersetOf(setBooks)
setBooks.isStrictSubsetOf(setBooks2)  // 被包含且不相等

// 字典
var map = [
    &amp;quot;Malcolm&amp;quot;: &amp;quot;hehe&amp;quot;,
    &amp;quot;Keylee&amp;quot;: 123,
]
map[&amp;quot;Keylee&amp;quot;] = 166

var namesOfInt = [Int: String]()
namesOfInt[10] = &amp;quot;ten&amp;quot;

if let oldValue = namesOfInt.updateValue(&amp;quot;Ten&amp;quot;, forKey: 10) {
    print(&amp;quot;\(oldValue)&amp;quot;)
}

if let name = namesOfInt[8] {
    print(&amp;quot;\(name)&amp;quot;)
} else {
    print(&amp;quot;not exist 8&amp;quot;)
}

for (intKey, strValue) in namesOfInt {
    print(&amp;quot;\(intKey):\(strValue)&amp;quot;)
}

// namsOfInt.values
for intKeys in namesOfInt.keys {

}

let intKeys = [Int](namesOfInt.keys)

// 可空变量，用 ?
var optionalString: String? = nil

if let name = optionalString {
    print(&amp;quot;hello \(name)&amp;quot;)
}

// 3. 流程控制
// 循环
// [0, 4)
for i in 0..&amp;lt;4 {
    print(&amp;quot;print \(i)&amp;quot;)  // 4 times
}

// [0, 4]
for i in 0...4 {
    print(&amp;quot;print \(i)&amp;quot;)  // 5 times
}

var i = 0
while i &amp;lt; 2 {
    print(&amp;quot;\(i)&amp;quot;)
    i += 1
}

repeat {
    print(&amp;quot;\(i)&amp;quot;)
    i += 1
} while i &amp;lt; 5

// 判断
if i &amp;lt; 5 {

} else if i &amp;lt; 10 {

} else {

}

// 强大的 switch
// 不需要 break
switch i {
case 1, 2, 3:
    print(&amp;quot;123&amp;quot;)
case 5:
    print(&amp;quot;5&amp;quot;)
case 6..&amp;lt;10:
    print(&amp;quot;6-9&amp;quot;)
default:
    print(&amp;quot;default&amp;quot;)
}

let somePoint = (1, 1)

switch somePoint {
case (0, 0):
    print(&amp;quot;0, 0&amp;quot;)
case (_, 1):
    print(&amp;quot;y is 1&amp;quot;)
case (-2...2, -2...2): // 区间
    print(&amp;quot;from (-2,-2) to (2, 2)&amp;quot;)
case (let x, 0):  // 值绑定
    print(&amp;quot;\(x)&amp;quot;)
case let (x, y) where x == y:  // where
    print(&amp;quot;x == y&amp;quot;)
case (10, 11):
    fallthrough  // 贯穿，继续向下
default:
    print(&amp;quot;default&amp;quot;)
}

// 控制转移
// continue break fallthrough retrun throw

// 带标签
i = 0
gameLoop: while i &amp;gt; -1 {
    i = i + 1
    if i &amp;gt; 3 {
        break gameLoop
    }
}

// 提前退出(提前返回)
func greet(person: [String:String]) {
    guard let name = person[&amp;quot;name&amp;quot;] else {
        return
    }
    print(&amp;quot;\(name)&amp;quot;)
}

greet([&amp;quot;age&amp;quot;:&amp;quot;18&amp;quot;])

// 4. 函数
func greet(name: String, day: String) {
    print(&amp;quot;Hello \(name), today is \(day)&amp;quot;)
}

// 第二个参数默认需要指定名称
greet(&amp;quot;tom&amp;quot;, day: &amp;quot;2016&amp;quot;)

func sum(a: Int, b: Int) -&amp;gt; Int {
    return a + b
}

sum(1, b: 2)

// 多重返回值
func minMax(array: [Int]) -&amp;gt; (min: Int, max: Int) {
    // ...
    return (0, 1)
}

// 可选返回值加 ?
func minMax2(array: [Int]) -&amp;gt; (min: Int, max: Int)? {
    if array.isEmpty { return nil }
    return (0, 1)
}

// 指定外部参数名
func sayHello(to person: String, and anotherPerson: String) {
    print(&amp;quot;Hello \(person) and \(anotherPerson)&amp;quot;)
}

sayHello(to: &amp;quot;coderzh&amp;quot;, and: &amp;quot;tom&amp;quot;)

// 忽略外部参数名，使用 _
func sayHello2(person: String, _ anotherPerson: String) {
    print(&amp;quot;Hello \(person) and \(anotherPerson)&amp;quot;)
}

sayHello2(&amp;quot;coderzh&amp;quot;, &amp;quot;jack&amp;quot;)

// 默认参数
func someFunction(p: Int = 10) {
    print(&amp;quot;\(p)&amp;quot;)
}

someFunction()

// 可变参数
func sum(numbers: Int...) -&amp;gt; Int {
    var total = 0
    for n in numbers {
        total += n
    }

    return total
}

sum(1, 2, 3, 4, 5)

// 参数默认是常量类型，如需指定变量类型，前面加 var（swift 3 将移除 var）
func alignRight(var string: String, totalLength: Int, pad: Character) -&amp;gt; String {
    string = string + &amp;quot;!&amp;quot;
    return string
}

// 传入传出参数 inout
func swap(inout a: Int, inout _ b: Int) {
    let temp = a
    a = b
    b = temp
}

var someInt = 7
var anotherInt = 8

// inout 参数必须加 &amp;amp;
swap(&amp;amp;someInt, &amp;amp;anotherInt)

// 函数类型，函数变量
var sumFunc: (Int, Int) -&amp;gt; Int = sum
sumFunc(1, 2)

// 函数可做参数
func doSum(handler:(Int, Int) -&amp;gt; Int, _ a: Int, _ b: Int) {
    handler(a, b)
}

// 函数可做返回值
func getSum() -&amp;gt; (Int, Int) -&amp;gt; Int {
    // 函数可嵌套
    func someFunc(a: Int, b: Int) -&amp;gt; Int { return a + b }
    return someFunc
}

doSum(sum, 2, 3)

// 闭包
// 闭包是引用类型
let reversed2 = shoppingList.sort({a, b in a &amp;lt; b})
let r = shoppingList.sort({ $0 &amp;lt; $1 })
let r2 = shoppingList.sort(&amp;lt;)
let r3 = shoppingList.sort{ $0 &amp;lt; $1 }

// 非逃逸闭包（noescape closure）
// 闭包只能在函数内执行，不能「逃逸」出去
func someClosure(@noescape closure: () -&amp;gt; Void) {
    closure()
}

// 自动闭包（这样不用写花括号了？）
func autoClosure(@autoclosure provider: () -&amp;gt; String) {
    provider()
}

autoClosure(shoppingList.removeAtIndex(0))

// 5. 枚举（一等公民，十分强大）
// 值类型
enum Rank: Int {
    case Ace = 1
    case Two, Three
}

var ace = Rank.Ace  // Ace
Rank.Ace.rawValue  // 1
let ace1 = Rank(rawValue: 1)  // Ace
ace = .Two

enum ServerResponse {
    case Result(String, String)
    case Error(String)
}

// 可失败构造器
enum TemperatureUnit {
    case Kelvin, Celsius, Fahrenheit
    init?(symbol: Character) {
        switch symbol {
        case &amp;quot;K&amp;quot;:
            self = .Kelvin
        case &amp;quot;C&amp;quot;:
            self = .Celsius
        case &amp;quot;F&amp;quot;:
            self = .Fahrenheit
        default:
            return nil
        }
    }
}


let success = ServerResponse.Result(&amp;quot;6:00am&amp;quot;, &amp;quot;6:00pm&amp;quot;)
let failure = ServerResponse.Error(&amp;quot;Out of cheese&amp;quot;)

switch success {
case let .Result(sunrise, sunset):
    let serverResponse = &amp;quot;sunrise at \(sunrise), sunset at \(sunset)&amp;quot;
case let .Error(error):
    let serverResponse = &amp;quot;Error \(error)&amp;quot;
}

// 枚举递归...
enum ArithmeticExpression {
    case Number(Int)
    indirect case Addition(ArithmeticExpression, ArithmeticExpression)
    indirect case Multiplication(ArithmeticExpression, ArithmeticExpression)
}

func evaluate(expression: ArithmeticExpression) -&amp;gt; Int {
    switch expression {
    case .Number(let value):
        return value
    case .Addition(let left, let right):
        return evaluate(left) + evaluate(right)
    case .Multiplication(let left, let right):
        return evaluate(left) * evaluate(right)
    }
}

// 计算 (5 + 4) * 2
let five = ArithmeticExpression.Number(5)
let four = ArithmeticExpression.Number(4)
let sum2 = ArithmeticExpression.Addition(five, four)
let product = ArithmeticExpression.Multiplication(sum2, ArithmeticExpression.Number(2))
print(evaluate(product)) // 输出 &amp;quot;18”

// 6. 类和结构体
// 结构体是值类型，类是引用类型
class SomeClass {
    var width = 0
    var height = 0

    // class 不需要 mutating
    func incrementWidth() {
        self.width += 1
    }

    // 下标操作： [n]
    subscript(index: Int) -&amp;gt; Int {
        get {
            return 0
        }
        set(newValue) {
            // set from newValue
        }
    }
}

let s1 = SomeClass()

struct SomeStruct {
    static var someValue = 100
    static func staticFunc() -&amp;gt; Int {
        return 1
    }

    var x = 0
    var y = 0

    var doubleX: Int {
        get {
            return x * 2
        }
        set {
            x = newValue / 2
        }
    }

    // readonly
    var doubleY: Int {
        return y * 2
    }

    var total: Int {
        willSet(newTotal) {
            print(&amp;quot;will set \(newTotal)&amp;quot;)
        }

        didSet {
            print(&amp;quot;old: \(oldValue), new: \(total)&amp;quot;)
        }
    }

    // 如果会改变类成员，比如声明 mutating
    mutating func incrementX() {
        self.x += 1
    }
}

var s2 = SomeStruct(x: 2, y: 3, total: 10)
s2.doubleX = 10  // s2.x == 5
s2.total = 5

// 继承
class Animal {
    // 构造函数
    init() {

    }

    // 必要构造器，子类必须实现，而且声明为 required
    required init(name: String, age: Int) {

    }

    func makeNoise() {
        print(&amp;quot;wowowo&amp;quot;)
    }
}

class Cat: Animal {
    var name: String = &amp;quot;&amp;quot;
    var nickName: String = &amp;quot;&amp;quot;

    init(name: String) {
        super.init()
        self.name = name
    }

    init(fromNickName nickName: String) {
        super.init(name: nickName, age: 18)
        self.nickName = nickName
    }

    // 便利构造器：必须调用其他构造器
    convenience override init() {
        self.init(name: &amp;quot;UnKnown&amp;quot;)
    }

    // 可失败构造器
    init?(age: Int) {
        super.init(name: &amp;quot;UnKnown&amp;quot;, age: age)
        if age &amp;lt; 0 { return nil }
    }

    required init(name: String, age: Int) {
        self.name = name
        super.init(name: name, age: age)
    }

    // 析构，默认会先调用父类的析构
    deinit {

    }

    override func makeNoise() {
        print(&amp;quot;miaomiaomiao&amp;quot;)
    }
}

final class CannotInheirt {

}

// 7. 自动引用计数 ARC
// weak 弱引用
// unowned 无主引用

// 8. 可空链式调用
/* For example:
if let johnsStreet = john.residence?.address?.street {
    print(&amp;quot;John&#39;s street name is \(johnsStreet).&amp;quot;)
} else {
    print(&amp;quot;Unable to retrieve the address.&amp;quot;)
}
*/
// 如果确定有值，使用!
// let roomCount = john.residence!.numberOfRooms


// 9. 错误处理

enum CustomError : ErrorType {
    case Invalid
    case OutOfRange
}

func makeASandwich() throws -&amp;gt; String {
    throw CustomError.Invalid
}

do {
    try makeASandwich()
} catch CustomError.Invalid {
    print(&amp;quot;Invalid&amp;quot;)
}

// 可空
let x = try? makeASandwich()
// 使错误传递失效，肯定不throw，否则 assert
// let y = try! makeASandwich()

// defer 和 Golang 里的 defer 一样，用来退出清理
/*
func processFile(filename: String) throws {
    if exists(filename) {
        let file = open(filename)
        defer {
            close(file)
        }
        while let line = try file.readline() {
            // 处理文件
        }
        // 在这里，作用域的最后调用 close(file)
    }
}
*/

// 10. 类型转换： is as （和 CSharp 类似）
// 任意类型：
// 1. AnyObject 任何 class 类型实例
// 2. Any 任何类型

// 11. 扩展（extension，类似 CSharp 里的扩展方法，但是貌似更强大）
// 比如：扩展内置类型 Double
// 几乎一切都可扩展，用到时再查用法吧
extension Double {
    var km: Double { return self * 1_000.0 }
    var m : Double { return self }
    var cm: Double { return self / 100.0 }
    var mm: Double { return self / 1_000.0 }
    var ft: Double { return self / 3.28084 }
}

// 12. 协议（类似接口的东西）
// 当同时有继承时，先写继承，再写协议，协议可以有多个
protocol FullyNamed {
    var fullName: String { get }
}

// 协议也可继承
protocol SubFullyNamed: FullyNamed {
    var nickName: String { get }
}

struct Person: FullyNamed{
    var fullName: String
}

// 专属协议，指定只能用在 class 上
protocol ClassOnlyProtocol: class, FullyNamed {

}

protocol Aged {
    var age: Int { get set }
}

// 协议合成
func foo(pro: protocol&amp;lt;FullyNamed, Aged&amp;gt;, base: Any) {
    // 协议判断
    if let p = base as? Aged {
        print(p.age)
    }
}

// 可选协议（既然是协议，还可选，醉了）
// @objc protocol

// 13. 泛型
func swapTwoValues&amp;lt;T&amp;gt;(inout a: T, inout _ b: T) {
    let temporaryA = a
    a = b
    b = temporaryA
}

// 泛型约束
func someFunction&amp;lt;T: SomeClass, U: FullyNamed&amp;gt;(someT: T, someU: U) {
    // 这里是函数主体
}

// Where
/*
func allItemsMatch&amp;lt;
    C1: Container, C2: Container
    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&amp;gt;
    (someContainer: C1, anotherContainer: C2) -&amp;gt; Bool {
}
*/

// 14. 访问控制
// public internal（默认） private
// 加在 class var 等前
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>程序员的黄金时代</title>
            <link>https://blog.coderzh.com/2016/04/17/gold-time-of-programmer/</link>
            <pubDate>Sun, 17 Apr 2016 08:47:35 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/04/17/gold-time-of-programmer/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/goldtime.jpg&#34; alt=&#34;goldtime&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（第一次尝试写小说，本文仅向王小波致敬，情节纯属虚构，切勿对号入座。）&lt;/p&gt;

&lt;p&gt;我叫张三，身高 1.9 米，不要看我身材高大，我的手可细的很。我敲键盘的速度可以达到 APM 666，不带一个按错的键。其实可以达到更高，但我对 666 这个数字情有独钟。&lt;/p&gt;

&lt;p&gt;你也许猜到了，我是一个程序员。我在全球第一的软件公司上班，公司名字叫「猎狗」。我觉得这个名字很贴切，适合大多数的程序员和产品经理前来工作，我就是其中一个。&lt;/p&gt;

&lt;p&gt;「小黄」是我在公司的花名，每个进公司的员工都会分配一个花名，我被随机抽到了「小黄」这个花名，但是我不喜欢。每次别人叫我小黄，我都要解释我不姓黄，他们总是抿抿一笑。&lt;/p&gt;

&lt;p&gt;我在公司升职的很快，从 D1 到 D6，我只用了 3 年的时间（心智正常的程序员一般需要 10 年）。不是因为我写代码又快又好，也不是我的代码让公司产品占据一个又一个 Store 畅销榜单第一。我写的代码没什么技术含量，因为榜单基本靠刷。&lt;/p&gt;

&lt;p&gt;我升职快的原因是讨老板喜欢。只要老板出席的会议，我总是第一个到。我会把老板说过的每句话都记下来，一字不差，会后还会组织大家学习，深刻领悟老板提到的每一个方法论。&lt;/p&gt;

&lt;p&gt;公司群里只要老板一发话，我总是第一个回复我来解决。只要产品一出问题，我总能说成是别人的锅。我会仔细揣摩老板发的每一条朋友圈，精准定位老板的喜好，投其所好。一旦发现老板开始发表观点了，点赞和转发是不够的，我还会第一时间准备上万字的软文往各大网站和社交媒体里发。&lt;/p&gt;

&lt;p&gt;曾经有一次我写代码的时候睡着了，把错误的代码提交到了上线系统。用户投诉一个接着一个，我被老板的电话叫醒，我一拍桌子，愤愤的说到：「他妈的昨天隔壁老王写的什么狗屎代码，老板你不用担心，我分分钟就可以搞定！」&lt;/p&gt;

&lt;p&gt;我用了 1 个小时理解了昨天写的代码，然后真的只用了 1 分钟就修复了 Bug。我十分得意，为此老板在给全公司的邮件里表扬了我，还许诺今年的优秀员工、重大技术突破奖非我莫属。他后来确实做到了，这点看来是很诚信的。当然，被我栽赃的王二也被开除了。&lt;/p&gt;

&lt;p&gt;类似的事情实在太多，我不能再细说下去，我怕你们学了去我丢了饭碗。我认为这是程序员最好的黄金时代，像我这样的三流程序员也可以在全球第一的公司里混的风生水起。然而我还是想错了。有一天，我收到了 HR 寄来的解雇信，没有一点征兆。&lt;/p&gt;

&lt;p&gt;我想一定是搞错了，解雇老板的可能性或许还要高一些，要解雇我，必须给我一个理由。我思前想后，觉得不对劲。距离上次我在软件出错对话框里弹老板裸照已经过去一年了，虽然我只设了老板一个人的白名单，同事也一直没有揭发过我。&lt;/p&gt;

&lt;p&gt;我想是「二蛋」告的密，他一定是眼红我。但我还是要找老板问个究竟。我找到老板，老板「啪」的一声拿出一叠打印好的 A4 纸，说到：「看看！这都是什么！」&lt;/p&gt;

&lt;p&gt;我只见最上面的一张纸工工整整的写到：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;secret_key = &#39;6ICB5p2/5piv5Liq5aSnU0I=&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我大惊失色，「老板，这可是掌握公司上亿数据的加密密钥，可不带这么随便打印出来，万一让人捡了去，可不好了。」&lt;/p&gt;

&lt;p&gt;老板根本没有理睬我，继续问道：「这行代码是你写的不？」&lt;/p&gt;

&lt;p&gt;对于公司保密性最高的代码，也只能是我写的了，我只好承认。&lt;/p&gt;

&lt;p&gt;这时老板哼了一声，显得有点得意：「别以为我不知道，这段密钥是一个 Base64 加密过的字符串，我写了一个小程序，解密了一下，你过来看看！」&lt;/p&gt;

&lt;p&gt;我很好奇老板居然懂 Base64 加密，更好奇他还会写代码。我知道了，一定是二蛋写好的代码发给了老板。我凑过去看，老板找了半天没找到点哪个按钮可以执行，然后我告诉了他。接着，屏幕的赫赫的输出了解密的结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;老板是个大SB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我突然想起来了，确实有这么回事，但我不能承认，说到：「老板，这你也相信？」&lt;/p&gt;

&lt;p&gt;老板：「这程序执行的结果千真万确，『老板是个大SB』绝对没错。 」&lt;/p&gt;

&lt;p&gt;我噗呲一笑，又感觉不太好，气氛有点尴尬，正想怎么把这事推到二蛋身上。老板继续发飙起来，你看看后面的，比如这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;!-- 老板是个大SB --&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有这个单元测试案例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def test_stupid_boss(self):
    self.assertEquals(&#39;老板是个大SB&#39;, dog_company().get_boss())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我看着这些代码，心里想着我的代码写的还是不错的，代码工整，命名也很规范。我和老板说：「有人要诬陷我。」&lt;/p&gt;

&lt;p&gt;「整个公司就你写单元测试，刚才的测试代码除了你写的，还能有谁？」&lt;/p&gt;

&lt;p&gt;这时老板的逻辑性变的强了起来。的确，这一点我无可辩驳，暗暗发誓以后再也不写什么单元测试了，都是害人的东西。&lt;/p&gt;

&lt;p&gt;「那你怎么确认不是别人偷偷改了我的代码？」&lt;/p&gt;

&lt;p&gt;「这里的每一行我都 git blame 过了，就是你写的！」&lt;/p&gt;

&lt;p&gt;我突然有种感觉，老板也不是那么 SB，至少逻辑性非常强。我正打算和他解释 git 的 commit log 也是可以随便修改的，老板只和我说了一句「滚！」。&lt;/p&gt;

&lt;p&gt;在猎狗公司，只要老板说出「滚」字，你是不能进行任何辩驳的，就像一道圣旨，没有任何回旋的余地。也不会有任何回旋的余地，因为假如我没有滚，就相当于老板承认了是大 SB 的事实。我也必须滚，因为我还在更多的代码里藏了骂他的话，骂的更不堪入目，假如哪天他发现了，我还是得滚。&lt;/p&gt;

&lt;p&gt;有人问我，老板对你这么好，为什么还骂他？我说我没有，我只是说了实话。&lt;/p&gt;

&lt;p&gt;生活还得继续，我依然相信现在是我的黄金时代，像我这种高高级开发狗，肯定会有大量的公司抢着要。然而我还是想错了。&lt;/p&gt;

&lt;p&gt;那天我来到程序猿拍卖基地，和很多程序员站成一排，等待上台拍卖，希望被好的雇主看中。我们被分成了几个组，由于我之前在猎狗公司工作过，自然被分配到了狗组。我看见对面站了一排人，他们左顾右盼，不停的用眼角余光警惕别人，时而露出奸诈的微笑，他们是狼组。最受雇主青睐的一个组。&lt;/p&gt;

&lt;p&gt;我和拍卖基地的人说，我应该属于狼组，我凶的很，警惕性高，写代码可以不休息，进攻性也强，把我派去竞争对手公司做卧底分分钟将它搞垮。我说了很多，他们说你说什么没用，他们说你是狗，你就是狗。我看看对面的一群即将失业的羊组，想想还是有道理的。&lt;/p&gt;

&lt;p&gt;轮到我上台了，主持人开始介绍我：「张三，猎狗高高级开发狗，&amp;hellip;&amp;hellip; 离职原因：在代码里辱骂老板是大SB。」我的天，本来以为三路破塔拿下高地只是分分钟的事情，想不到猎狗的老板还给我来了这么一出，感觉就像被剑圣偷了基地。雇主们纷纷灭灯，我闭上眼睛，等待导播放「可惜不是你」。&lt;/p&gt;

&lt;p&gt;最后我被一个雇主雇佣了，原因是他在听介绍时睡着了没有灭灯，也不知道我辱骂老板的事。这家公司叫「巨狼」，是个游戏公司。我顺理成章的从狗晋升到了狼，十分高兴。&lt;/p&gt;

&lt;p&gt;我被分配到了开宝箱组，每天的任务就是写游戏里开宝箱的功能。我和老板说，开宝箱涉及到人工智能、大数据分析、心理学、社会学等众多领域，技术难度高，开发时间长，吸金能力强，所以得加钱加人。老板是聪明人，说：「叫你写开宝箱，别叽叽歪歪。」我不确定我是不是听错了，这不是羊才干的事情的吗？但老板就是老板，肯定比我高瞻远瞩，我不敢骂他，偷偷的也不行。&lt;/p&gt;

&lt;p&gt;有一天我去 UI 组提宝箱界面需求，是一个面容清秀的 UI 妹子，她叫陈清羊。我提完需求后正要走，她一把拉住了我，问我晚上有时间没，要找我单独谈谈。我再次不确定是不是听错了，虽然我身高 1.9，但平时邋遢的很，头发蓬松，拖着拖鞋上班，几天也不洗一次脸。我环顾四周，确认了她确实是在和我说话。淡淡的说了一句：「行吧。」&lt;/p&gt;

&lt;p&gt;陈清羊很漂亮，她肯定不会看上我，这点是可以确定的。我们在约好的咖啡厅见面，她上来就说，「别人都说我和老板有一腿，可是我不是，你能帮我证明吗？」原来是她看我天天写开宝箱比较老实，没有像其他同事一样天天去骚扰她，就想找我证明。&lt;/p&gt;

&lt;p&gt;「别人都说你和老板有一腿，那就是有一腿，没有什么好辩驳的。」&lt;/p&gt;

&lt;p&gt;「可是我没有啊，而且我也不认为和老板有一腿有什么不好的。」&lt;/p&gt;

&lt;p&gt;「你看你面色红润，ru 房高耸，穿着时髦，时不时往老板办公室里钻，上班比谁都晚，下班比谁都早，升职比谁都快。就是我也相信你和老板有一腿啊。」&lt;/p&gt;

&lt;p&gt;陈清羊看我分析的头头是道，但回想到我夸她的用词，脸上泛出一道红晕。&lt;/p&gt;

&lt;p&gt;「要是你每天像我蓬头垢面，别人上班你下班，就没有人再说你。」&lt;/p&gt;

&lt;p&gt;之后，陈清羊还是经常来找我，要我证明。这样一来，在同事间反倒传出了我和她的绯闻来。绯闻闹的越厉害，她越是不怕，越是来找我。&lt;/p&gt;

&lt;p&gt;她和我说，同事都说她和我有一腿，要我证明没有。我想了想，说到：「我倒挺希望证明有。」她有点生气，她并不介意有一腿，介意的是没有的事，却被别人说成了有，感觉吃了亏。&lt;/p&gt;

&lt;p&gt;那天晚上我和她讲了很多故事，特别是水泊梁山的故事。我和她说，义气就是不管你是什么人，有多坏，都会无条件的支持你。我称它为「伟大友谊」，我和她就是伟大友谊。她听了很感动，仿佛某根神经被电触到，对我说的话深信不疑。&lt;/p&gt;

&lt;p&gt;我心里一阵窃喜，看了看外面，天色已晚，接着说到：「我来公司这么久了，一直都是一个人，有件事情，只有你才能帮我。」&lt;/p&gt;

&lt;p&gt;陈清羊的脸更红了，她知道是什么，为了伟大友谊，她什么都可以做。于是我们不约而同的拿出了笔记本电脑，我写代码她画画。我接了个私活，就缺一个设计师。&lt;/p&gt;

&lt;p&gt;我们接了不少私活，赚了不少钱。别人都知道我和她接私活，也就不再说有一腿的事了。后来有人向老板举报，老板要我们交代事情经过，不能遗漏任何一个细节。我把所有细节都交代了，唯独没有交代那天我指着陈清羊的设计稿大骂「什么狗屁设计」这件事，老板更关心的是敦伟大友谊的细节。&lt;/p&gt;

&lt;p&gt;后来陈清羊也交了一份自我检讨的材料上去，第二天我们就被开除了。老板给了我们 N+10 补偿，叫人帮我们收拾好，还特定送我们出了公司。&lt;/p&gt;

&lt;p&gt;我和陈清羊开了一家游戏公司，公司里没有狼，没有狗，也没有羊，只有人。现在公司已经有 168 人，一年的利润有 12 亿美元。我们的公司名叫「超级人」，我们尊重公司里的每个人，我们用正确的方式激励员工，发挥他们最大的创造力。他们工作的很开心，既实现了人生的价值，又收获了财富。&lt;/p&gt;

&lt;p&gt;陈清羊说，这是她的黄金时代，特别怀念当时敦伟大友谊时的紧张和兴奋。&lt;/p&gt;

&lt;p&gt;但是有一件事情我一直不敢问她，就是当年她写的那份材料到底写的什么，会让老板给了我们 N+10 的补偿，才有了第一笔启动资金。直到我去参加她和老板的婚礼，我才有勇气问她。&lt;/p&gt;

&lt;p&gt;她说，她只写了一件事。就是关于那天我指着她的设计稿，毫不留情面的大骂「什么狗屁设计」的这件事。在检讨材料里她写道，我骂她的一瞬间，她觉得如春藤绕树，小鸟依人，再也不想理会别的事，就在那一瞬间，她已经把一切都遗忘，她已经爱上我了，而且这件事永远都不能变。&lt;/p&gt;

&lt;p&gt;之后我再也没见过她。这就是我的黄金时代，一个程序员的黄金时代。&lt;/p&gt;

&lt;p&gt;题图摄影：chillmimi&lt;/p&gt;

&lt;p&gt;图片授权基于：CC BY 2.0 协议&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>7-Eleven 零售的哲学</title>
            <link>https://blog.coderzh.com/2016/04/10/7-eleven/</link>
            <pubDate>Sun, 10 Apr 2016 21:57:06 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/04/10/7-eleven/</guid>
            <description>&lt;p&gt;1956 年 4 月，有为青年「铃木敏文」大学毕业，进入东京出版贩卖公司，从「退货负责人」到「出版科学研究所」，再到宣传部杂志「编辑」，生活过的充实有趣。在三十岁之际，铃木打算不依靠公司，以自身的力量制作一个独立的电视节目。 &lt;/p&gt;

&lt;p&gt;铃木找到了赞助商「伊藤洋华堂」，一个经营大型商场的公司。「伊藤洋华堂」总部的人和铃木说：「就在我们这里完成这一项目怎样？」&lt;/p&gt;

&lt;p&gt;于是，铃木辞去旧工作，入职「伊藤洋华堂」，准备在电视节目上大展拳脚，却发现公司只是「说说而已」，他的电视节目变成了「将来再说」。&lt;/p&gt;

&lt;p&gt;虽然发现自己入了坑，但是铃木本着「干一行，爱一行」的精神，从一个零售业完全的门外汉开始认真的学习起这个行业。&lt;/p&gt;

&lt;p&gt;当时，经营新兴综合超市的伊藤洋华堂尚处于发展阶段，铃木在这个成长型企业兼顾了推广、宣传、人事、财务等几乎所有管理职务。20 世纪 60 年代后期，大型超市迎来了快速增长的繁荣期，而小型超市的状况也日渐惨淡。&lt;/p&gt;

&lt;p&gt;某一天，公司组织员工到美国研修，铃木在前往加利福尼亚的路上，进入一家小店休息，这家店的名字就叫：7-Eleven。 这个小型超市各种食品、生活杂物应有尽有，还真是便利啊。这给铃木留下了深刻的印象，不禁感叹：「没想到美国居然还有那么小的店啊。」&lt;/p&gt;

&lt;p&gt;铃木明白，日本小型超市经营惨淡的原因并非大型超市的竞争，而是自身服务的落后。他看到了日本「老龄化」，「少子化」，购物不便的趋势，看清了市场正从卖家市场转变为买家市场。&lt;/p&gt;

&lt;p&gt;为了证明小型超市只要为客户提供足够的便利，是完全可以和大型超市共存。铃木回国之后，说服总部加盟美国 7-Eleven（美国南方公司）。随后，1974 年 5 月 15 日，日本首家真正意义上的便利店 7-Eleven 开业。&lt;/p&gt;

&lt;p&gt;经过铃木独到的经营，7-Eleven 在日本大受欢迎。营业额直接超过了总部伊藤洋华堂，之后由于美国 7-Eleven 经营不善，作为子公司的日本 7-Eleven 直接把美国 7-Eleven 收购，上演了子公司吞并母公司的神话。如今的 7-Eleven 已经遍布世界各地，为各地的人们提供便捷的服务。&lt;/p&gt;

&lt;p&gt;为什么一个零售行业、流通行业的门外汉，上演了这一零售行业的奇迹？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;大多数人反对的事业往往能够获得成功&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;他坚持己见，认定的事情就一定要做到：&lt;/p&gt;

&lt;p&gt;为了让顾客能在便利店使用 ATM 取款机，铃木力排他异，专门开了一家银行只为顾客能在便利店取款。&lt;/p&gt;

&lt;p&gt;为了更高效的物流及工厂供应，他坚持密集型选址开设分店，并没有选址盲目的扩张。&lt;/p&gt;

&lt;p&gt;引入 POS 系统，让门店的零时工也能直接参与订货。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;比起「价廉」，更看重「物美」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了让顾客随时享受到新鲜美味的食物，他坚持专属产品研发工厂，365 天 24 小时保持供应，对上架的食品进行严格把关，必须经过管理层试吃。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不是「为了顾客」，而是要站在顾客的立场考虑&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;铃木主张从「等待型经营」转变为「进攻型」经营，提供「送货上门服务」和「网络零售」，在店里提供「打印复印」、「代收水电煤气」、「税金缴纳」、「免费 WIFI」等服务。&lt;/p&gt;

&lt;p&gt;这些今天看来司空见惯的东西在当时可是相当创新的。&lt;/p&gt;

&lt;h3 id=&#34;零售的哲学&#34;&gt;零售的哲学&lt;/h3&gt;

&lt;p&gt;《零售的哲学》这本书是铃木的自述，字里行间透露出了他深刻领悟用户需求，独到的想法，不管多难坚持付诸执行的决心。&lt;/p&gt;

&lt;p&gt;我从他的自述里看到了诚恳，做一件事就认真做到最好的态度。不是站在很高的高度指导他人传授成功的经验，而只是从自身出发，讲述当初遇到的困难及处理方法。&lt;/p&gt;

&lt;p&gt;铃木从来都没有喜欢过零售行业，他没有抱怨，想法很简单：既然做了，就要做到最好。&lt;/p&gt;

&lt;p&gt;我们程序员，并不从事零售行业，也能从铃木的自述里得到一些启发。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>我如何管理我的笔记</title>
            <link>https://blog.coderzh.com/2016/04/09/how-i-manage-my-notes/</link>
            <pubDate>Sat, 09 Apr 2016 14:57:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/04/09/how-i-manage-my-notes/</guid>
            <description>&lt;p&gt;我们从小就被教育：「好记性不如烂笔头。」我是一个笔记重度用户，也许是从小培养的习惯，喜欢把有意思的东西记在本子里。记录笔记有一种成就感，像玩游戏达成一个又一个成就。&lt;/p&gt;

&lt;p&gt;而如今网络如此发达，大多数的答案都可以通过你问出正确的问题得到解答。凯文·凯利在他的《必然》里有提到，未来，我们不缺乏答案，缺的是问出好的问题。Google 几乎索引了我们想要知道的所有问题的答案（百度索引了所有的相反答案），所以，理论上，我们不再需要记录自己的笔记。&lt;/p&gt;

&lt;p&gt;但事实却并不是这样的，首先，在中国，想要访问 Google 不是一件容易的事情。即使你功夫很好可以畅通无阻的访问，通过 Google 依然不是你最快捷获取已有知识的方式。因为你曾经在 Google 搜索结果里翻了好几页才找到的答案，下次搜索时还要再找一遍，效率是不高的。&lt;/p&gt;

&lt;p&gt;所以，记录笔记的需求一直都在。但是用纸记录笔记已经不适合。每次搬家或清理时，曾经写满笔记的小本子都会被我遗弃掉，如果不翻开那些小本子，我几乎不会记得我曾经记录过什么东西。一旦那些纸质笔记本被我扔掉，之前记录的所有笔记内容都会从我的记忆中抹去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以，用软件记录笔记是目前唯一正确的选择。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我尝试过各种笔记软件，其中「为知笔记」使用了最久，最早是因为他支持目录树的分类，后来是因为他支持直接写 Markdown。但前不久，我把我的几百篇为知笔记导出了（Windows 版支持导出），我打算以一种全新的方式来管理我的笔记。&lt;/p&gt;

&lt;p&gt;既可以说是「全新」，也是可以说是用最「原始」的方式管理笔记。即在本地完全由纯文本的方式来进行笔记管理。这种方式不再依赖任何一个笔记软件。&lt;/p&gt;

&lt;h3 id=&#34;所有的软件都不可靠&#34;&gt;所有的软件都不可靠&lt;/h3&gt;

&lt;p&gt;现有的所有笔记软件给我们一种假象：我们可以永远记录下去。事实并非如此，现在科技发展如此之快，公司被淘汰的速度也在加速，很有可能现在最流行的笔记软件几年后就关门大吉。&lt;/p&gt;

&lt;p&gt;现在市面上大多数的笔记软件的文件存储都是使用私有格式，一旦它停止服务，你只能寄希望于它提供的导出功能，然后盼望着另外一家笔记软件能导入这些笔记。&lt;/p&gt;

&lt;p&gt;类似的事情不断的在发生着，比如之前我最喜欢的 RSS 订阅服务 Google Reader。出自 Google 这样的大公司，用户体验各方面都做的非常好，但是 2013 年 7 月，Google 以运营成本太大，需求太小众，没有盈利模式等缘由将其永久的关闭了。作为 Google Reader 粉，不得不将订阅列表导出，不情不愿的迁移到 feedly 这样的服务。&lt;/p&gt;

&lt;p&gt;又比如，前不久，Facebook 宣布即将关闭著名的后台即服务（Baas）框架 Parse。Parse 作为全球最受欢迎的 Baas 服务，2013 年被 Facebook 收购后，由于 Facebook 自身业务需要，宣布 2017 年 1 月 28 日正式关闭。&lt;/p&gt;

&lt;p&gt;这将导致之前所有使用 Parse 服务的软件重新去考虑迁移的事宜。而事实上有很多软件已工作多年，而且几乎不再维护，一旦关闭，如果不进行迁移维护，那些软件将会失效。&lt;/p&gt;

&lt;h3 id=&#34;回归原始&#34;&gt;回归原始&lt;/h3&gt;

&lt;p&gt;使用纯文本在本地进行笔记管理，是最原始的笔记方式。你不必再担心笔记软件停止服务后你的笔记在哪里的问题。你也不依赖于任何一款笔记编辑软件，因为任何文本编辑器都可以直接进行笔记编辑。&lt;/p&gt;

&lt;p&gt;当然，在本地管理笔记必须解决几个问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;能不能很好的搜索笔记内容？&lt;/li&gt;
&lt;li&gt;能不能支持多平台的同步和编辑？（PC和移动端的编辑和同步）&lt;/li&gt;
&lt;li&gt;能不能保证笔记文件不丢失？&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;笔记搜索&#34;&gt;笔记搜索&lt;/h4&gt;

&lt;p&gt;从本地文件夹里搜索文件，或者搜索文件里的内容，有很多的工具。这些工具都是可替代的，即使所有 GUI 的工具软件都不能用了，我们还有 find 和 grep 命令。&lt;/p&gt;

&lt;p&gt;Mac 下支持 Markdown 的笔记软件多如牛毛，支持本地文档库管理的笔记软件相对来说少一些，比如：Ulysses、MWeb、Farbox 等等。但是这些软件我都不用，因为我直接用 Alfred 就够了。&lt;/p&gt;

&lt;p&gt;对，没有看错，是&lt;strong&gt;效率神器 Alfred&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在 Alfred 中我定制了一个笔记管理的 Workflow，当需要查找某一篇笔记时，只需要按下 &lt;code&gt;f&lt;/code&gt; 空格，输入需要检索的标题或正文关键字，Alfred 就可以直接列出对于的笔记文件，回车后即可直接打开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/find-notes.png-s&#34; alt=&#34;find-notes&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;笔记编辑&#34;&gt;笔记编辑&lt;/h4&gt;

&lt;p&gt;当我想记录编程相关的笔记时，只需要按下 &lt;code&gt;np&lt;/code&gt; 空格，输入文字标题，将自动在合适的路径创建一个新的笔记并打开编辑。（n = new，p = programming 分类）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/new-notes.png-s&#34; alt=&#34;new-notes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我会用 Atom 来打开和编辑笔记文件，因为它真的很好用。在 Atom 里，安装如下几个插件，编辑 Markdown 的体验将会爽的飞起：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;markdown-preview&lt;/strong&gt; 默认自带，按快捷键 ctrl + shift + m 即可实时看到预览。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;markdown-scroll-sync&lt;/strong&gt; 配合 markdown-preview 使用，编辑时可以同步滚动预览。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tidy-markdown&lt;/strong&gt; 按保存时，自带帮你修正 Markdown 格式，让你的 Markdown 更规范。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;markdown-wirter&lt;/strong&gt; 用来管理 Markdown 文档，用来写博客会很方便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zen&lt;/strong&gt; 神器，cmd + ctrl + z 进入无干扰书写模式，其中 Typewriter 打字机模式非常不错，当你输入到屏幕中间时，可以让输入的当前行一直保持在屏幕中间。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/atom-markdown.png-s&#34; alt=&#34;atom-markdown&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;alfred-workflow&#34;&gt;Alfred Workflow&lt;/h4&gt;

&lt;p&gt;想实现上面 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;np&lt;/code&gt; 之类的功能非常简单，通过组合 Workflow 里的 FileFilter、ScriptFilter、Run Script 即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/MyNotes-Workflow.png-s&#34; alt=&#34;MyNotes-Workflow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;你可以在 Alfred 的 Workflow 中定制自己的快捷键、笔记类别、笔记路径，非常的简单。如果不知道怎样定制，可以参考我的 Workflow：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/coderzh/alfred-workflows&#34;&gt;https://github.com/coderzh/alfred-workflows&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;笔记多平台同步&#34;&gt;笔记多平台同步&lt;/h4&gt;

&lt;p&gt;各种网盘，综合考虑后，我选择了 Dropbox。（为了能正常使用 Dropbox 需要一点功夫。）&lt;/p&gt;

&lt;h4 id=&#34;移动端同步与编辑&#34;&gt;移动端同步与编辑&lt;/h4&gt;

&lt;p&gt;在支持 Dropbox 同步同时又支持 Markdown 编辑的 App 里选择，最后我选择了 &lt;a href=&#34;https://bywordapp.com/&#34;&gt;Byword&lt;/a&gt;，因为它的 Markdown 编写体验真的很好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xlx3k.com1.z0.glb.clouddn.com/byword.PNG&#34; alt=&#34;byword&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;保证笔记文件不丢失&#34;&gt;保证笔记文件不丢失&lt;/h3&gt;

&lt;p&gt;除了 Dropbox 同步，我会定期使用 git 进行版本管理，Push 到自己的私人仓库里。&lt;/p&gt;

&lt;p&gt;希望本文对喜欢做笔记的同学有点帮助吧。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>所有的编程技术都会成为历史</title>
            <link>https://blog.coderzh.com/2016/04/05/programming-languages/</link>
            <pubDate>Mon, 04 Apr 2016 16:28:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/04/05/programming-languages/</guid>
            <description>&lt;p&gt;大四的时候，我用当时最新的 ASP.NET 技术给我叔写了一个服装制衣厂管理软件，这个软件用了差不多 10 年，中间几乎没有维护过，到现在还在工作。前几天突然联系我说，这个软件能不能迁移到 Win7 上使用（之前是在 XP 上），我想了想，肯定没问题啊，即使不行，在 Win7 里跑个 XP 的虚拟机也行。&lt;/p&gt;

&lt;p&gt;最后，我还是给 ASP.NET 和 IIS 跪了，出各种莫名其妙的错误，从出错的内容里根本看不出任何可追踪的信息。 一个工作了近 10 年的系统，中间迁移重装过几次，工作的很好的系统，突然告诉我一个莫名其妙的错误，我猜八成是 .NET 或 IIS 的 Bug，关于 ASP.NET 的技术我已经忘光了，而且我再也不想在 .NET 上浪费光阴了。&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;于是我想，当时看来挺不错的技术，几年后，或者十年后，会变成怎样。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如，著名的后端即服务（baas）的框架 &lt;a href=&#34;https://parse.com&#34;&gt;Parse&lt;/a&gt; 在 2013 年时被 Facebook 收购。前不久，在 2016 年 1 月，Facebook 因自身业务需求， 宣布将于 2017 年 1 月 28 日正式关闭 Parse 服务。&lt;/p&gt;

&lt;p&gt;那些本以为使用了大公司服务就可以高枕无忧的开发者，又要开始忙碌起来，捣鼓起怎么迁移的事情，而且可以想象，有不少开发者使用 Parse 开发的 App 已经运行几年，本来可以忘记这事了，突然被强制要求回去维护，代价可不小。&lt;/p&gt;

&lt;p&gt;如今，多如牛毛的编程语言，各式各样玲琅满目的编程框架，常常让初学者困惑。「我该学什么编程语言？」「这个技术会不会过时？」这样的问题常常困惑着初学者。&lt;/p&gt;

&lt;p&gt;我的答案是，&lt;strong&gt;所有编程技术都会成为历史&lt;/strong&gt;。没有人能够预知未来的趋势，我们只能根据自身情况做出一个相对好的选择。我也走过不少弯路，在没必要的技术上花费了很多时间。&lt;/p&gt;

&lt;p&gt;第一个让我入门的编程语言是 QBasic，在我读初二的时候。它让我明白了原来我可以通过写代码控制计算机执行一些操作和运算。为什么会选 QB？当时我还小，连计算机为何物都不清楚，由我们学校的老师硬塞过来。原因只有一个：当时的计算机竞赛是用 QB 的。&lt;/p&gt;

&lt;p&gt;当时我被屏幕上跳动的字符所吸引，可是当时学习资源非常匮乏，在我们的小县城连一本 QBasic 教程也很难找到。学校的编程小组纯粹是为了应付竞赛，而我对能否通过编程做出有意思的东西更感兴趣。后来编程竞赛变成了 Pascal，于是又学了 Pascal。&lt;/p&gt;

&lt;p&gt;在盗版光盘店里，老板的一句话让我开始学习 Visual Basic，这也是我的第一次主动选择。因为会 QB，理解起 VB 会容易很多。而且，使用 VB 可以做出各种图形界面的软件。我所有关于 VB 的学习资料都来自于一本厚厚的 Visual Basic 编程宝典。&lt;/p&gt;

&lt;p&gt;上大学后，因为选的土木工程专业，唯一的编程课程是 Fortran。当我意识到我可以比边上同学花更少时间理解和上手 Fortran，我想我是不是应该在编程方面多下点功夫，而不是继续读着不喜欢的专业混到毕业。于是我重新拾起了 VB，报考了计算机二级 VB，非常轻松的通过了。&lt;/p&gt;

&lt;p&gt;我不断意识到，我可能更适合编程。由于当时上大学，网络也普及了，可以在网络上获取一些学习资料，同时学校图书馆里也有不少关于编程的书，我开始接触到一些新的东西。当时使用 ASP 做网页的技术很火，当我加入学校的一个编程组织时，ASP.NET 开始炒起来，于是我跟风开始学 ASP.NET。&lt;/p&gt;

&lt;p&gt;而我当时最熟的是 VB，所以看 C# 很不习惯，特别不理解为什么代码里需要那么多花括号。于是我在开始的相对长的一段时间里，我是使用 VB.NET 来进行 .NET 开发的。当时的我并不理解 VB 和 C# 的区别，觉得既然微软发明了这两种语言，选择自己喜欢的就好了。后来才发现身边的朋友全在用 C#，而我成了一个异类。每次和他们沟通都要在脑海里进行编程语言的转换。终于有一天我受不了了，也学起了 C#。从此 VB 再没有用过了。&lt;/p&gt;

&lt;p&gt;找工作时好多公司都是招 C++ 程序员，而我又不太会，于是找了一份可以使用 C# 的工作。工作后，才发现自己和周围科班出身的同事的差距。于是开始补各种基础知识：计算机原理、数据结构、算法、C/C++ 语言。为了验证学习的效果，我报考并通过了 08 年软件设计师的考试。&lt;/p&gt;

&lt;p&gt;后来和同事沟通时，第一次听说了 Python 这门语言，还有 Ruby On Rails。在这两者中我选择了学习 Python，然后一发不可收拾的爱上了这门语言。&lt;/p&gt;

&lt;p&gt;而关于微软的技术，除了 .NET 3.0 刚出来的时候关注过一阵，之后出的各种：WCF，WPF，Silverlight&amp;hellip;&amp;hellip; 等技术时，我只是在一边看着，成功的闪避了，没有在上面浪费过时间。&lt;/p&gt;

&lt;p&gt;后来做游戏开发的时候，已经是专职 C++ 和 Lua 程序员了。之后在业余时间，开始捣鼓起 Go 语言。&lt;/p&gt;

&lt;p&gt;对了，关于 Java，我从未看过任何一本相关的书，都是按照写 C# 的思维来写 Java，除非老板拿枪指着，我也不会拿 Java 去写代码。 当然，写 Android 时会被迫使用 Java。&lt;/p&gt;

&lt;p&gt;目前前端很火，我却不太感冒，各种前端框架停留在能简单使用的状态。Javascript 依葫芦画瓢还是可以的。&lt;/p&gt;

&lt;p&gt;我当时花了不少时间研究和使用，到现在几乎被淘汰的技术还有 Google 的 Google App Engine。如果当时我把学 GAE 的时间拿去学 Ruby 该有多好啊。&lt;/p&gt;

&lt;p&gt;总结一下我正统的学习编程语言的历程：&lt;/p&gt;

&lt;p&gt;QB -&amp;gt; Pascal -&amp;gt; VB -&amp;gt; C# -&amp;gt; C/C++ -&amp;gt; Python -&amp;gt; Lua -&amp;gt; Go&lt;/p&gt;

&lt;p&gt;前三个我已经忘的一干二净，但是在当时的情景下，对我的帮助和影响还是巨大的。&lt;/p&gt;

&lt;p&gt;当然，我还在继续前进。下一个编程语言，我准备学习 Swift，纯粹为了好玩，因为「所有的编程技术都会成为历史」，如果一门编程语言能够给你编程语言之外的启发，也就足够了!&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
