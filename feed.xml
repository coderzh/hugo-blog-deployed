<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CoderZh Blog on CoderZh Blog</title>
        <link>https://blog.coderzh.com/feed.xml</link>
        <language>zh-CN</language>
        <author>CoderZh</author>
        <rights>Copyright (c) 2015, CoderZh; all rights reserved.</rights>
        <updated>Sat, 23 Feb 2019 15:50:19 CST</updated>
        
        <item>
            <title>我的 2018</title>
            <link>https://blog.coderzh.com/2019/02/23/my-2018/</link>
            <pubDate>Sat, 23 Feb 2019 15:50:19 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2019/02/23/my-2018/</guid>
            <description>

&lt;p&gt;做为一年一度的年更文章，我觉得还是有必要写下。18 年过的真是一个快字，但仔细回想一下，中间还是发生很多事，最终凝结成两个字：感恩。&lt;/p&gt;

&lt;h3 id=&#34;读书&#34;&gt;读书&lt;/h3&gt;

&lt;p&gt;2018 年，买了两本纸质书《编程语言实现模式》、《编译原理（第2版）》。一方面，买的纸质书少了，原因是发现很多技术类书都可以从广州图书馆里借到，所谓书非借不能读也。另一方面，当时买这两本书是为了更深入的学习和研究 V8 JavaScript 引擎。因为新的开发岗位，需要大量和 V8 打交道，所以想研究的更深入一些。这一年，V8 相关研究了不少，之后有机会的话写个系列文章分享一下。但是遗憾的是，买的这两本书还并没有怎么翻，这也侧面说明了我研究的还不够深入吧，2019 年继续加油。&lt;/p&gt;

&lt;p&gt;图书馆借阅的技术类书包括：《WebKit技术内幕》、《Effective Javascript》、《深入实践C++模板编程》、《深入理解C++11》、《高级C/C++编译技术》、《WebGL编程指南》、《高性能JavaScript》、《C++性能优化指南》、《网络多人游戏架构与编程》、《HTML5动画创作技术：DragonBones》、《C++必知必会》、《C++之旅：英文版》、《ZeroMQ：云时代极速消息通信库》、《网络多人游戏架构与编程》等等。不足之处是书即使是借的也不一定真的读了。&lt;/p&gt;

&lt;p&gt;微信读书里真的看完的书有：《区块链：定义未来金融与经济新格局》、《OKR工作法：谷歌、领英等顶级公司的高绩效秘籍》、《快速阅读术》、《原则》、《蒙台梭利的早期教育》、《儿童教育心理学》、《硅谷之火：人与计算机的未来》、《AI迷航2：复活爱因斯坦》、《未来世界的幸存者》、《软技能：代码之外的生存指南》、《流浪地球》等等。&lt;/p&gt;

&lt;p&gt;总结一下就是，主动看书的时间很少，大部分是在地铁上被动看的微信读书。2019年希望能有更多的主动阅读时间，争取做到借阅的书看完再还。&lt;/p&gt;

&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;

&lt;p&gt;2018 年在 GitHub 上的代码提交次数寥寥无几。gohugo.org 和 Q 群也几乎没有维护过。hugo-pacman-theme 主题也因为长期不维护，被移出了 Hugo 官方主题列表。这一年，写的主要是工作相关的代码，业余时间写代码的时间真的很少，19 年希望有所改善。&lt;/p&gt;

&lt;h3 id=&#34;工作&#34;&gt;工作&lt;/h3&gt;

&lt;p&gt;18 年初转岗到现在刚好一年，很快适应了新的岗位。非常庆幸去年做的选择，工作的内容更加聚焦，有趣，而且富有挑战，希望 19 年有更大的突破。&lt;/p&gt;

&lt;h3 id=&#34;锻炼&#34;&gt;锻炼&lt;/h3&gt;

&lt;p&gt;去年开始固定每周打乒乓球，买了专业的拍子，甚至小区里还有热心教练指导练球。后来春节期间中断了一段时间，现在准备继续打起来。佳明 Forerunner 235 找了很久也找到了，但是跑步很少，主要感觉跑步时间又长又无聊，相比起来，乒乓球真是不错的运动。&lt;/p&gt;

&lt;h3 id=&#34;全新出发&#34;&gt;全新出发&lt;/h3&gt;

&lt;p&gt;2018 有不足，也有惊喜。&lt;/p&gt;

&lt;p&gt;《动物世界》电影里有句台词：『该打的仗我已经打过了，该跑的路我也跑到了尽头，老子信的道老子自己来守。』&lt;/p&gt;

&lt;p&gt;2019，继续守自己的道，心态上全新出发，希望在更多方面能够有所突破，加油！&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Mac 上配置 VSCode 的 cquery 插件</title>
            <link>https://blog.coderzh.com/2018/10/14/cquery/</link>
            <pubDate>Sun, 14 Oct 2018 17:56:47 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2018/10/14/cquery/</guid>
            <description>

&lt;p&gt;VSCode 已经成了我的主力编辑器，包括用来写 C++。虽然默认的 cpptools 插件已经很好用了，但 cquery 插件更加强大，极力推荐。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cquery-project/cquery&#34;&gt;cquery&lt;/a&gt; 是基于 LSP（Language-Server-Protocol）的。LSP 是微软推出的开源的语言服务器协定，语言服务端提供索引代码的服务，编辑器直接调用，用来实现语法补全及各种索引重构功能。&lt;/p&gt;

&lt;p&gt;cquery 就是其中一种 C/C++/Objective-C 的 language server。它的特点是速度非常非常的快，延迟特别低，它设计出来就是为了在大型的代码工程里也能很好的使用。比如 Chromium、V8 这样的大型工程。&lt;/p&gt;

&lt;p&gt;心动不如行动，赶紧折腾起来吧，以我的 Mac 为例：&lt;/p&gt;

&lt;h3 id=&#34;1-编译-cquery&#34;&gt;1. 编译 cquery&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/cquery-project/cquery.git --recursive
cd cquery
git submodule update --init
mkdir build &amp;amp;&amp;amp; cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
make install -j8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;问题来了，最新的 cquery 默认依赖 clang 7.0.0，而我的 Mac 上是 6.0.0。所以上面的 cmake 命令执行后，会报下面的错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No SHA256 hash available for the current platform (Darwin) + clang version
  (6.0.0) combination.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看了下 cquery 的编译脚本，解决方法也很简单，手工创建一个 6.0.0 的 SHA256 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd cquery
echo 0ef8e99e9c9b262a53ab8f2821e2391d041615dd3f3ff36fdf5370916b0f4268 &amp;gt; clang_archive_hashes/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz.SHA256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再执行 cmake 会自动下载 clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz。但是下载很慢，可以手工下载(&lt;a href=&#34;https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz&#34;&gt;https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz&lt;/a&gt;
)好，并解压到 build 目录，然后上面的命令就可以顺利的进行下去了。&lt;/p&gt;

&lt;p&gt;编译后的二进制会在 &lt;code&gt;release/bin&lt;/code&gt; 目录，稍后把路径填入 VSCode 的配置中。&lt;/p&gt;

&lt;h3 id=&#34;2-vscode-安装-cquery-插件&#34;&gt;2. VSCode 安装 cquery 插件&lt;/h3&gt;

&lt;p&gt;直接在 VSCode 里搜 cquery 插件安装即可。然后在 VSCode 里设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;cquery.launch.command&amp;quot;: &amp;quot;/absolute/path/to/cquery/release/bin/cquery&amp;quot;,
    &amp;quot;cquery.cacheDirectory&amp;quot;: &amp;quot;/User/your-name/.cquery-cache/&amp;quot;,
    &amp;quot;cquery.completion.include.blacklist&amp;quot;: [&amp;quot;.*/.vscache/.*&amp;quot;, &amp;quot;/tmp.*&amp;quot;, &amp;quot;build/.*&amp;quot;],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他相关设置，可参考一下（关掉 cpptools 相关设置）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;C_Cpp.autocomplete&amp;quot;: &amp;quot;Disabled&amp;quot;,
  &amp;quot;C_Cpp.formatting&amp;quot;: &amp;quot;Disabled&amp;quot;,
  &amp;quot;C_Cpp.errorSquiggles&amp;quot;: &amp;quot;Disabled&amp;quot;,
  &amp;quot;C_Cpp.intelliSenseEngine&amp;quot;: &amp;quot;Disabled&amp;quot;,
  &amp;quot;editor.autoClosingBrackets&amp;quot;: &amp;quot;never&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-生成-compile-commands-json&#34;&gt;3. 生成 compile_commands.json&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;compile_commands.json&lt;/code&gt; 文件是 cquery 用来索引你的代码工程所需要的。它可以从 cmake 里直接生成出来，只需要在 cmake 的编译参数里加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS=YES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后把生成的 compile_commands.json 拷到工程的根目录。&lt;/p&gt;

&lt;h3 id=&#34;4-可以开心愉快的玩耍了&#34;&gt;4. 可以开心愉快的玩耍了&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://image.coderzh.com/cquery.png&#34; alt=&#34;cquery&#34; /&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>短内容博客</title>
            <link>https://blog.coderzh.com/2018/10/13/short/</link>
            <pubDate>Sat, 13 Oct 2018 22:25:11 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2018/10/13/short/</guid>
            <description>&lt;p&gt;之前定的一个月写一篇博客还是没有做到，想来主要是以下几个原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;带娃&lt;/li&gt;
&lt;li&gt;下班了就想放松一下，玩玩游戏（王者荣耀、刺激战场）&lt;/li&gt;
&lt;li&gt;写长内容太费时间精力&lt;/li&gt;
&lt;li&gt;没什么内容可写&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今天看了下我的公众号关注人数已经几乎3000人，但更新频率几乎是一年一篇。我的博客应该没多少人看，所以写的随意些吧，比如看上去像没有写完的短内容文章，也通通发上来罢！&lt;/p&gt;

&lt;p&gt;写点短内容，相对比较轻松一些，同时也能记录到一些想法。某些时刻，写着写着，也许文思泉涌写出来一篇长文，也是有可能的。&lt;/p&gt;

&lt;p&gt;今天就到这里，期待以后有所改变。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>读一本书，只为邂逅那一句</title>
            <link>https://blog.coderzh.com/2018/03/11/readbook/</link>
            <pubDate>Sun, 11 Mar 2018 22:36:27 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2018/03/11/readbook/</guid>
            <description>&lt;p&gt;『读一本书，只为邂逅那一句』，是我从《快速阅读术》里读来最深的一句感悟。&lt;/p&gt;

&lt;p&gt;书的作者是一名专业的书评人，每年阅读的书数量达到 700本。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>带娃的一点心得</title>
            <link>https://blog.coderzh.com/2018/03/04/education/</link>
            <pubDate>Sun, 04 Mar 2018 22:17:48 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2018/03/04/education/</guid>
            <description>&lt;ol&gt;
&lt;li&gt;不欺骗&lt;/li&gt;
&lt;li&gt;讲原则，说到做到&lt;/li&gt;
&lt;li&gt;正向引导，不说反话&lt;/li&gt;
&lt;li&gt;不轻易打断，保护专注力&lt;/li&gt;
&lt;li&gt;认真陪他玩，不玩手机&lt;/li&gt;
&lt;li&gt;鼓励各种探索尝试，只要确保没有危险&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
        <item>
            <title>我的 2017</title>
            <link>https://blog.coderzh.com/2018/02/25/my-2017/</link>
            <pubDate>Sun, 25 Feb 2018 00:15:00 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2018/02/25/my-2017/</guid>
            <description>

&lt;p&gt;2017 总结：写了一篇博客，发了一篇公众号。完。&lt;/p&gt;

&lt;p&gt;为什么写的少了，如果说因为带娃太忙没有时间，都是借口，时间挤一挤总会有的。这一年，我看了一些书，学了一些东西，做了一些决定，每次想写点东西又不知为何总是没有做到。也许是懒了，也许是浮躁了，因为写东西太花时间了。我写作速度不快，简单的几句话总是要反复斟酌。所以想着还不如把时间用来学习更深入的东西，写更多的代码。结果也看到了，深入的东西没有学到多少，代码没写多少，同时，文章也一篇没有写。&lt;/p&gt;

&lt;p&gt;所以看来，把写作的时间腾出来学习对我来说是个伪命题。最近在看《快速阅读术》，里面就提到了『呼吸』式阅读，即不能只看（吸气），还要写下来（呼气），这样能减轻阅读的负担，还能帮助吸收理解。所以，希望之后我能尽量多写吧，就算写的内容对别人没什么帮助，至少可以写给自己。&lt;/p&gt;

&lt;h3 id=&#34;读书&#34;&gt;读书&lt;/h3&gt;

&lt;p&gt;这一年，我买了好多纸质书，已经堆满了我的桌子。主要是技术类的书籍：《Hadoop权威指南》（影印版，没看），人工智能类书籍：《神经网络与深度学习》、《TensorFlow实战》、《图解机器学习》、《程序员的数学1,2,3》、《高等数学上下册》、《深度学习》、《机器学习》（西瓜书），编程语言类：《Go语言实战》、《Kotlin实战》、《Javasript权威指南》，游戏渲染相关：《WebGL编程指南》、《OpenGL ES 3.0编程指南》、《OpenGL超级宝典》、《OpenGL编程指南》&lt;/p&gt;

&lt;p&gt;首先说说人工智能，自 AlphaGO 先后击败人类顶级围棋选手李世石、柯洁，可以说 AI 大热。整个业界、整个公司都掀起了一股学习 AI 的热潮。为了搞清楚机器学习、深度学习到底是个什么东西，我投入了不少的精力，最后我觉得也算是简单的入门了，更高深的就不敢说。&lt;/p&gt;

&lt;p&gt;从零开始学习机器学习，一开始我感到很吃力。大家都知道学习一门编程语言时，都会先学习 Hello World 怎么写。最让人受打击的是，一开始学习的房价预测这个 HelloWord 级别的线性模型时，就让我倍感吃力。突然感觉数学知识不够用了，然后找来《高等数学》把卡住的几个概念温习了一遍，然后在脑子里不停的想那个梯度下降到底是个什么东西。我又找来 Andrew Ng 的视频，然后继续想这个东西的本质是什么。&lt;/p&gt;

&lt;p&gt;某天突然就想明白了，就是设计了一个模型，然后通过求导，不断迭代，将预期值和实际值的误差降到最小，然后把模型的参数计算出来的一个过程。而且，如果你使用 TensorFlow 之类的框架的话，甚至求导和梯度下降都不需要你来做了，直接一个 API 搞定了。之后深度学习相关的一些模型、CNN、聚类算法等等，也有了概念性的直观理解。知道大概是怎么回事，虽然没有太多的动手实践。然后发现，原来写个手写数字识别的程序也是这么简单的事情。最后我极力推荐李宏毅老师关于 Deep Learning 的课程，去 YouTube 搜下就有了。这是我看过的讲的最生动、最通俗易懂，同时讲的也很透彻的课程了（嗯，不用谢）。&lt;/p&gt;

&lt;p&gt;17 年底，微信上线了『小游戏』。为了职业生涯的转型，我突击了一下游戏渲染相关的知识。之前做游戏开发时，主要做的是游戏逻辑、UI、后台相关的开发，对渲染引擎这块感觉专业性太强，有点敬而远之。这次沉下心来学习，感觉自己的知识体系又打开了一扇门。&lt;/p&gt;

&lt;p&gt;除了技术类的书，我都首选看电子版了。主要是在微信读书和 Kindle 上看。读过的有印象的书罗列一下：《腾讯传》、《如何高效学习》、《教父》三部曲、《摩根写为儿子的32封信》、《人民的名义》、《刻意练习》、《富爸爸穷爸爸》、《股票大作手回忆录》、《从20万到30亿：特朗普自传》 等等。&lt;/p&gt;

&lt;p&gt;印象最深刻的是《教父》和《富爸爸穷爸爸》。教父讲的其实是一个在外打拼，为了给家里人更好生活，但被形势所迫，一步一步成为黑帮老大的故事。它讲的其实是作为男人对家庭的责任感。教父不管在外面要忍受什么，做多么危险的事，在家时从不在家人面前讨论工（砍）作（人）。他所做的一切，都是为了保护他的家人。反复刷教父电影三部曲还不过瘾，又拿书来刷。惊喜的是书里的第二部和第三部是另外单独的故事，特别是第二部关于吉利安诺的故事。印象最深的是他被枪击后顿悟的那段，特别的精彩，很好奇为啥没有拍成电影。&lt;/p&gt;

&lt;p&gt;《富爸爸穷爸爸》也是很老的书了，看完之后才发现我就是书里提到的财商很低的人啊。原来谈钱并不是那么让人羞耻的事情，特别是程序员，跳槽谈钱时，总是感觉扭扭捏捏难为情，其实大可不必。首先我们要端正对钱的态度，我们追求金钱，是为了改善和保障家人的生活。其次，我们要学习怎样赚钱，怎样让钱为我工作，而不是我为钱工作，最终走上快车道，实现财务自由。这本书早在 2000 年左右就出了，如果当时就看了并且砸锅卖铁投资房地产，现在不就发了吗。当然，开始投资从来都不晚，机会到处都是，就看你能不能看准了。&lt;/p&gt;

&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;

&lt;p&gt;2017 年我在 GitHub 上的代码提交次数只有 30 几次，可以忽略不计了。这里特别要提下 Go 的静态网站生成器 Hugo，从我最早使用时的 v0.1 几版本，到现在已经到了 v0.36 版本。开源社区的项目就像一个大轮子，单位时间内虽然不是速度最快，但是不断有人参与进来推动轮子前进，不知不觉之间，已经前进了很多很多。新版本不断在改进完善，旧的过时功能不断被修正和删除，以至于之前我写的几个主题被迫进行了几次升级，以支持新版的 Hugo。&lt;/p&gt;

&lt;p&gt;就在我兴致勃勃打算写这篇文章时，才发现使用最新版 Hugo 生成我的博客页面时，所有文章列表相关的页面都生成不出来了。于是我用了一个晚上的时间去查原因，看 Hugo 的更新文档，最后解决好之后已然夜深人静了。&lt;/p&gt;

&lt;p&gt;之前我在用 Cocos2d-x 写游戏时也有这种感悟。某天突然心血来潮想写个小游戏玩玩，然后发现 Cocos2d-x 又更新了好几个版本，加了好多内容。等我更新完 SDK，看过更新的内容之后，写游戏这件事本身却被抛在了脑后。等哪天突然又想起来，发现 SDK 又更新了，周而复始。我写游戏的速度，已经赶不上游戏引擎更新的速度了。&lt;/p&gt;

&lt;p&gt;所以，我的一个感悟是，这个世界正在以你难以想象的速度在向前发展，不管你看得见还是看不见。所以你一定要保持前进，保持进步，不然等你回过神来，会发现已经被远远的抛在后面。&lt;/p&gt;

&lt;h3 id=&#34;重点&#34;&gt;重点&lt;/h3&gt;

&lt;p&gt;没错，前面说的都不重要。保持身体健康，心情愉快，家庭和谐才是最重要的。所以，2018 年的一个小目标是：坚持锻炼身体。对了，去年买的佳明 Forerunner 235 手表不知道放哪里去了，我要去找找了，再见。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>我的 2016</title>
            <link>https://blog.coderzh.com/2017/01/01/my-2016/</link>
            <pubDate>Sun, 01 Jan 2017 00:00:00 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2017/01/01/my-2016/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;http://image.coderzh.com/baseball.JPG&#34; alt=&#34;baseball&#34; /&gt;&lt;/p&gt;

&lt;p&gt;光阴似箭，岁月如梭，仿佛去年写「我的 2015」就在昨日，然而时间的确在滴滴答答中度过了 365 天。这一年里，经历了一些事，读了一些书，努力过，收获过，感恩 2016。&lt;/p&gt;

&lt;h4 id=&#34;公众号&#34;&gt;公众号&lt;/h4&gt;

&lt;p&gt;其中一个变化是，我的公众号（博客）的更新频率越来越低了。2016 年我总共写了 20 多篇文章，平均算下来，2 周才有 1 篇。相比去年的 1 周 1 篇少了不少。&lt;/p&gt;

&lt;p&gt;这其中有几个原因，首先，工作占据了我更多的时间。有的时候为了解决问题，不可避免的把工作带回了家。其次，随着小孩的长大，周末需要花更多的时间带小孩，陪家人。第三，见识了越多优秀的人，越发现自己的无知，与其为了 1 周 凑上 1 篇，还不如多沉下心学习，做些更深入的研究，多读点书，多写点代码，多存点干货再来分享。第四，还是因为懒。&lt;/p&gt;

&lt;h4 id=&#34;读书&#34;&gt;读书&lt;/h4&gt;

&lt;p&gt;2016 年，我读了以下书：《必然》、《MacTalk 跨越边界》、《7 Eleven零售的哲学》、《改变未来的九大算法》、《重来》、《马克·扎克伯格传》、《硅谷钢铁侠：埃隆·马斯克》、《途客圈创业记》、《福特自传》、《人类简史：从动物到上帝》、《Google 重新定义公司》、《Android 软件安全与逆向分析》、《第二次机器革命》、《接纳不完美的自己》、《黑客》、《成为乔布斯》……&lt;/p&gt;

&lt;p&gt;其中的《人类简史》开阔了我的思维认识，也是张小龙极力推荐的。但对我的思维改变最大的，是《接纳不完美的自己》这本书。书中提到一个形象的比喻：每个人刚出生时内心都有一座很大的城堡，城堡里有很多的房间，各式各样的房间，每个房间代表一种特质，比如：善良、勇敢、正直、激情，当然也包括了：自私、胆小、愚蠢，奸诈等不好的特质。开始每扇门都是对外敞开的。随着慢慢的长大，你去了别人的城堡，发现有些不好的特质是别人没有的（或许是被藏起来了），于是你把不好特质的门锁上，不让别人进去，甚至是自己。慢慢的，越来越多的门被锁上，偌大的一座城堡，最后你只能在很少的房间活动。&lt;/p&gt;

&lt;p&gt;那些被锁上的房间，正是不完美的自己。有些人选择把锁住的房间遗忘，而一旦发现别人表现出不好的特质，则会异常的激动和排斥。比如，你认为某个人非常的小气，甚至为此感到不齿，其实恰恰说明了你自己正是一个小气之人。因为你害怕别人说你小气，于是小气之门被你严严锁死，一旦你发现某个人表现出小气的特质时，你就会异常的激动，拼命的表现出不齿的感觉以和小气撇清关系。&lt;/p&gt;

&lt;p&gt;所以，接纳不完美的自己，第一步是把自己内心深处的房间打开。每当你觉得别人怎么怎么样时，你越是激动，越要想一想，我是不是越是一样，只是我把门锁上了(直白一点：你越认为别人笨，其实越是你笨。你越是认为别人心机婊，其实你越是心机婊)。于是你会对别人的缺点更加宽容，也能更好的反思自我。第二步是必要时利用你的缺点。比如有人要非法拆迁你的房子，你是不是表现的无赖一些反而会更好。&lt;/p&gt;

&lt;h4 id=&#34;代码&#34;&gt;代码&lt;/h4&gt;

&lt;p&gt;写代码依然是一件非常有意思的事情。2016 年的一个重大变化是，我的开发环境已经全面转向了 Mac。我深刻的感受到了《成为乔布斯》书中提到的乔布斯对艺术和美的追求。一句话：用更好看的 Mac，写代码不折腾。&lt;/p&gt;

&lt;p&gt;编程语言方面，Go 和 Swift 走马观花了一下，node.js 有初步涉及。主力语言还是 Python 和 C++，有时也会被老板用枪指着写点 Java。&lt;/p&gt;

&lt;p&gt;机器学习粗浅了解，还未入门，来年要加大学习投入。&lt;/p&gt;

&lt;p&gt;从 GitHub 统计的我过去一年的贡献活跃度可以看出，下半年开始，我变得非常的不活跃，来年争取填满更多的格子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://image.coderzh.com/github2016.png&#34; alt=&#34;github2016&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;工作&#34;&gt;工作&lt;/h4&gt;

&lt;p&gt;依然认为是最棒的公司。来年继续加油。&lt;/p&gt;

&lt;h4 id=&#34;不足&#34;&gt;不足&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;公众号（博客）写少了。&lt;/li&gt;
&lt;li&gt;GitHub 代码写少了。&lt;/li&gt;
&lt;li&gt;运动少了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;展望&#34;&gt;展望&lt;/h4&gt;

&lt;p&gt;好的习惯继续发扬，不足要改掉，健身的重要性要提高一个 Level。&lt;/p&gt;

&lt;h4 id=&#34;最后&#34;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢你们！如此低的更新频率下还没有退订，感谢！Happy 2017!&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>真正的黑客</title>
            <link>https://blog.coderzh.com/2016/10/16/real-hacker/</link>
            <pubDate>Sun, 16 Oct 2016 21:55:45 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/10/16/real-hacker/</guid>
            <description>&lt;p&gt;当听到「黑客」一词时，你的第一反应是什么？是行为古怪，专门通过计算机干坏事的坏蛋，还是深藏不漏令人敬仰的技术大神。我们从小形成的固有观点认为，黑客等同于坏蛋，是具有贬义的。但在《黑客与画家》一书中，作者认为黑客是被称为书呆子，技术出众而且富有创造力，做着改变世界的一群人。&lt;/p&gt;

&lt;p&gt;如果想更深入了解「黑客」一词的起源，就得从《黑客》这本书看起。《黑客》一书中，绘声绘色的描述了世界上第一批黑客的诞生，他们从哪里来，具备什么特点，他们想干些什么。&lt;/p&gt;

&lt;p&gt;第一批真正的黑客，出现在 20 世纪 50~60 年代的 MIT。在那个年代，计算机还是价值数百万美元的庞然大物。IBM 704 需要占据整整一间房子，始终由一队专业的机器操作员看管，需要专用的空调，以免机器内部过热而烧坏。所以，计算机是极其稀缺的资源，每个人只能轮流安排有限的时间上机。MIT 的黑客们对计算机有种天生的狂热，他们为了有更多的上机时间，在机房蹲守，尽可能占用那些没来的同学的上机时间。一到深夜，他们撬开机房的锁，尽情的使用计算机。&lt;/p&gt;

&lt;p&gt;既然计算机资源如此珍贵，大家都认为应该让计算机干一些高大上的事情。但 MIT 的黑客们完全不吃这一套。彼得·萨姆森整晚都在编写一个即时将阿拉伯数字转换成罗马数字的程序，别人很难理解这有什么意义。萨姆森彻夜编写能演奏音乐的程序，别人不能理解，为什么要用这台 300 万美元的机器，去完成一个价值 5 美元的玩具钢琴就能完成的小事。&lt;/p&gt;

&lt;p&gt;从 IBM 704 到 TX-0 再到 PDP-1、PDP-6，他们追求用最少的汇编语句实现功能，他们称之为「正确答案」。他们擅自拆开价值昂贵的计算机，将指令解码器 add 线和 store 线的二极管相连，只为给计算机增加一条新的「累加至内存」的汇编指令，而当时哪怕私自更换打字机的墨带也会被永远的驱逐出去。&lt;/p&gt;

&lt;p&gt;他们研究高精尖的 AI 领域，教计算机下国际象棋。&lt;/p&gt;

&lt;p&gt;他们控制机械手臂，自动捡起抛过去的物体。&lt;/p&gt;

&lt;p&gt;他们设计制造自动打乒乓球的机器人。&lt;/p&gt;

&lt;p&gt;他们在 PDP-6 上移植了 LISP 语言。&lt;/p&gt;

&lt;p&gt;他们编写《太空大战》游戏。&lt;/p&gt;

&lt;p&gt;他们对现有的分时操作系统不满意，自己实现了不兼容分时系统（ITS）。&lt;/p&gt;

&lt;p&gt;他们痴迷于《LIFE》游戏。&lt;/p&gt;

&lt;p&gt;他们信奉的黑客道德是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对计算机的访问应该是不受限制的、完全的。任何人都有动手尝试的权利！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他们把《太空大战》游戏的纸带放在抽屉里，任何人都可以打开它，阅读代码，优化代码，修改代码，然后再放回抽屉。这个抽屉不就是现在的 github 吗？然而他们更甚，他们相信黑客道德，相信每个使用计算机的黑客都会尊重别人的成果，分享自己的代码，不会随便删除别人的代码。他们设计的 ITS 操作系统居然是没有账号密码的，任何人都可以随意访问他人的文件！&lt;/p&gt;

&lt;p&gt;他们追求完美，不擅于和妹子沟通，一名 PDP-6 黑客在将近 20 年后依旧如此评论：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;即使在今天，女性也被认为是完全难以预测的。一个黑客怎么能够容忍这样一种不完美的存在呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;别人认为他们有社交障碍，其实真相却是如大卫·塞维亚所说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对于这些人来说，似乎必须非常才华横溢，并且从某种意义上讲，他们需要在社交方面有所障碍，这样，他们才能完全集中精力做一件事情。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1972 年阿波罗 17 号登月旅行之日，高斯珀作为实验室黑客的一份子受邀来到「科学游轮」近距离观看太空飞船发射，船上挤满了科幻小说作家、未来学者、科学家、评论员。开始时，高斯珀还对此不屑一顾。当火箭发射时，能量冲击波近在咫尺时，他的衬衫紧紧贴在胸口，口袋里的零钱叮当作响，PA 系统的扬声器从观景台的托架上掉落，悬挂在电源线上摇摇晃晃。&lt;/p&gt;

&lt;p&gt;阿波罗 17 号，这艘如果没有计算机就不可能如此真实地发射的火箭直冲云霄，快速地飞向浩瀚宇宙。火箭发射的景象给高斯珀带来了深刻的影响。他看到了现实世界在下定决心之后能够创造出怎样令人赞叹的奇迹。美国宇航局并没有遵循黑客道德，但是却实现了实验室倾其所有也不可能实现的事情。从某种意义上讲，他们这些黑客在欺骗自己，使用能力有限的机器工作，但却依然尝试着实现全部的事情，让自己在这间实验室里改变整个世界。这是第一代黑客的反思。&lt;/p&gt;

&lt;p&gt;不可否认的是，他们聪明绝顶，才华横溢，他们推动了计算机的发展，最终让计算机走进了千家万户，真正的改变了世界。&lt;/p&gt;

&lt;p&gt;思考：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;我第一次接触计算机时的感受是怎样的？&lt;/li&gt;
&lt;li&gt;我把编程视为狂热的爱好，还是仅仅为了谋求一份工作？&lt;/li&gt;
&lt;li&gt;我们现在拥有比以往黑客都要好的计算机资源，为何做不出一件改变世界的事情？&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
        <item>
            <title>小目标</title>
            <link>https://blog.coderzh.com/2016/09/25/small-plan/</link>
            <pubDate>Sun, 25 Sep 2016 23:43:43 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/09/25/small-plan/</guid>
            <description>&lt;p&gt;两个多月没更新了，感谢一直关注的小伙伴们。&lt;/p&gt;

&lt;p&gt;上篇文章《一次 CTF 之旅》有读者评论，会不会因为学习的东西太多而每个都不精通？以我的经验来看，会的。&lt;/p&gt;

&lt;p&gt;曾经我也认为我什么都能学，什么都能做好，但是在具体某一领域，和真正的专家比起来，差距还是比较明显的。如果想成为某一方面的专家，就一定要找准一个点深入下去，在这个点上有持续的积累，你的优势才会凸显。&lt;/p&gt;

&lt;p&gt;道理都明白，但是却很难做到。&lt;/p&gt;

&lt;p&gt;因为学习是一件非常枯燥和困难的事情。只要身边有一点诱惑，就很容易打退堂鼓。&lt;/p&gt;

&lt;p&gt;其他任何一件事，看上去都比学习要容易的多：&lt;/p&gt;

&lt;p&gt;在沙发上来个葛优躺，就算发几分钟呆，也是极舒服和享受的。更不要说看个电影肥皂剧，玩个游戏。&lt;/p&gt;

&lt;p&gt;当你觉得无所事事的时候，视频、微博、微信、游戏会很轻易的填充你的时间。因为任何时间，你只要掏出手机，轻轻一点，马上就会有很强烈的感官刺激，非常及时的反馈，而时间就这样慢慢流逝了。&lt;/p&gt;

&lt;p&gt;学习的反馈非常的慢，但却是更有意义的事情。为了避免枯燥，应尽量选择自己感兴趣或擅长的领域。&lt;/p&gt;

&lt;p&gt;我们只看到大神的谈笑风生，却看不到他们曾经多少个孤独的夜晚。&lt;/p&gt;

&lt;p&gt;学习是一种自我驱动的修行。&lt;/p&gt;

&lt;p&gt;鸡汤三千，取一瓢自饮，本文仅以自勉。&lt;/p&gt;

&lt;p&gt;目标不要定的太远，先写它个小程序，实现个小目标。&lt;/p&gt;

&lt;p&gt;（开玩笑了，小目标是：每周看 10 小时书。微信读书内每周有统计，诸君共勉。）&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>一次 CTF 之旅</title>
            <link>https://blog.coderzh.com/2016/07/11/a-ctf-tour/</link>
            <pubDate>Mon, 11 Jul 2016 07:35:59 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/07/11/a-ctf-tour/</guid>
            <description>&lt;p&gt;有好几周没有发文章了，具体原因是上上周末去了团建，上周末主要在研读《Android 软件安全与逆向分析》一书。我报名参加了公司第一次 CTF 比赛，结果很幸运组队时抱上了几个大腿进了决赛。本着绝不坑队友的原则，精心准备了一把。结果最后还是坑了，我那道 Android 逆向的题还是没有做出来。虽然比赛已经结束，但心有不甘，这周末又继续搞了两天这题，代码逆向和解题思路都搞的差不多，但是似乎 Native 层的代码理解有一点点偏差。昨晚 11 点多不得已向比赛组委会出题大神请教，解题方法居然没有我想的复杂，我还是太 Naive 了。&lt;/p&gt;

&lt;p&gt;首先介绍一下什么是 CTF。&lt;/p&gt;

&lt;p&gt;CTF（Capture The Flag）夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF 起源于 1996 年 DEFCON 全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。&lt;/p&gt;

&lt;p&gt;这次是公司第一次举办 CTF 的比赛。而我在这之前，对 CTF 也是了解甚少。组织这次比赛的是公司 T5 大神所在的实验室，本着学习的态度，就尝试报了名。刚好队里缺 Android 逆向的小伙伴，所有我就专攻 Android 题，其他题交给其他的小伙伴。&lt;/p&gt;

&lt;p&gt;由于是第一次举办，采用了比较初级的「解题模式」。主要分为几类：隐写、逆向、Web、Mobile。举个隐写的例子就明白了。比如让你在一个浏览器页面里找藏在里面的 Flag，只要查看源码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;
找到第一个 Flag!
&amp;lt;!-- Flag{WelcomeToCTF} --&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;WelcomeToCTF&lt;/code&gt; 就是其中的 Flag。当然，这种属于最初级的题，更多的隐写 Flag 会藏在更深的地方，比如图片、MP3、PDF 等等文件里，你需要做各种数据抽离，找出其中的不同，最终发现写在里面的隐藏内容。&lt;/p&gt;

&lt;p&gt;对 CTF 有兴趣的同学可以自行去了解更多，这里不一一介绍了。一是我本身也专研不深，二是这次比赛我只搞了 Mobile 题。所以，接下来就只聊一聊 Mobile 题。&lt;/p&gt;

&lt;p&gt;Mobile 题主要是 Android 的逆向，Crack 破解或者是找出其中漏洞。同样举个简单的例子，比如破解一个需要序列号的 APP，通过逆向，你找到它里面判断序列号是否正确的地方，把判断条件改反，或者修改判断条件，让它永远返回 True。这样就简单的绕过了验证。&lt;/p&gt;

&lt;p&gt;而实际情况会比这种复杂的多。所以要掌握好 Android 逆向，需要了解 Android 虚拟机的原理及 Dalvik 指令集，熟悉 DEX 文件的格式及反汇编语言 smali。能读懂和理解 ARM 汇编（寄存器和各种寻址）。由于 Java 层的破解相对容易，很多 APP 会把关键功能放在 Android NDK 的 so 里。所以，分析反汇编的 so 代码也是必须要掌握的。&lt;/p&gt;

&lt;p&gt;Android 逆向主要分静态分析和动态调试。静态分析就是查看逆向的代码，找出其他的关键所在，然后修改代码，重新打包、签名，得到最终结果。动态调试是指使用工具动态调试 APP，可在运行时下断点，查看或修改寄存器的值，Dump 一段内存等等。&lt;/p&gt;

&lt;p&gt;常见的 Android 加壳过程就是通过 so 加载一个二进制文件，然后解密出真正的 DEX 文件。通过加壳，把真实的业务代码隐藏了起来，Java 层的逆向你看不到真实的业务逻辑代码，因为只有一个壳。破解的思路也很简单，动态调试 APP，运行到解密完 DEX 的地方（或者是定位到关键函数，比如加载新 DEX 的地方），将 DEX 文件所在的内存 Dump 出来，然后再去分析 Dump 出来的真实 DEX 文件。&lt;/p&gt;

&lt;p&gt;魔高一尺道高一丈。既然动态调试可以这么容易把隐藏的 DEX Dump 出来，那么反破解的方法就是加入「反调试」的逻辑。比如，不断检查 App 的 TracerID，一旦发现有人在调试它，就启动自毁程序。于是，动态调试的难度又增加了，这时候就需要用到「反反调试」。找出其中「反调试」的代码，通过静态分析，想尽一切办法绕过反调试。&lt;/p&gt;

&lt;p&gt;这其中过程说的似乎轻描淡写，实际操作起来却并非那么容易。我体验一段时间之后的感觉是，首先基础要扎实，上看得了 Java，下看得了 smali，C++，arm 汇编，其次，工具使用要熟练。已经很少有人徒手破解了，因为有很多现成的工具可用。比如：APKTool、jd-gui、IDA Pro…… 其中的 IDA Pro 堪称神器，熟练掌握 IDA Pro 几乎成功了一半（瞎说的，因为我不是很熟）。第三，要有敏锐的思路，分析出其中的关键路径，寻出破解的方法。&lt;/p&gt;

&lt;p&gt;基础方面，我恶补了《Android 软件安全与逆向分析》一书。写的确实好，讲的非常系统，入门的首选。我买的纸质书，看完的感受是看此类书还是纸质的比较好。比赛结束后又入了一本《漏洞战争》，最新出炉的安全大作，作者就是文章开头我提到的这次 CTF 组委会出题的大神。&lt;/p&gt;

&lt;p&gt;实践部分我做的就不好了，工具的不熟练使用成了我的一大瓶颈。首先是环境准备部分，我就入了一个大坑。搞 Android 逆向，使用手机真机调试是必不可少的，而且手机必须是 root 过的，同时必须准备好多个 Android API 版本的手机（因为有的题的 APK 对 API Level 有要求。）别人已经在破解调试了，而题目的 APP 在我的手机上正常跑起来却是一个问题。（汗~）&lt;/p&gt;

&lt;p&gt;当然，也是可以使用模拟器的。这又要说到我遇到的另外一个大坑，因为习惯了 Genymotion 模拟器（性能很好），然后发现动态调试使用的 android_server 在 Genymotion 里根本跑不起来。于是当初我就放弃了模拟器方案，最后在这周末的时候发现，使用 Google 原生的模拟器，选择 arm 版本的 SDK 就可以了！（哭~）&lt;/p&gt;

&lt;p&gt;当然，这都没什么。还有一个更大的坑。因为比赛我带的是我的 Mac，而破解工具大多数是在 Windows 里运行的。所以我就选择在 Mac 里装 Windows 虚拟机（VirtualBox），然后就掉坑里了。默认的 NAT 方式，虚拟机里是不能访问宿主机的，所以根本没办法进行动态调试。比赛之前我早有考虑，所以简单的切换到 Bridge 模式就可以解决。然而我还是太 Naive 了，公司里是不允许用 Bridge 方式的，使用后根本就上不了网。&lt;/p&gt;

&lt;p&gt;我不太可能把 Mac 再装个 Windows 双系统，而且我也不会那样做。最后，为了能在虚拟机里使用 IDA Pro 动态调试 Android，我折腾出如下方法：虚拟机同时设置 NAT 模式和 Host-Only 模式，NAT 模式是为了能够上网，Host-Only 模式是为了能访问宿主机器。有了 Host-Only 模式，可以访问到宿主机了，但是还是没办法直接连接到 android_server 的调试端口。&lt;/p&gt;

&lt;p&gt;原理是这样的，android_server 的调试端口 23946 是在手机上开启的，为了在 PC 上能连接这个端口，所有的教程都教你需要输入如下指令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb forward tcp:23946 tcp:23946
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即，将 PC 机上的 23946 端口的数据全部转发到手机的 23946 端口上。在虚拟机的 IDA Pro 里，我直接设置主机的 IP 和端口，是无法连接上的，因为主机只负责转发来自 127.0.0.1 的 23946 端口的数据。于是，我拿出了 nginx 杀手锏，开启了一个监听端口 23950，然后配置成自动转发到本地的 127.0.0.1:23946 上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stream {
    upstream dbg_socket {
        hash $remote_addr consistent;
        server 127.0.0.1:23946;
    }

    server {
       listen 23950;
       proxy_connect_timeout 180s;
       proxy_timeout 3600s;
       proxy_pass dbg_socket;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在 IDA Pro 里设主机的 IP 和端口 23950，it works!&lt;/p&gt;

&lt;p&gt;第一次参加 CTF 的我真是有点伤不起啊。&lt;strong&gt;如果再来一次，我会告诉自己，带上几台真机，放下你的 Mac，老老实实的带个 Windows 本子去吧。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;至于解题思路方面，需要平时多关注一些安全相关的文章，同时要有开放性的思维。&lt;/p&gt;

&lt;p&gt;这就是我这次 CTF 之旅的血泪史，虽然最后我的成绩不尽人意，但还是收获满满。主要是队友给力，通过比赛，认识了一群 Nice、聪明、激情又好学的朋友，你可以想象我的队友在刚刷出题目 5 秒钟就告诉我们解出来了吗？这就是 CTF！&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>聊聊播客</title>
            <link>https://blog.coderzh.com/2016/06/19/podcasts/</link>
            <pubDate>Sun, 19 Jun 2016 18:53:33 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/06/19/podcasts/</guid>
            <description>&lt;p&gt;播客（Podcast）已经不是什么新鲜的东西了。记得大概在 06 年左右，我经常逛博客园，当时 .NET 圈有个人开了一个独立播客，每篇文章就是一段录好的音频。我使劲回忆，各种搜索，十年前的记忆已经模糊。我只记得当时他讲的东西着实有趣，好像还是一个系列，但是关于其他的一切都已不记得了。&lt;/p&gt;

&lt;p&gt;也许那是我第一次听播客，当时我也曾天真的认为这个东西也许会和博客一样火。很显然，现在连博客都已经没落，更不要说播客了。&lt;/p&gt;

&lt;p&gt;播客这个载体有其特殊的一面，它只有音频，意味着你只能听，还得认认真真听，不然可能错过某个细节。这时，你的眼睛也许会变得呆滞，手脚也不知道该如何安置，因为所有的一切只需要一双耳朵和集中注意力的大脑。于是，播客只适合于某些特定的场合。比如你的其他器官在休息时（坐车），或在做机械运动时（散步、跑步）。&lt;/p&gt;

&lt;p&gt;播客相对来说比较小众，以至于很多人都不知道 iPhone 里就自带了播客（Podcast）客户端。我一直认为，&lt;strong&gt;小众软件可以改变世界，它一定具备某种特质，能够吸引喜欢它的人，并且拥有非常高的忠诚度。这种特质之所以未被大众所接受，是因为它还不够平庸，甚至需要很多门槛&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;听播客的门槛就是每天会花很多时间在路上。为了利用路途的时间，有的人刷微信，有的人戴上耳机，听音乐，看视频，有的人会选择听播客。&lt;/p&gt;

&lt;p&gt;我就是选择听播客的那一个。有了播客，漫长的车程变得不再无聊，相反，在闭目养神之间还能听到很多有趣的故事，学习很多有意思的知识。&lt;/p&gt;

&lt;p&gt;播客本身已经很小众，而程序员的播客节目就显得更小众了。但是，这丝毫没有妨碍它的有趣。国外的技术类播客比国内的发展的要好，通过听国外的播客节目学习英语也是不错的方式。而中文的技术类播客中，《内核恐慌》和《TeaHour》是我最喜欢的节目。&lt;/p&gt;

&lt;p&gt;《内核恐慌》是一个专门为程序员定制的播客节目，话题涉及编程语言、键盘、字体、编辑器、前沿技术、科技新闻等程序员感兴趣的话题。主持人 Rio 和吴涛特别能侃，每一期节目我都听过，「号称 hardcore，但也没什么干货，想听的人听，不想听的人就不要听」，节目完全随性子，经常聊了 1 个小时发现还未进入正题，但往往能抓住程序员感兴趣的点。这有点像我写文章，有时候把标题写好，本想先写个铺垫，结果写着写着就写成了正文，于是标题一改就发出去了，就是这么随性。&lt;/p&gt;

&lt;p&gt;内核恐慌早期有些节目比较精彩，近期更新越来越慢，不过也是可以理解的，毕竟两位主持人是利用业余时间来做的这个节目，想持续保持高质量的内容是非常的困难的。我会持续关注，希望后面有更多的惊喜。&lt;/p&gt;

&lt;p&gt;对了，通过节目了解到吴涛是我的校友（中南大学），应该大我 1，2届，呵呵，又暴露年龄了。&lt;/p&gt;

&lt;p&gt;《TeaHour》是一个程序员的访谈节目，每期都会邀请一些技术大牛进行分享，节目结束前的好东西推荐环节也是其中一个特色。节目的质量很高，嘉宾的分享也很精彩，更新频率不高，但经常都有惊喜。一个偶然的机会我认识了 TeaHour 的主播之一 Terry，互加了微信有了一些交流。他是一个程序员、自由职业者，从事远程工作。前段时间 Terry 开了个微信公众号 Remote，其中的《我如何把薪水从 50人民币/天 提升到 100美元/小时的》系列，看的我也是如痴如醉。总之，一句话，《TeaHour》强烈推荐。&lt;/p&gt;

&lt;p&gt;IT 类节目我之前一直听《IT 公论》。 这是由李如一（不鸟万如一）和 Rio 主持的科技博客。特点是更新很快，能及时对最新的科技新闻进行分析和解读，两位主持人的观点立场也比较分明。李如一有点理想主义，崇尚手工艺、崇尚艺术和美，而 Rio 更加理性，习惯从实际出发进行推演，于是两个人免不了把节目演变成了一次次的辩论比赛。后来 Rio 做了风投，单独开了一个节目《疯投圈》，李如一一人做《IT 公论》有些孤独，于是停播了《IT 公论》，做起了一个新节目《一天世界》。总之，《IT 公论》是不会再有了。&lt;/p&gt;

&lt;p&gt;读书类的节目，我主要听《狗熊有话说》和《罗辑思维》。偶尔也听听英语学习类的节目，以及优秀的脱口秀节目：《冬吴相对论》、《晓松奇谈》、《老梁故事汇》……&lt;/p&gt;

&lt;p&gt;如果你也喜欢播客，欢迎交流，大胆的说出你喜欢的节目吧。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>代自己：《致和菜头书》</title>
            <link>https://blog.coderzh.com/2016/06/11/to-hecaitou/</link>
            <pubDate>Sat, 11 Jun 2016 12:24:55 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/06/11/to-hecaitou/</guid>
            <description>

&lt;p&gt;和菜头先生，&lt;/p&gt;

&lt;p&gt;恭喜您在《得到》APP 开启了《槽边往事》新的篇章！我是读者 CoderZh，你开设付费栏目后第一时间付费并给你写信的人。你也许会好奇：为什么要「代自己」给你写这篇文章？因为那个叫 CoderZh 的家伙得知你不再爱免费的微信公众号时，一会儿全身酥软，一会儿捶胸顿足，在拥挤的书房里上蹿下跳、抓耳挠腮，完全放弃了一个优秀、Geek 程序员应有的矜持。他的手指因为颤抖得太厉害，连敲个 Hello World 都编译不过，更不要说请 3 小时假抛下老婆孩子去看《魔兽》了。所以，他只好委托爱思考的程序员的我来写这篇文章。&lt;/p&gt;

&lt;p&gt;另外，我自己还有一个更特别的理由：自写公众号《一个程序员的思考》以来，我一直都想成为像您一样的人。拥有那么好的文笔，那么多的赞赏收入，那么多的女粉丝。甚至有时在梦里，一遍又一遍的重复这样的场景：那是一个雨天，我用 HHKB 噼里啪啦的敲着代码，编译器不时惊叹如此优雅的代码，同时马不停蹄的为我编译。随着回车键按下，与女粉丝互换私密照片的微信公众号服务上线了。我打开微信「公众号安全助手」，已经有 28000 条读者的消息在等着我点开。我飞速的扫视着读者的头像，一眼就看见了那个穿着黄色雨衣的娇小身影。她有一条留言：「叔，这个月的零花钱都赞赏给你了。」&lt;/p&gt;

&lt;p&gt;但是现在看起来，这一幕不大可能发生了。因为 CoderZh 先生使尽了吃奶的力气，才积攒了 2000 个粉丝。他上班要写代码，下班要带孩子，根本没有那么多时间像菜头先生一样写文章、看评论、拉黑粉丝。更重要的是，他没有你的才华，可以嬉笑怒骂皆成文章。但是，他头发比你多，是吧。&lt;/p&gt;

&lt;p&gt;原谅我说了那么多无关的话，我是个内向而羞射的人，不善于表达自己，张不开嘴说「来关注我吧」，更不敢直接问读者要钱。所以，以上只是强行和你套近乎，强行拉粉的方式。很老土，是吧？&lt;/p&gt;

&lt;p&gt;对了，我应该向我的读者介绍一下您。毕竟，你也不像赵又廷那样出名。哦，也许你不认识赵又廷，但你一定听过高圆圆吧。好吧，没关系，我对这两个人也不熟，还是说说你吧。Google 搜索「和菜头是谁」，会进入一个知乎的页面，排名第一的居然是你自己的回答。你写道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;和菜头是一个网络ID，最早出现在1999年的BBS里。&lt;/p&gt;

&lt;p&gt;承载这个ID的是一个沉重的肉身。时光荏苒，这具肉身受到肠溃疡、胃炎、脚气、痛风等疾病的困扰，在网络上活跃的时间也随之减少。&lt;/p&gt;

&lt;p&gt;在相对较为官方的版本中，它曾经宣称ID的来源是云南的一种咸菜，但是人们并不能记住这种咸菜的名字，因为它委实太过平凡了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你写了这么长，只说明了你是一个中年发胖的网络写手。其实远不止此，你的经历和人脉如此之丰富，比如你是微信之父张小龙的好朋友、宁财神 50 元将微博账号卖给了你、你替罗振宇写《致女儿书》、你的《槽边往事》一天可以发 3 篇微信公众号文章。意味着你只要笔耕不辍，就可以挣到别人 3 倍的赞赏收入。但你偏偏用来发照片，各种天空的照片。不仅自己发，还做了个交换天空照片的功能，让读者也来发。&lt;/p&gt;

&lt;p&gt;从拍天空照片看出，你是一个有情怀的人。你对你的文字要求很严格，但你对你的读者更为苛刻，因为一言不合就会被你拉黑。想要不被和菜头拉黑，有 3 种办法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;给和菜头的文章赞赏。&lt;/li&gt;
&lt;li&gt;给和菜头的文章留言，赞同他说的一切。&lt;/li&gt;
&lt;li&gt;不留言也不赞赏，别让和菜头发现你。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;终于说到正题了，还有一种方法可以不被菜头拉黑。什么？「换个美女头像」？也许有效吧，毕竟和菜头不止是个 ID，背后的沉重的肉身也是有七情六欲的。&lt;/p&gt;

&lt;p&gt;好吧，扯远了，现在有一种方法可以让菜头先生你拉黑不了我，就是去买你的《槽边往事》年费会员。一旦交了年费，就可以堂而皇之的指着菜头先生的鼻子说，快，快写，一周至少 3 篇，写的不好老子就退订！这样一来，读者和菜头先生的角色就翻转了，订阅者成了你的衣食父母，一言不合读者就会退订。菜头先生你只能上蹿下跳、抓耳挠腮、绞尽脑汁每周憋出 3 篇像样一点的文章来讨好观众。&lt;/p&gt;

&lt;p&gt;依你的才华，相信这都不是问题。你也许会变得比现在更有钱，当然，也可能会更惨。不可否认的一点是，你已经走上了和罗振宇一样的铜臭之路，从那一刻起，你也成了一个臭奸商。&lt;/p&gt;

&lt;p&gt;你提倡为知识付费，这本身没有一点错。你说在这个社会，水要收费，蔬菜要收费，甚至空气也要收费，为什么文章要免费。为什么文章要免费给大部分人看，而让那些少部分的喜欢你的人买单。&lt;/p&gt;

&lt;p&gt;于是你关上了免费阅读的大门，对读者说，来，给钱就看。&lt;/p&gt;

&lt;p&gt;曾几何时，我也付费购买《程序员》杂志，短短几年间，这本杂志已经少有人谈起。相反，InfoQ 的技术文章和电子期刊质量都算上乘，但人家是免费的，做的风生水起。这样的例子太多了，免费的微信、知乎、微博、豆瓣，甚至那个臭奸商罗振宇的《罗辑思维》也是免费的。下次你替我问问他，你咋不收费呢？你咋不上天呢？&lt;/p&gt;

&lt;p&gt;读者赞赏的是你具体的一篇文章，或是某个片段，觉得有点意思，或是有所启发。如果不让免费看，用户如何判断是否对自己有价值，如何判断是否要掏腰包？&lt;/p&gt;

&lt;p&gt;好的内容自然会让更多人付费，甚至付了费还帮你传播，给你带来更多潜在的付费用户。而你现在却要关上这扇门，选择一个封闭的付费小圈子。我又偷偷瞄了一眼你的付费订阅人数，还停留在 8000 多人，和 10w+ 比起来，是不是还单薄了点。更关键的是，你把更多的可能性掐死了。&lt;/p&gt;

&lt;p&gt;这是一个双向选择的过程，公众号里你可以依据赞赏数判断该文章的受欢迎程度。在《得到》里，你只能看到每篇文章的阅读数。它不会刺激你去写一篇爆款的文章，也勾不起你的欲望去挑战一下读者的底线。你会变成一个写作机器，规规矩矩，任劳任怨的实现每周至少 3 篇的承诺。&lt;/p&gt;

&lt;p&gt;这样会变得很没意思，不是吗？在公众号里，你想一天 3 更，或是 3 天一更，完全看你的喜好。你想拉黑你的读者，或者在评论区调戏女粉丝，只要看你的心情。&lt;/p&gt;

&lt;p&gt;除非你在一遍一遍拉黑洗粉之后，发现已经无粉可吸，才决定把现有的粉丝圈起来，我也是无话可说。但是我敬仰你的才华，虽然 40 岁了，你还有无限可能，你的才华应该让更多人看到。&lt;/p&gt;

&lt;p&gt;好了，听我瞎扯了这么多，我自己还不是乖乖的交了那 199 元年费。我并不反对为知识付费，这是对知识的尊重，我也认为付费的内容往往比免费的好。如果你要坚定的走付费阅读这条路，我也希望你越来越好。&lt;/p&gt;

&lt;p&gt;你常说的：「请你相信，我所说的都是错的」。&lt;/p&gt;

&lt;p&gt;最后我也想说一句，这篇文章里我所说的，也都是错的。因为和菜头你很大可能不会看到这篇文章，这一切都只发生在我的想象世界。既然你不会看到，就说个真相吧：&lt;/p&gt;

&lt;p&gt;「和菜头，其实你的文章也没什么好看的。」&lt;/p&gt;

&lt;p&gt;当然，包括这句话也可能是错的。&lt;/p&gt;

&lt;h3 id=&#34;禅定时刻&#34;&gt;禅定时刻&lt;/h3&gt;

&lt;p&gt;那些你想象中的汹涌流量，也许永远不会到来。&lt;/p&gt;

&lt;p&gt;那些你想象中的滚滚财源，也许只会流向他方。&lt;/p&gt;

&lt;p&gt;那些你想象中的赞美言辞，也许变成刺耳谩骂。&lt;/p&gt;

&lt;p&gt;那些你想象中的簇拥美女，也许只是逢场作戏。&lt;/p&gt;

&lt;p&gt;唯有平和之心，相信和菜头和你说的都是错的，方得始终。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>马斯克的冒险</title>
            <link>https://blog.coderzh.com/2016/06/05/elon-musk/</link>
            <pubDate>Sun, 05 Jun 2016 14:16:25 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/06/05/elon-musk/</guid>
            <description>&lt;p&gt;埃隆·马斯克（Elon Musk）出生在一个冒险家庭。他的外祖父约书亚就是个不折不扣的冒险家。在约书亚 7 岁时父亲就去世了，于是他便维持起了家里的生计。他学会了各种技能，包括开垦荒地、驯养野马、拳击和摔跤，甚至组织牛仔竞技表演。后来经济大衰退，导致约书亚失去了自己的农场，陷入了经济危机。&lt;/p&gt;

&lt;p&gt;后来约书亚娶了一位加拿大舞蹈老师，并开了一家按摩诊所，挣了不少钱，便玩起了私人飞机。后来约书亚不满加拿大道德的沦陷，决定放弃一切，变卖了所有家产，举家搬到南非准备重新开始。&lt;/p&gt;

&lt;p&gt;约书亚和妻子温曾驾驶飞机完成了一次 2.2 万英里的往返旅行，后来有次飞行了 3 万英里，往返于澳大利亚。他们的飞机没有装备任何的仪器，连无线电都没有，他们用公路地图代替航空地图。&lt;/p&gt;

&lt;p&gt;约书亚对冒险和探索的热爱几近疯狂，除了飞行，还曾深入丛林寻找失落之城。在约书亚 72 岁那年，他正驾驶飞机练习着陆，但没有看见两根电线杆中间的电线，结果电线缠住了飞机轮子并把飞机掀翻，约书亚折断了脖子不幸身亡。&lt;/p&gt;

&lt;p&gt;马斯克继承了外祖父的冒险精神，他出生在南非，经过不懈的努力，18 岁时移民加拿大，21 岁那年靠奖学金进入宾夕法尼亚大学攻读经济学和物理学。在拿到双学位之后，本来打算在斯坦福大学攻读材料科学和物理学博士学位，后来在斯坦福大学待了两天就退学了，因为他无法抗拒互联网的诱惑，准备大干一场。&lt;/p&gt;

&lt;p&gt;从南非到加拿大，再到美国，再到辍学创业，每一步都是冒险。&lt;/p&gt;

&lt;p&gt;马斯克先是创办了 Zip2，一个类似马云早期做的企业黄页服务。Zip2 在后来的一次次的融资后，马斯克未能牢牢的控制住公司股权。他一直想做 CEO，但一直未能如愿。后来 Zip2 被收购，27 岁的马斯克从一个加拿大背包客摇身一变成了坐拥 2200 万美元资产的富豪。&lt;/p&gt;

&lt;p&gt;一个月后他就创办了一家金融初创企业 X.com，准备用互联网的方式改造效率低下的银行业。马斯克认为「银行家富有但愚蠢，这个领域蕴藏着巨大的机会」。也是从那时开始，富豪马斯克开始结交各种上层名流，比如邀请甲骨文联合创始人，亿万富翁拉里·埃里森一起驾驶迈凯伦玩赛车。&lt;/p&gt;

&lt;p&gt;马斯克给 X.com 投资了 1200 万美元，只给自己留了 400 万美元，不像其他成功创业者，将赚来的钱藏匿起来，再从别人那里获得投资继续创业。马斯克愿意为新事业堵上身家性命。当时 X.com 和 PayPal 竞争很激烈，两家公司一合计合并算了。合并之后，马斯克的很多理念不被其他人所接受，在一次蜜月旅行时，公司员工和董事会一起发动了一场政变，彼得·蒂尔取代了他 CEO 的位置。关于 PayPal 黑帮的故事，在蒂尔的《从 0 到 1》有详细叙述。&lt;/p&gt;

&lt;p&gt;马斯克被踢出董事会后，X.com 正式更名为 Paypal。后来 Paypal 以 15 亿美元的天价出售给了 eBay，马斯克获得了 3 亿美元的巨额财富。而当时的他已经创办了火箭公司 SpaceX，他给 SpaceX 投入了 1 亿美元，他想牢牢的控制住公司，再也不要像 Zip2 和 PayPal 那样被夺走。&lt;/p&gt;

&lt;p&gt;探索太空是马斯克从小的梦想，其他人只是想一想，而马斯克却真枪实弹的干了起来。他找来苏联制造火箭的小册子，学习火箭技术。同时开始结识火箭领域的专家，曾去到俄罗斯打算购买一个火箭。在讨价还价时，被俄罗斯富豪嘲笑他是否有那么多钱，马斯克摔门而出，在回去的飞机上，他开始计划自己制造火箭，制造更低成本的火箭。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;马斯克的终极目标是「把人类变成一种跨越行星的物种」。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了把火箭的发射成本降低下来，SpaceX 想尽了各种办法，不依赖进口，自己制造各种火箭零件，制造可回收的火箭。&lt;/p&gt;

&lt;p&gt;后来马斯克投资了电动车公司特斯拉，太阳能公司太阳城，还声称要制造「超级高铁」，可谓是风光无限。可你曾想过在这之前，电动汽车、火箭发射、太阳能都是极其冷门的领域。&lt;/p&gt;

&lt;p&gt;2008 年马斯克陷入了人生低谷，和妻子贾斯丁离婚，火箭接连发射失败，特斯拉濒临破产，媒体大量的负面报道。后来终于成功发射了一次，NASA 的一笔 16 亿美元的订单拯救了 SpaceX。后来 SpaceX 在火箭发射领域大获成功，特斯拉也于 2010 年上市。&lt;/p&gt;

&lt;p&gt;在《硅谷钢铁侠》书中，可以了解到一个更全面的马斯克。最后再分享几个我读到的有趣的故事：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 Zip2 早期，代码都是马斯克写的，虽然他不是专业出身，但是学习能力很强，而且一直认为自己写的代码是最棒的。后来公司有了投资，从硅谷引入了大量专业的程序员，那些程序员看马斯克的代码写的既冗余又不规范，于是通篇重写。马斯克虽然有很多股份在身，但是没有任何管理职能，于是他经常干这种事：晚上偷偷的修改硅谷程序员的代码。结果程序员第二天来上班发现昨天写了一天的代码被马斯克回滚了，简直苦不堪言。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;X.com 和 Paypal 合并时，马斯克热衷于微软的技术，而 Paypal 更喜欢 Linux 的技术栈，编程语言之战就此爆发，随后导致 Paypal 高层出走，马斯克也落得大家都不喜欢的下场。后来趁着马斯克蜜月旅游的时机，员工联合了其他董事会成员一起把马斯克弹劾了，踢出了董事会。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;马斯克是个工作狂，而且还要求别人也是。在 SpaceX，只要一言不合就有可能被马斯克开除，甚至邮件里出现几个错别字都有可能被马斯克开除。马斯克讨厌各种缩写，他认为缩写非常不利于交流，会导致新人开会时只能傻站在一旁不敢提问。他规定了一个缩写词汇表，超出了词汇表的缩写都不被允许。作为公司 CEO，大到公司战略，小到单词缩写词汇表，他都要严格按照他的要求来做。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;彼得·蒂尔曾感叹：「我们想要一辆会飞的汽车，得到的却是 140 个字符」。&lt;/p&gt;

&lt;p&gt;而马斯克正在制造火箭。&lt;/p&gt;

&lt;p&gt;Facebook 早期员工杰夫·汉默巴彻曾说：「我们这一代人中最优秀的头脑，都在思考如何让你们点击广告，这太糟糕了。」&lt;/p&gt;

&lt;p&gt;马斯克在推进人类星际移民。&lt;/p&gt;

&lt;p&gt;谷歌的创始人拉里·佩奇曾说，他宁愿死后把财产捐给像马斯克这样的人来改变世界，也不愿捐给慈善机构。&lt;/p&gt;

&lt;p&gt;马斯克说，「我从来没觉得电动车是个『好机会』。我其实一直觉得做特斯拉的失败率比成功率大得多。我只是觉得这是应该要去做的事情，而且我不想苦等别人来实现」。&lt;/p&gt;

&lt;p&gt;马斯克也坦诚，将所有的未来赌在火箭和电动车上很冒险。但他话锋一转，表示如果不这么投入，才是最大的冒险，因为成功的希望是零。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>游戏必将改变世界</title>
            <link>https://blog.coderzh.com/2016/05/29/game-changed-world/</link>
            <pubDate>Sun, 29 May 2016 00:28:18 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/05/29/game-changed-world/</guid>
            <description>&lt;p&gt;有一项活动，它人为的制作了种种不必要的障碍，而你却自愿参与，即使过程需要花费大量时间，艰苦的工作，但是你却依然乐在其中。&lt;/p&gt;

&lt;p&gt;这项活动叫：游戏。&lt;/p&gt;

&lt;p&gt;我们这代人，是伴随着电子游戏长大的。从红白机（小霸王）的超级玛丽、魂斗罗，到 PC 时代的大富翁、仙剑、暗黑、FIFA、红警，到联网对战的 CS、星际，再到网络时代的传奇、剑侠、魔兽世界、英雄联盟，再到移动互联网时代的刀塔传奇、COC、皇室战争，以及现在的虚拟现实游戏（VR）。&lt;/p&gt;

&lt;p&gt;太多太多的游戏，你玩过的，没玩过的，听说过的，没听说过的。你可以不玩游戏，但你不可以漠视它们。&lt;/p&gt;

&lt;p&gt;马斯克说：「游戏行业汇集了世界上最顶尖的人才。两个离开 PayPal 的人加入了暴雪，帮助创作了游戏『魔兽世界』。它的复杂度令人瞠目，令任何网站都相形见绌。」&lt;/p&gt;

&lt;p&gt;我们见证了电子游戏的发展，电子游戏伴随着我们长大。游戏给我们留下了美好的回忆，现在及将来，也将一直为我们创造无穷乐趣。&lt;/p&gt;

&lt;p&gt;「小霸王，其乐无穷」&lt;/p&gt;

&lt;p&gt;这句广告语至今还记忆犹新。读小学时，家里以一台小霸王为诱惑让我拿三好学生。为了能玩游戏，我如愿以偿。当时的资源不像现在那么丰富，有限的几张卡带被我们反复玩，什么街头霸王、超级玛丽、魂斗罗、坦克大战、炸弹超人、热血系列、双截龙，手柄都要玩烂了，真的是其乐无穷。&lt;/p&gt;

&lt;p&gt;游戏几乎是没有说明书的，但是我们上手就可以玩。通过玩游戏，我们学会了不断尝试，拥有了探索精神，不像现在凡事先问谷歌。我们学会了与他人配合，拥有了协作精神，当然我们也经常单打独斗。我们学会了在失败中总结教训，我们发挥创意，为我们发现的每一个游戏技巧欢欣雀跃。&lt;/p&gt;

&lt;p&gt;当时我最喜欢的游戏，是热血格斗。这是一个全日文界面的格斗游戏，对于我们这些小屁孩来说，游戏的首要挑战，是找到选哪个键可以开始游戏。在游戏开始前，需要输入角色的名字、生日、血型，然后随机出一个角色来。角色的能力有高有低，当时我们公认最厉害的角色是「大眼睛」（后来才知道名字叫国夫）和「一点发」（头发上有一点的那个）。为了选出厉害的角色，我们经过了不懈的尝试和探索。&lt;/p&gt;

&lt;p&gt;这个游戏有很多的操作技巧，比如怎样一直把人扔到电网里，扔到雷了，利用地形地势进行攻击。更关键的是，这是一个非常注重配合的游戏。比如两个人快速避开敌人的同时使用合体技，需要很好的默契和反应能力。在其中一个快挂时，让剩下的那人抢先吃下挂后留下的道具，体现了一定的团队精神和策略性。最后的老虎关卡敌人异常强大，纯粹硬拼拳脚是必败的，因为老虎的手速和脚速都很快，而且一近身就把你抱飞到天上摔下来。因此，为了战胜老虎，必须掌握一些技巧和具备一定的反应能力，在躲避攻击的同时能够攻击到对方。&lt;/p&gt;

&lt;p&gt;可以说，当时类似的好玩又有意义的游戏有很多。理论上，那些游戏对于开发智力，训练反应能力，培养团队精神，提高专注力都是大有好处的。然而，「学习」一直是家长和老师眼中的主旋律，「游戏」从一开始就被认为是不务正业。&lt;/p&gt;

&lt;p&gt;如果一个人沉迷于游戏，会被家长认为是没有出息。这就是当时的现状。&lt;/p&gt;

&lt;p&gt;为什么说「当时」，因为现在的确有所改观。&lt;/p&gt;

&lt;p&gt;当李晓峰连续几届获得魔兽争霸 WCG 世界冠军，电子竞技被提上奥运会议程，电子竞技群体日益增大，职业游戏玩家奖金日益丰厚，游戏直播如火如荼，游戏主播赚的钵满盆满时，电子游戏已经开始打破人们的传统观念，获得了更多一点的认可。&lt;/p&gt;

&lt;p&gt;当然，还有一个原因，是我们玩游戏的这一代人都长大了。&lt;/p&gt;

&lt;p&gt;游戏本是纯粹的东西，从它诞生之初就是为美好目的而生。&lt;/p&gt;

&lt;p&gt;早在 3000 年前，有一年，在吕底亚出现了全国范围的饥荒，甚至没有出现一点好转的迹象。这样下去将看不到希望，于是吕底亚人发明了一种奇怪的方法来解决饥饿的问题：他们先用一整天来玩游戏，只为感觉不到对食物的渴求。然后再用一天吃东西，克制不玩游戏，如此交替。最后他们成功度过了 18 年的饥荒，其间发明了骰子、抓子儿、球以及其他常见的游戏。&lt;/p&gt;

&lt;p&gt;游戏，最初的目的是为了让生活更美好。&lt;/p&gt;

&lt;p&gt;然而，现今社会，人们对游戏的认识却并非如此。&lt;/p&gt;

&lt;p&gt;一方面很多游戏开发商为了追求利益，粗制滥造，利用玩家心里狠赚一笔。这种游戏利用了人的阴暗面，虚荣心，攀比心、杀戮心，不断通过诱惑和刺激吸引玩家，往游戏里充钱，或是沦为大 R 玩家的时间奴隶，花费大量的青春年华只为获得那一份虚荣感。&lt;/p&gt;

&lt;p&gt;另一方面，游戏太容易让人沉迷。人们花在游戏虚拟世界的时间越多，剩下给现实生活的时间就越少。在虚拟世界虽然能获得巨大的成就感，幸福感，但总归和现实脱节。令人亢奋的游戏过后总要面对冰冷的人生。在长时间投入游戏后，当人们开始反省过来时，会感到非常懊恼，《游戏改变世界》一书中称为「玩家之悔」。即使是资深的玩家，也许有一天连自己都不认可自己玩的游戏。&lt;/p&gt;

&lt;p&gt;那么，问题出哪里呢？&lt;/p&gt;

&lt;p&gt;我曾经也沉迷于游戏，大学时玩《剑侠情缘》玩到挂科差点毕不了业，工作后玩《英雄联盟》也是疯狂到不认识自己，所有的业余时间都贡献给了这款游戏。当我回过神来时对之前蹉跎的游戏时光懊恼不已，我有强烈的「玩家之悔」。&lt;/p&gt;

&lt;p&gt;直到有一天，某人和我说，他很喜欢玩游戏，但玩什么游戏都很难沉迷深入下去，反倒是非常羡慕我有过沉迷游戏的经历。因为假若你不曾为某款游戏沉迷过，你就永远无法体会游戏的奥妙所在，对游戏的理解永远也不会深刻。假如你是游戏开发人员，你永远也无法开发出真正扣人心弦的游戏。&lt;/p&gt;

&lt;p&gt;这番话让我对自己的罪恶感减轻了不少。我开始重新审视什么是游戏以及对待游戏的态度，看《游戏改变世界》这本书给了我很大的启发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好游戏不应该是脱离现实的，而应该是让现实更美好。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如游戏《文明》，玩家在游戏里模拟一个文明发展，需要平衡好经济、军事、外交、科技，了解各种宗教、治国政策的作用，了解人类不同文明发展阶段的特点，在各种综合条件下做出自己的选择，发展文明。这种游戏让我们学习到了很多人类文明的知识，同时也过足了当古代君王建立伟大帝国的瘾。因为这种体验几乎不可能在现实中发生，游戏弥补了这一缺憾。&lt;/p&gt;

&lt;p&gt;《Dota》、《英雄联盟》同样也是好游戏。它让我们化身为一个拥有 4 个魔法技能的超级英雄，组队和对面的 5 个英雄进行对抗。在游戏中你想要获胜，必须有精巧的微操，快速的反应，良好的意识，精密的团队配合。有时你还需要强大的心理分析能力，审时度势的能力，在自己强的时候表现的气焰嚣张，遇到真正的强敌时要时刻保持冷静。其中运用的兵法战术，穷寇莫追、围魏救赵，暗度陈仓，和古代人打战也是一样一样的。&lt;/p&gt;

&lt;p&gt;优秀的游戏有不少，然而称得上完美的并不多。所幸的是，最近一两年，劣质坑钱游戏大有被淘汰之势，真正优秀的精品游戏开始崭露出来，成为最后的赢家。比如芬兰的 SuperCell 公司，只有 180 名员工，一共只发布了 4 款游戏：《部落冲突》、《海岛奇兵》、《卡通农场》、《皇室战争》，但款款精品，每款游戏都堪称不同时期的现象级产品。&lt;/p&gt;

&lt;p&gt;游戏化是必然的趋势。如果你还不曾领略游戏的魅力，你可以再想象一下，假如有一件事，需要你每天花 3 ~ 5 个小时，期间必须严格集中注意力，需要解决各种人为制造的不必要的麻烦，有时候甚至是机械的重复劳动，不但没有任何酬劳，还需要你不断往里充钱，似乎对现实的你也没有一点益处。你会做这件事吗？但假如是游戏，你却会自愿的去接受那些艰苦的工作，这就是游戏的魅力。&lt;/p&gt;

&lt;p&gt;游戏必将改变世界，那些能够弥补现实生活不足，增强现实生活能力，让现实更美好的游戏更甚。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>善良比聪明更难</title>
            <link>https://blog.coderzh.com/2016/05/15/kind-or-clever/</link>
            <pubDate>Sun, 15 May 2016 11:32:15 CST</pubDate>
            <author>CoderZh</author>
            <guid>https://blog.coderzh.com/2016/05/15/kind-or-clever/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Jeff, one day you&amp;rsquo;ll understand that it&amp;rsquo;s harder to be kind than clever.&lt;/p&gt;

&lt;p&gt;杰夫，总有一天你会明白，善良比聪明更难。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jeff Bezos 毕业于普林斯顿大学，是美国亚马逊的创始人。在 2010 年普林斯顿大学学士毕业典礼上，贝索斯发表了演讲《善良比聪明更难》。&lt;/p&gt;

&lt;p&gt;演讲中，他提到在 10 岁时一次家庭房车旅游中，祖父一边开着车，祖母在旁一边抽着烟。贝索斯不喜欢烟的味道，于是自作主张的根据一个吸烟广告的数据计算了起来。最后他得意的拍了拍祖母的肩膀，骄傲的宣称：「如果两分钟就吸一口烟的话，你就会少活 9 年！」&lt;/p&gt;

&lt;p&gt;贝索斯很聪明，他本以为会得到家人的赞许，因为里面涉及了很多数学计算。然而他的自作聪明，却伤害了他的祖母，祖母开始哭泣起来。&lt;/p&gt;

&lt;p&gt;下车后，祖父对贝索斯说：「杰夫，总有一天你会明白，善良比聪明更难。」&lt;/p&gt;

&lt;p&gt;演讲视频很容易在网上找到，建议有兴趣的同学都去看看原版视频，因为我发现很多持有反对意见的人是没有看过原版视频的。&lt;/p&gt;

&lt;p&gt;首先，贝索斯的演讲对象是普林斯顿大学的毕业生，毫无疑问，是一群聪明绝伦的人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;聪明是一种天赋，而善良是一种选择。天赋得来很容易——毕竟它们与生俱来。而选择则颇为不易。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;聪明的人面临选择时，是选择一条伤害他人获利自己的路，还是选择一条即使更难但始终保持善良的路？&lt;/p&gt;

&lt;p&gt;这是贝索斯抛出的问题。&lt;/p&gt;

&lt;p&gt;不聪明的人作恶，很容易被发现或被制止，他们往往做些小恶，贪图一些小便宜，如果做大恶，代价太大，容易被识破或触犯法律，当然也不排除铤而走险的人。&lt;/p&gt;

&lt;p&gt;聪明的人作恶更容易，他们知道如何在获取巨大利益的同时，掩盖自己的恶。比如《笑傲江湖》里的岳不群。&lt;/p&gt;

&lt;p&gt;人之初，性本善。作恶之人会把原因归咎于社会，归咎于环境，他们擅长寻找心里慰藉，很多人甚至不认为那是恶，他们会说：「人为财死，鸟为食亡」。他们会为自己做的恶找很多借口，他们会说：「我顶多只能算推波助澜，真正作恶的是别人。」&lt;/p&gt;

&lt;p&gt;社会不如我们想象中的美好，通过作恶获取巨大利益给了聪明人巨大的诱惑，而且他们善于掩盖和包装所做的恶，直到催眠自己，把一切都看作理所当然。&lt;/p&gt;

&lt;p&gt;社会也不像我们想象中的那么差，依然有大量心怀善意的人，他们影响着他人，甚至改变着世界。&lt;/p&gt;

&lt;p&gt;贝索斯的演讲就是告诉我们，当我们面临选择时，请选择一条善意的路，尽管它更难。&lt;/p&gt;

&lt;p&gt;有人会问，选择善良会容易吃亏吗？&lt;/p&gt;

&lt;p&gt;不聪明的人对你做恶，往往只是想占你一点小便宜。聪明的人对你作恶，错的不是你太善良，而是你不够聪明。&lt;/p&gt;

&lt;p&gt;我也曾在百度搜过几种疾病，本能的我会意识到其中的广告成分，我会选择不去相信。当然，作为国内最大的搜索引擎，想靠用户去甄别真的很难。&lt;/p&gt;

&lt;p&gt;于是我再聪明一点，我选择不用百度。尽管很难，我坚持使用 Google，因为这是一家推崇「不作恶」的公司。&lt;/p&gt;

&lt;p&gt;再举个栗子：&lt;/p&gt;

&lt;p&gt;《琅琊榜》里，梁王谋反篡位，陷害忠良，东宫太子和誉王为夺皇位无恶不作。誉王、夏江、秦般弱都是聪明之人，手段也很毒辣，怎奈还是敌不过更加聪明一等，并且保持善良的梅长苏！这个剧被热播，也正好说明了人们人心向善的愿望，能有个梅长苏替自己给险恶之人以沉痛一击，岂不快哉！&lt;/p&gt;

&lt;p&gt;「To be or not to be, 这不是一个问题。」&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
